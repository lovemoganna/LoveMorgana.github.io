<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoveMorgana&#39;s Blog</title>
  
  <subtitle>世上无难事,只怕有心人.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="luoyupiaoshang.club/"/>
  <updated>2018-04-25T05:01:41.297Z</updated>
  <id>luoyupiaoshang.club/</id>
  
  <author>
    <name>LiGang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>李刚_产品经理助理</title>
    <link href="luoyupiaoshang.club/2018/04/03/interview/"/>
    <id>luoyupiaoshang.club/2018/04/03/interview/</id>
    <published>2018-04-03T11:59:06.000Z</published>
    <updated>2018-04-25T05:01:41.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>手机：15733207536</li><li>Email：luoyupiaoshang@gmail.com </li><li>QQ：1763296564</li></ul><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul><li>李刚/男/1995</li><li>统招本科/河北大学工商学院/土木工程</li><li>毕业时间: 2017/06</li><li>Github：<a href="https://github.com/lovemoganna" target="_blank" rel="noopener">https://github.com/lovemoganna</a></li><li>个人网站: <a href="https://luoyupiaoshang.club">https://luoyupiaoshang.club</a> </li><li>期望职位：产品经理助理</li><li>期望薪资：5K</li><li>期望城市：北京</li></ul><h2 id="相关技能"><a href="#相关技能" class="headerlink" title="相关技能"></a>相关技能</h2><p><strong>和产品有关的东西</strong></p><table><thead><tr><th style="text-align:center">UML</th><th style="text-align:center">Axure原型图</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.jianshu.com/p/319f32c296bb" target="_blank" rel="noopener">UML类图/用例图</a></td><td style="text-align:center"><a href="https://interview-1255840357.cos.ap-chengdu.myqcloud.com/%E6%9D%8E%E5%88%9A%E7%9A%84DEMO.rar?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDCQ99v2K0eYv3Uf0sXvhwPX8U2fItkwkP%26q-sign-time%3D1523938769%3B1523940569%26q-key-time%3D1523938769%3B1523940569%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D1d07cdd02ba52d7bb90f867cd8c8f874b373c62a&amp;token=f66eb1123caacaff1ff922fca6ba52a84a64dfe310001&amp;clientIP=118.187.22.49&amp;clientUA=cb071746-6105-4794-b8ab-5df606c517ea" target="_blank" rel="noopener">Axure图下载</a></td></tr><tr><td style="text-align:center">Visual Paradigm</td><td style="text-align:center">WPS/XMind8/ProcessOne/Git/Axure</td></tr></tbody></table><p><strong>java项目</strong></p><p><a href="https://github.com/lovemoganna/MySeckill/tree/master/md" target="_blank" rel="noopener">秒杀项目</a></p><h2 id="个人展示"><a href="#个人展示" class="headerlink" title="个人展示"></a>个人展示</h2><h3 id="个人网站"><a href="#个人网站" class="headerlink" title="个人网站."></a>个人网站.</h3><table><thead><tr><th style="text-align:center">目的</th><th style="text-align:center">开发环境</th><th style="text-align:center">相关技术</th><th style="text-align:center">未来发展</th></tr></thead><tbody><tr><td style="text-align:center">记录自己用过的东西</td><td style="text-align:center">砖瓦匠/centos7/githook</td><td style="text-align:center">Nodejs/Nginx</td><td style="text-align:center">关联个人微信公众号[bt_afu],做消息推广</td></tr></tbody></table><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析."></a>数据分析.</h3><p>简书这个产品,活跃了不少和我一样95后的用户.其中多数都是喜欢文学的大学生,也活跃着不少像我一样喜欢开发的人员.</p><p>我有一个<a href="https://github.com/lovemoganna/Nodejs/blob/master/jianshu/content/content.txt" target="_blank" rel="noopener">爬虫项目</a>,nodejs写的,爬取了简书里面的作者的首页和预览内容.</p><h3 id="人工智能图像合成方面的认识"><a href="#人工智能图像合成方面的认识" class="headerlink" title="人工智能图像合成方面的认识"></a>人工智能图像合成方面的认识</h3><ul><li><p>目的: 本着对新奇事物的探索,我在深度学习平台<a href="http://russellcloud.com" target="_blank" rel="noopener">russellCloud</a>做了下面这个项目.这个平台提供一个GPU来供机器训练模型.</p></li><li><p>项目链接: <a href="https://github.com/lovemoganna/deepfakes" target="_blank" rel="noopener">deepfakes</a></p></li><li><p>介绍: 将二者众多的图片进行模型训练,来合成具有二者共性的多张图片.我们挑选出一张最具有特点的展示.</p></li><li><p>作用对象: 特朗普 和  恶灵骑士</p></li><li><p>得出的结果: 一次完美的换脸术.</p></li><li><p>展示:</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/7505161-a05b032241c3199d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>现在的发展: 该项技术已经延续使用在视频剪辑方面,可以做到真人换脸.几乎无缝对接.</li></ul><h2 id="熟练工具"><a href="#熟练工具" class="headerlink" title="熟练工具"></a>熟练工具</h2><ul><li>办公工具: office</li><li>脑图/时序图/流程图: ProcessOne/XMind</li><li>统一建模语言: Visual</li><li>markdown语言</li><li>sql: mysql</li><li>linux: centos6/7 &amp;&amp; ubuntu</li><li>浏览器: firefox/chrome</li><li>熟悉的语言: java/nodejs/html/jsp</li></ul><h2 id="致谢-amp-amp-简历下载"><a href="#致谢-amp-amp-简历下载" class="headerlink" title="致谢&amp;&amp;简历下载"></a>致谢&amp;&amp;简历下载</h2><p>感谢观看,期待有机会同您共事!<br><a href="https://interview-1255840357.cos.ap-chengdu.myqcloud.com/%E6%9D%8E%E5%88%9A_%E4%BA%A7%E5%93%81%E5%8A%A9%E7%90%86.doc?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDJWMuaup5UQSF1Wg2feT66vGJ9v2DVBge%26q-sign-time%3D1523940452%3B1523942252%26q-key-time%3D1523940452%3B1523942252%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D41035520c8703e1853f6307a4fd5b88d3902b55e&amp;token=f63e60471bb34f7ac11fc060653884c3b1bbac9410001&amp;clientIP=118.187.22.49&amp;clientUA=88b86a7e-2dac-44a2-8eeb-bd16fda1f86f" target="_blank" rel="noopener">简历下载</a><br><a href="https://interview-1255840357.cos.ap-chengdu.myqcloud.com/Eyepetizer%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90%E5%92%8C%E8%B0%83%E7%A0%94.7z?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID35RnB0FFdR2sKdd1zgHztNcX0c15cYDS%26q-sign-time%3D1524632491%3B1524634291%26q-key-time%3D1524632491%3B1524634291%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dabfd68a9a03a8a92c34e2c6dca168262c930af03&amp;token=3cba613b06ce2128068f23cac2aa20e02a42965c10001&amp;clientIP=118.187.22.48&amp;clientUA=a743ec2e-fb5b-473f-95f5-236239c13d2a" target="_blank" rel="noopener">产品分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;联系方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;手机：15733207536&lt;/li&gt;
&lt;li&gt;Email：luoyupiaoshang@gmail.com &lt;
      
    
    </summary>
    
      <category term="mysql" scheme="luoyupiaoshang.club/categories/mysql/"/>
    
    
      <category term="个人简历" scheme="luoyupiaoshang.club/tags/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>mysql设计以及架构优化</title>
    <link href="luoyupiaoshang.club/2018/02/28/mysql%E8%AE%BE%E8%AE%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/"/>
    <id>luoyupiaoshang.club/2018/02/28/mysql设计以及架构优化/</id>
    <published>2018-02-28T02:16:47.000Z</published>
    <updated>2018-04-05T02:25:54.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电商常用功能模块的数据库设计"><a href="#电商常用功能模块的数据库设计" class="headerlink" title="电商常用功能模块的数据库设计"></a>电商常用功能模块的数据库设计</h2><p>模块的划分:</p><p>注册会员–展示商品–加入购物车–生成订单</p><h2 id="使用的工具和需要掌握的内容"><a href="#使用的工具和需要掌握的内容" class="headerlink" title="使用的工具和需要掌握的内容"></a>使用的工具和需要掌握的内容</h2><ol><li><p>使用MySQL5.7版本.</p></li><li><p>Mysql的图形客户端程序,Mysqlworkbench.</p></li><li><p>Linux下命令和Shell脚本的基础知识.</p></li></ol><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>常见的购物流程:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">用户登录</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">选购商品</span><span class="literal">-</span><span class="literal">-</span><span class="comment">加购物车</span><span class="literal">-</span><span class="literal">-</span><span class="comment">检查库存</span><span class="literal">-</span><span class="literal">-</span><span class="comment">提交订单</span>            <span class="comment">YES</span></span><br><span class="line"><span class="comment"></span>                                            <span class="literal">-</span><span class="literal">-</span>  <span class="comment">在线支付</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">订单付款</span></span><br><span class="line"><span class="comment"></span>                                                          <span class="comment">YES</span></span><br><span class="line"><span class="comment"></span>                                            <span class="literal">-</span><span class="literal">-</span>  <span class="comment">货到付款</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">订单付款</span></span><br></pre></td></tr></table></figure><p>需要以下几个模块的设计</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户模块: 完成用户注册和登录验证.</span><br><span class="line"></span><br><span class="line">商品模块: 前后台商品管理和浏览.</span><br><span class="line"></span><br><span class="line">订单模块: 订单及购物车的生成和管理.</span><br><span class="line"></span><br><span class="line">仓配模块: 仓库库存和物流管理功能.</span><br></pre></td></tr></table></figure><h2 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h2><p>1.数据库结构设计</p><p>逻辑设计 —&gt; 物理设计</p><p>2.实际工作中</p><p>逻辑设计 + 物理设计</p><p>3.物理设计<br>一般就是<code>表名</code>,<code>字段名</code>,<code>字段类型</code>的设计.</p><p><strong>数据库规范概述</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>数据库命名规范</span><br><span class="line"><span class="bullet">2. </span>数据库基本设计规范</span><br><span class="line"><span class="bullet">3. </span>数据库索引命名和优化</span><br><span class="line"><span class="bullet">4. </span>数据库字段设计规范</span><br><span class="line"><span class="bullet">5. </span>数据库SQL开发规范</span><br><span class="line"><span class="bullet">6. </span>数据库操作行为规范</span><br></pre></td></tr></table></figure></p><h3 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h3><h4 id="所有数据库对象名称必须使用小写字母并用下划线分割"><a href="#所有数据库对象名称必须使用小写字母并用下划线分割" class="headerlink" title="所有数据库对象名称必须使用小写字母并用下划线分割."></a>所有数据库对象名称必须使用小写字母并用下划线分割.</h4><p>原因就是Mysql数据库对大小写敏感.</p><p>不同的数据库名    eg: DBName  dbname</p><p>不同的表名        eg :Table   table     tabLe</p><h4 id="所有数据库对象名称禁止使用Mysql保留关键字"><a href="#所有数据库对象名称禁止使用Mysql保留关键字" class="headerlink" title="所有数据库对象名称禁止使用Mysql保留关键字"></a>所有数据库对象名称禁止使用Mysql保留关键字</h4><p>比如说你给列名起了个名字叫<code>form</code></p><p>那么查询的时候就可能出现<code>select id,username,from,age from tb_user;</code>这种情况.</p><p>执行SQL的时候,mysql不清楚这2个form有什么区别.</p><p>要非解决这种问题哪,就用`from``来区分关键字.</p><h4 id="数据库对象的命名要能做到见名识义-并且不能超过32个字符"><a href="#数据库对象的命名要能做到见名识义-并且不能超过32个字符" class="headerlink" title="数据库对象的命名要能做到见名识义,并且不能超过32个字符"></a>数据库对象的命名要能做到见名识义,并且不能超过32个字符</h4><p>eg: 数据库命名示例: mc_userdb</p><p>eg: 用户账号表: user_count</p><p><strong>一般的临时表的命名规范:</strong></p><p>像导入导出数据表,临时统计所使用的表,用完马上清理掉,最好.</p><p>但是大部分情况下都不允许,所以我们<code>建立临时表时,必须要以tmp为前缀并以日期为后缀.</code></p><p>eg : tmp_export_data_2018_01_28</p><p><strong>备份表</strong></p><p>备份表必须以bak为前缀并以日期为后缀.</p><p>eg : bak_copy_data_2018_01_28</p><p><strong>所有存储相同数据的列名和列类型必须一致</strong></p><p>观察下面的的示例.</p><p><strong>用户信息表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customer_inf(</span><br><span class="line">  customer_inf_id <span class="built_in">int</span> <span class="keyword">unsigned</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'自增'</span>,</span><br><span class="line">  customer_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'customer login 表的自增'</span>,</span><br><span class="line">  customer_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'用户真实姓名'</span>,</span><br><span class="line">  identity_card_type tinyint <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'证件类型: 1 身份证, 2 微信网证'</span>,</span><br><span class="line">  identify_card_no <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">comment</span> <span class="string">'证件号码'</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p><strong>订单表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_master(</span><br><span class="line">  order_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'订单ID'</span>,</span><br><span class="line">  order_sn <span class="built_in">bigint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'订单编号 yyyymmddnnnnnnn'</span>,</span><br><span class="line">  customer_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'下单人ID'</span>,</span><br><span class="line">  shipping_user <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'收货人姓名'</span>,</span><br><span class="line">  province <span class="built_in">SMALLINT</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'收获人所在省'</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p>我们可以观察到用户信息表中的<code>customer_id</code>字段和订单表中<code>customer_id</code>字段类型和大小相同:都是无符号的int类型.</p><p>这对于数据库的查询性能是非常重要的.一般都是关联列,对于查询的效率很有影响.</p><h2 id="数据库命名规范总结"><a href="#数据库命名规范总结" class="headerlink" title="数据库命名规范总结"></a>数据库命名规范总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有数据库对象名称必须小写.</span><br><span class="line"><span class="bullet">2. </span>命名要见名识意,禁止使用Mysql的保留关键字.</span><br><span class="line"><span class="bullet">3. </span>临时表要以tmp<span class="emphasis">_开头,备份表以bak_</span>开头,并且以时间戳结尾.</span><br><span class="line"><span class="bullet">4. </span>所有存储相同数据的列名和列类型必须保持一致.</span><br></pre></td></tr></table></figure><h2 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h2><p>现在可能还存在着Mysql5.5使用之前MyISAM(默认存储引擎)情况.</p><p>如今的Mysql5.7没有其他需求的话,默认是是使用<code>Innodb存储引擎</code>.</p><h3 id="所有的表都要使用Innodb存储引擎"><a href="#所有的表都要使用Innodb存储引擎" class="headerlink" title="所有的表都要使用Innodb存储引擎"></a>所有的表都要使用Innodb存储引擎</h3><p>原因就是Innodb存储引擎支持事务,行级锁,更好的恢复性,高并发下性能更好.与Oracle很相似.</p><p>MyISAM在高并发的情况下,锁表是一种很常见的性能问题.Innodb存存储引擎解决了很多问题.</p><h3 id="数据库和表的字符集统一使用UTF-8"><a href="#数据库和表的字符集统一使用UTF-8" class="headerlink" title="数据库和表的字符集统一使用UTF-8"></a>数据库和表的字符集统一使用UTF-8</h3><p>如果之存储中文字符的话,用GBK/GB2312字符集都可以.</p><p><strong>统一的字符集可以避免由于字符集准换成的乱码.</strong></p><p>Mysql中的UTF8字符集汉字点3个字节,ASCII码占用1个字节.</p><p>eg : 如果定义了varchar(255)的列使用UTF8存储中文字符,255个字符实际占用755个字节.</p><h3 id="所有表和字段都要添加注释"><a href="#所有表和字段都要添加注释" class="headerlink" title="所有表和字段都要添加注释"></a>所有表和字段都要添加注释</h3><p>使用comment从句添加表这列的备注,这些我们基本都知道.</p><p>目的: 从一开始就进行数据字典的维护.</p><h3 id="尽量控制单表数据量的大小-建议控制在500万行以内"><a href="#尽量控制单表数据量的大小-建议控制在500万行以内" class="headerlink" title="尽量控制单表数据量的大小,建议控制在500万行以内"></a>尽量控制单表数据量的大小,建议控制在500万行以内</h3><p>但是500万行数据量并不是Mysql数据库的限制</p><p><strong>Mysql存储数据量的大小,取决于存储设置和文件系统,Mysql并没有对其进行了限制.</strong></p><p>比如所: 32位操作系统单个文件不能超过2个G.所以32位操作系统限制了Mysql数据库的存储容量大小.</p><p>但是我们都使用64为的操作系统了,所以不必考虑存储容量的限制了.</p><p><strong>可以使用历史数据归档,分库分表等手段来控制数据量大小.</strong></p><p>这主要用在业务复杂的方面:比如订单表</p><h3 id="谨慎的使用Mysql分区表"><a href="#谨慎的使用Mysql分区表" class="headerlink" title="谨慎的使用Mysql分区表"></a>谨慎的使用Mysql分区表</h3><p>分区表在物理上表现为多个文件,在逻辑上表现为一个表.</p><p>谨慎选择分区主键,跨分区查询效率可能更低.</p><p>建议采用物理分表的方式管理大数据.</p><h3 id="尽量做到冷热数据分离-减少表的宽度"><a href="#尽量做到冷热数据分离-减少表的宽度" class="headerlink" title="尽量做到冷热数据分离,减少表的宽度"></a>尽量做到冷热数据分离,减少表的宽度</h3><p>除了注意表中的行,我们还要注意表中的宽度,Mysql对表中的数据行没有限制,但是一个表中所能包含的列却有限制.</p><p>Mysql限制一个表中最多存放4096列,并且每一行的大小不能超过65535个字节.</p><p><strong>减少磁盘IO,保证热数据的内存缓存命中率</strong></p><p><strong>利用更有效的利用缓存,避免读入无用的冷数据</strong></p><p><strong>为了保证表的宽度,要使用垂直拆分:经常一起使用的列放到一个表中,可以避免过多的冗关联操作,从另一方面可以提高查询的性能</strong></p><h3 id="禁止在表中建立预留字段"><a href="#禁止在表中建立预留字段" class="headerlink" title="禁止在表中建立预留字段"></a>禁止在表中建立预留字段</h3><p>一般是采用varchar类型,但是这种类型占用空间比较大.</p><p>预留字段的命名很难做到见名识义</p><p>预留字段无法确认存储的数据类型,所以无法选择合适的类型.</p><p>对预留字段类型的修改,会对表进行锁定.</p><h3 id="禁止在数据库中存储图片-文件等二进制数据"><a href="#禁止在数据库中存储图片-文件等二进制数据" class="headerlink" title="禁止在数据库中存储图片,文件等二进制数据"></a>禁止在数据库中存储图片,文件等二进制数据</h3><p>之前搭建了FastDFS服务器.可以解决这个问题.</p><h3 id="禁止在线上做数据库压力测试"><a href="#禁止在线上做数据库压力测试" class="headerlink" title="禁止在线上做数据库压力测试"></a>禁止在线上做数据库压力测试</h3><p>要在专门的测试环境下测试.如果业务环境没上线,就不要再管理测试了.</p><h3 id="禁止从开发环境-测试环境直接连接生产环境数据库"><a href="#禁止从开发环境-测试环境直接连接生产环境数据库" class="headerlink" title="禁止从开发环境,测试环境直接连接生产环境数据库"></a>禁止从开发环境,测试环境直接连接生产环境数据库</h3><h2 id="数据库基本设计规范总结"><a href="#数据库基本设计规范总结" class="headerlink" title="数据库基本设计规范总结"></a>数据库基本设计规范总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有表必须使用Innodb存储引擎.</span><br><span class="line"><span class="bullet">2. </span>所有表及字段都要有备注信息,并使用UTF8字符集.</span><br><span class="line"><span class="bullet">3. </span>要尽量做到控制单表大小,并把冷热数据分离.</span><br><span class="line"><span class="bullet">4. </span>禁止使用预留字段及在表中存储大的二进制数据.</span><br></pre></td></tr></table></figure><h2 id="数据库索引规范"><a href="#数据库索引规范" class="headerlink" title="数据库索引规范"></a>数据库索引规范</h2><p>索引对数据库的查询性能来说是非常重要的.</p><h3 id="不要滥用索引"><a href="#不要滥用索引" class="headerlink" title="不要滥用索引"></a>不要滥用索引</h3><p>限制每张表上的索引数量,单张表索引不超过5个.</p><p>索引并不是越多越好!索引可以提高效率同样也可以降低效率.</p><p>原因是索引可以提高查询的效率,但同样也会降低插入和更新的效率.</p><p><strong>禁止给表中的每一列都建立单独的索引.</strong></p><p>Innodb是一种索引组织表.所谓的索引组织表就是,数据存储的逻辑顺序和索引的顺序是相同的.表的存储顺序只能有一种.</p><p><strong>Innodb是按照主键索引来组织表的.</strong></p><p>固定的要求就是,<strong>每个innodb表必须有一个主键.</strong></p><p>如果你没建立.Mysql就会选择第一个非空唯一索引作为主键.</p><p>如果没有非空唯一索引,Mysql就会自动生成一个占6个字节的主键.但性能不好.</p><p>表中主键的选择:<strong>不能使用更新频繁的列作为主键,不使用多列主键.</strong></p><p>多列主键指的是<code>联合索引</code>作为主键.</p><p>Innodb是索引组织表,如果使用上面的2个索引作为主键,不断频繁的改变顺序,不但会使服务器IO增加,同时会占用大量的CPU资源.</p><p><strong>不要使用UUID,MD5,哈希,这种字符串数组的数据来作为主键.</strong></p><p>这类数据无法保证数据的顺序更改.</p><p>拿UUID来说,我们无法保证下面插入的UUID的值是否大于前面的值,要是后插入的UUID的值比前面的小.</p><p>那么Innodb为了保证表的顺序性,要把这个小的UUID的值插入到前面.</p><p>这样就会造成大于这个新值的数据往后移动,这样就会造成大量的IO操作,还会占用大量的CPU资源.降低整体服务器的类型.</p><p><strong>最好选中顺序自动增长的ID值,也就是数据库为我们提供的auto_increment 这种自增ID作为主键</strong></p><h3 id="在哪些上建立索引"><a href="#在哪些上建立索引" class="headerlink" title="在哪些上建立索引?"></a>在哪些上建立索引?</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 一般在<span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>语句的<span class="keyword">WHERE</span>从句的列建立索引.</span><br><span class="line"><span class="number">2.</span> 包含在<span class="keyword">ORDER</span> <span class="keyword">BY</span>,<span class="keyword">GROUP</span> <span class="keyword">BY</span>,<span class="keyword">DISTINCT</span>中的字段建立索引.</span><br><span class="line"><span class="number">3.</span> 通常情况下,我们会选择建立联合索引,因为这样性能会更好.</span><br><span class="line"><span class="number">4.</span> 多表<span class="keyword">JOIN</span>的关联列上建立索引.</span><br><span class="line"></span><br><span class="line">如果<span class="keyword">Join</span>的关联列上没有索引,在进行During操作的时候,性能会很差.</span><br></pre></td></tr></table></figure><h3 id="建立索引目的"><a href="#建立索引目的" class="headerlink" title="建立索引目的"></a>建立索引目的</h3><p>我们希望查询时通过索引来进行数据查找,从而减少磁盘的随机IO.增加查询的性能.所以我们的索引可以过滤出越少的数据,则我们需要从磁盘读入的数据越少.</p><h3 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序?"></a>如何选择索引列的顺序?</h3><p>我们是从左到右的顺序来使用的.</p><p><strong>我们要把区分度最高的列放在联合索引的最左侧.</strong></p><p><strong>尽量把字段长度小的列放在联合索引的最左侧.</strong></p><p><strong>使用最频繁的列放在联合索引的左侧,</strong></p><h3 id="避免建立冗余索引和重复索引"><a href="#避免建立冗余索引和重复索引" class="headerlink" title="避免建立冗余索引和重复索引"></a>避免建立冗余索引和重复索引</h3><p>1.重复索引: 索引列完全重复.</p><p>eg: primary key(id) index(id)  unique index(id)</p><p>我们一旦指定了id作为主键,就相当于在id列上建立了一个非空的唯一索引.</p><p><strong>Mysql中的主键就是一个非空的唯一索引.</strong></p><p>2.冗余索引: 部分索引列是冗余的.</p><p>eg: index(a,b,c) index(a,b) index(a)</p><p>列存储</p><p>存储空间数据</p><p>create table user (id int unsigned auto_increment primary key,name varchar(32) not null,age int(2) not null,f varchar(32) not null);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;电商常用功能模块的数据库设计&quot;&gt;&lt;a href=&quot;#电商常用功能模块的数据库设计&quot; class=&quot;headerlink&quot; title=&quot;电商常用功能模块的数据库设计&quot;&gt;&lt;/a&gt;电商常用功能模块的数据库设计&lt;/h2&gt;&lt;p&gt;模块的划分:&lt;/p&gt;
&lt;p&gt;注册会员–展示商
      
    
    </summary>
    
      <category term="mysql" scheme="luoyupiaoshang.club/categories/mysql/"/>
    
    
      <category term="mysql设计" scheme="luoyupiaoshang.club/tags/mysql%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="架构优化" scheme="luoyupiaoshang.club/tags/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Redis-cluster搭建</title>
    <link href="luoyupiaoshang.club/2018/02/25/Redis%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>luoyupiaoshang.club/2018/02/25/Redis集群的搭建/</id>
    <published>2018-02-25T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis集群搭建使用的包"><a href="#Redis集群搭建使用的包" class="headerlink" title="Redis集群搭建使用的包"></a>Redis集群搭建使用的包</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e81ad3dab8dbd9fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Redis-集群的原理"><a href="#Redis-集群的原理" class="headerlink" title="Redis 集群的原理"></a>Redis 集群的原理</h2><p><a href="https://www.jianshu.com/p/2177874695c4" target="_blank" rel="noopener">redis单机版的操作</a></p><h3 id="Redis-cluster的架构"><a href="#Redis-cluster的架构" class="headerlink" title="Redis-cluster的架构"></a>Redis-cluster的架构</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-35c6a3e1a08a08a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>redis-cluster有一个投票:容错机制,用来确定是哪个节点挂了.少数服从多数.</p><p>比如下面这张图:</p><p>有5个节点,黄色的节点认为红色的节点挂了,只要剩下的3个节点有2个认为它挂了,那么红色的就认为挂了.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7568ca9150bc5eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>架构的细节</strong></p><p>1.所有的redis节点彼此互联(PING-PONG机制),内部使用2进制协议优化传输速度和带宽.</p><p>2.节点的fail是通过集群中超过半数的节点监测失效时才生效.</p><p>3.客户端与redis节点直连,不需要中间proxy层,客户端不需要连接集群所有节点,连接集群中任何一个节点即可.</p><p>4.redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster负责维护node-slot–value</p><blockquote><p>redis集群中内置了16384个哈希槽,当需要在redis集群中放置一个key-value的时候,redis先对key使用crc16算法算出一个结果.<br>然后把结果对16384取余,这样每个key都会对应一个编号在0-16383之间的哈希槽,redis会根据节点数量大致均等的将哈希槽映射到不同的节点.</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/7505161-91fffabab7103de4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>极限情况下,允许有16384个节点.</p><h2 id="redis集群的搭建步骤"><a href="#redis集群的搭建步骤" class="headerlink" title="redis集群的搭建步骤"></a>redis集群的搭建步骤</h2><p>1.一台虚拟机运行6个redis实例.端口从7001-7006.</p><p>2.复制redis实例,复制目录需要<code>-r</code></p><p><code>cp redis/bin redis-cluster/redis01 -r</code></p><p>进入<code>cd redis-cluster/redis01</code>中将持久化文件<code>dump</code>删除,不删除会对我们的集群造成影响.</p><p>接下来,修改<code>bin</code>目录下的<code>redis.conf</code>文件.主要修改<code>端口号</code>和<code>打开注释</code>.</p><p><strong>修改端口号</strong>:<code>port 7001</code></p><p><strong>打开注释</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-94046664c79fd963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>接下来修改剩余的5个.</p><p>3.写脚本启动<code>start-all.sh</code><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> redis01</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis02</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis03</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis04</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis05</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis06</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br></pre></td></tr></table></figure></p><p>无法启动,是因为需要授权的.</p><p><code>chmod u+x start-all.sh</code></p><p>4.查看是否启动</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0064e1761e1535c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.进入redis源代码里面找一个文件</p><p>也就是在<code>`/root/redis-4.0.8/src目录下去寻找.使用</code>ll *.rb<code>会找到</code>redis-trib.rb`这个文件.</p><p>将这个文件复制到<code>/usr/local/redis-cluster</code>这个目录中.</p><p>现在的目录结构:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5dbfaea302e681c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>6.安装ruby环境<br><code>yum install ruby</code><br><br><code>yum install rubygems</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-225c22e64e190848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>输入你失败提示的那个的地址,去浏览器下载<code>specs.4.8.gz</code>这个文件,,输入<code>gem install redis</code>就能成功了.</p><p>7.ruby脚本</p><p><code>./redis-trib.rb create --replicas 1 192.168.25.133:7001 192.168.25.133:7002 192.168.25.133:7003 192.168.25.133:7004 192.168.25.133:7005 192.168.25.133:7006</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b08fbbac48ee56c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>8.查看分配的主从服务器,以及槽的分配</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-cluster]# ./redis-trib.rb create --replicas <span class="number">1</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on <span class="number">6</span> nodes...</span><br><span class="line">Using <span class="number">3</span> masters:</span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line"><span class="symbol">M:</span> f525a4b2a3ff6cc32a36f276b17460910ac6334f <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="symbol">M:</span> f865949d32a241285032a900ea0911859f83c44e <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line"><span class="symbol">M:</span> db89b6f29ffa891ab166a39fb6101be99b763859 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="symbol">S:</span> b53df7de4aeb85751e64ec95743628a8387acf2c <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span></span><br><span class="line">   replicates db89b6f29ffa891ab166a39fb6101be99b763859</span><br><span class="line"><span class="symbol">S:</span> af12ed12992d8c15057a356d299edac4a4b630fc <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span></span><br><span class="line">   replicates f525a4b2a3ff6cc32a36f276b17460910ac6334f</span><br><span class="line"><span class="symbol">S:</span> 10189b284f51732b5a64aea3f9c8e7f545db9059 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line">   replicates f865949d32a241285032a900ea0911859f83c44e</span><br><span class="line">Can I set the above configuration? (type <span class="string">'yes'</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to <span class="number">each</span> node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span>)</span><br><span class="line"><span class="symbol">M:</span> f525a4b2a3ff6cc32a36f276b17460910ac6334f <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">M:</span> f865949d32a241285032a900ea0911859f83c44e <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">M:</span> db89b6f29ffa891ab166a39fb6101be99b763859 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">S:</span> af12ed12992d8c15057a356d299edac4a4b630fc <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates f525a4b2a3ff6cc32a36f276b17460910ac6334f</span><br><span class="line"><span class="symbol">S:</span> 10189b284f51732b5a64aea3f9c8e7f545db9059 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates f865949d32a241285032a900ea0911859f83c44e</span><br><span class="line"><span class="symbol">S:</span> b53df7de4aeb85751e64ec95743628a8387acf2c <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates db89b6f29ffa891ab166a39fb6101be99b763859</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All <span class="number">16384</span> slots covered.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis集群搭建使用的包&quot;&gt;&lt;a href=&quot;#Redis集群搭建使用的包&quot; class=&quot;headerlink&quot; title=&quot;Redis集群搭建使用的包&quot;&gt;&lt;/a&gt;Redis集群搭建使用的包&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-im
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>Spring与Redis整合</title>
    <link href="luoyupiaoshang.club/2018/02/24/%7Fspring%E5%92%8Credis%E6%95%B4%E5%90%88/"/>
    <id>luoyupiaoshang.club/2018/02/24/spring和redis整合/</id>
    <published>2018-02-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="application-redix-xml"><a href="#application-redix-xml" class="headerlink" title="application-redix.xml"></a>application-redix.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接redis单机版 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;bean id="jedisClientPool" class="lups.org.common.jedis.impl.JedisClientPool"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jedisPool" ref="jedisPool"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id="jedisPool" class="redis.clients.jedis.JedisPool"&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg name="host" value="192.168.25.133"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg name="port" value="6379"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接redis集群 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClientCluster"</span> <span class="attr">class</span>=<span class="string">"lups.org.common.jedis.impl.JedisClientCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jedisCluster"</span> <span class="attr">ref</span>=<span class="string">"jedisCluster"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisCluster"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7003"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7004"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7005"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7006"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClientTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> void TestJedisClient()&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//初始化Spring容器</span></span><br><span class="line">            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext-redis.xml"</span>);</span><br><span class="line">            <span class="comment">//通过反射来获取bean对象</span></span><br><span class="line">            JedisClient jedisClient = context.getBean(JedisClientCluster.<span class="keyword">class</span>);</span><br><span class="line">             <span class="comment">//来进行redis的操作</span></span><br><span class="line">            jedisClient.<span class="keyword">set</span>(<span class="string">"aa"</span>,<span class="string">"1234"</span>);</span><br><span class="line">            String a = jedisClient.<span class="keyword">get</span>(<span class="string">"aa"</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.println(a);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存的添加"><a href="#缓存的添加" class="headerlink" title="缓存的添加"></a>缓存的添加</h2><p>一般就在服务层里面添加.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一般显示查询缓存</span><br><span class="line"></span><br><span class="line">如果缓存中有直接响应数据</span><br><span class="line"></span><br><span class="line">缓存中没有,查询数据库.</span><br><span class="line"></span><br><span class="line">返回结果之前,把结果添加到缓存就可以了.</span><br><span class="line"></span><br><span class="line">注意的一点就是不管是添加缓存和查询缓存,都不应该影响正常的逻辑.</span><br><span class="line"></span><br><span class="line">所以把`查询/添加缓存逻辑`放在<span class="keyword">try</span>块里面.</span><br></pre></td></tr></table></figure><h2 id="缓存同步"><a href="#缓存同步" class="headerlink" title="缓存同步"></a>缓存同步</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">更新完数据库,必须要更新缓存.也就是要一致.我们要求增改操作的时候,都应该同步缓存.</span><br><span class="line"></span><br><span class="line">所以在添加/更新的时候,删除缓存中对应的数据就可以实现自动更新了.这样就可以实现缓存同步了.</span><br><span class="line"></span><br><span class="line">如果采用的是hash类型,千万不要直接删除key,否则再次查询的时候,会对服务器造成很大的压力.</span><br><span class="line"></span><br><span class="line">修改那个field,就删那个field的缓存就可以了.<span class="string">`hdel key field1`</span>.此时缓存,没有了,去查数据库,从而实现了缓存同步.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;application-redix-xml&quot;&gt;&lt;a href=&quot;#application-redix-xml&quot; class=&quot;headerlink&quot; title=&quot;application-redix.xml&quot;&gt;&lt;/a&gt;application-redix.xml&lt;/
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>Redis接口的编写</title>
    <link href="luoyupiaoshang.club/2018/02/24/Redis%E9%9B%86%E7%BE%A4%E6%8E%A5%E5%8F%A3/"/>
    <id>luoyupiaoshang.club/2018/02/24/Redis集群接口/</id>
    <published>2018-02-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.382Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.linuxidc.com/Linux/2016-12/138979.htm" target="_blank" rel="noopener">防火墙关闭,也可能对搭建有影响</a></p><h2 id="使用redis-cli连接redis集群"><a href="#使用redis-cli连接redis集群" class="headerlink" title="使用redis-cli连接redis集群"></a>使用redis-cli连接redis集群</h2><p><code>redis01/redis-cli -h 192.168.25.133 -p 7001 -c</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-254223ec35185426.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>输入一个key=a,value=123.经过crc16算法对key进行hash化出来一个值,再对16384取余,就可以得到一个值,用这个值匹配对应的槽就可以了.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-53e387300cfb2977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这样就可以证明我搭建成功了.不变红就是没连接上.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5f2e680c60d95c5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="测试单机版连接"><a href="#测试单机版连接" class="headerlink" title="测试单机版连接"></a>测试单机版连接</h2><p><a href="https://www.cnblogs.com/MyMaster-zf/p/5718625.html" target="_blank" rel="noopener">防火墙检查了都没连接上的办法.</a></p><p>只能设置密码了.在<code>redis.conf</code>中设置<code>requirepass wsys</code>,其中<code>wsys</code>就是你设置的密码.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-84dc8a7f488a1b23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>测试代码</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class JedisTest &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> jedisTest() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.25.133"</span>, <span class="number">6379</span>);</span><br><span class="line">            jedis.auth(<span class="string">"wsys"</span>);</span><br><span class="line">            <span class="keyword">String</span> a = jedis.<span class="built_in">set</span>(<span class="string">"a"</span>, <span class="string">"123"</span>);</span><br><span class="line">            <span class="keyword">String</span> a1 = jedis.<span class="built_in">get</span>(<span class="string">"a"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(a1);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>JedisPool测试代码</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> jedisPoolTest() throws Exception&#123;</span><br><span class="line">       <span class="built_in">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建一个连接池对象,两个参数host,port</span></span><br><span class="line">           JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"192.168.25.133"</span>, <span class="number">6379</span>);</span><br><span class="line">           Jedis jedis= jedisPool.getResource();</span><br><span class="line">           jedis.auth(<span class="string">"wsys"</span>);</span><br><span class="line">           <span class="keyword">String</span> a = jedis.<span class="built_in">get</span>(<span class="string">"a"</span>);</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"jedisPool中取: "</span>+a);</span><br><span class="line">           jedis.<span class="built_in">close</span>();</span><br><span class="line">           jedisPool.<span class="built_in">close</span>();</span><br><span class="line">       &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>jedisCluster测试</strong></p><p>如果出现<code>java.lang.NumberFormatException</code>这个错误,需要把jedis的maven依赖版本调高点,<code>2.9.0</code>就可以了<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> jedisClusterTest() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建一个JedisCluster对象,有一个参数nodes是一个set类型,set中包含若干个HostAndPort对象.</span></span><br><span class="line">           Set&lt;HostAndPort&gt; nodes =<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7001</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7002</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7003</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7004</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7005</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7006</span>));</span><br><span class="line">           JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodes);</span><br><span class="line">           jedisCluster.<span class="built_in">set</span>(<span class="string">"b"</span>, <span class="string">"12"</span>);</span><br><span class="line">           <span class="keyword">String</span> b = jedisCluster.<span class="built_in">get</span>(<span class="string">"b"</span>);</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"jedisCluster: "</span>+b);</span><br><span class="line">           jedisCluster.close();</span><br><span class="line">           <span class="comment">//java.lang.NumberFormatException</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>总结</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.单机版用jedispool来操作jedis.</span><br><span class="line"><span class="number">2</span>.集群版直接使用jedisCluster就可以了.</span><br></pre></td></tr></table></figure><h2 id="编写jedisclient的接口以及单机版-amp-amp-集群版的实现类"><a href="#编写jedisclient的接口以及单机版-amp-amp-集群版的实现类" class="headerlink" title="编写jedisclient的接口以及单机版&amp;&amp;集群版的实现类"></a>编写jedisclient的接口以及单机版&amp;&amp;集群版的实现类</h2><p>1.jedisClient<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface JedisClient &#123;</span><br><span class="line">    <span class="comment">//字符串的操作</span></span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> value);</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//判断字符串的键值是否存在</span></span><br><span class="line">    Boolean exists(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//过期时间的设置</span></span><br><span class="line">    Long expire(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="built_in">int</span> seconds);</span><br><span class="line">    <span class="comment">//剩余过期时间</span></span><br><span class="line">    Long ttl(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//hash类型的操作</span></span><br><span class="line">    Long hset(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field,<span class="keyword">String</span> value);</span><br><span class="line">    <span class="comment">//增加1</span></span><br><span class="line">    Long incr(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//查询hash类型</span></span><br><span class="line">    <span class="keyword">String</span> hget(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field);</span><br><span class="line">    <span class="comment">//删除hash类型</span></span><br><span class="line">    Long hdel(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span>... field);</span><br><span class="line">    <span class="comment">//判断hash类型是否存在</span></span><br><span class="line">    Boolean hexists(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field);</span><br><span class="line">    <span class="comment">//查询所有hash的值</span></span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; hvals(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//删除一个键值对</span></span><br><span class="line">    Long del(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.jedisClientPool<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">package lups.<span class="keyword">org.common.jedis.impl;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">import </span><span class="keyword">java.util.List;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">import </span>lups.<span class="keyword">org.common.jedis.JedisClient;</span></span><br><span class="line"><span class="keyword">import </span>redis.clients.<span class="keyword">jedis.Jedis;</span></span><br><span class="line"><span class="keyword">import </span>redis.clients.<span class="keyword">jedis.JedisPool;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">public </span>class <span class="keyword">JedisClientPool </span>implements <span class="keyword">JedisClient </span>&#123;</span><br><span class="line"></span><br><span class="line">private <span class="keyword">JedisPool </span><span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"></span>public <span class="keyword">JedisPool </span>getJedisPool() &#123;</span><br><span class="line">return <span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"></span><br><span class="line">public void setJedisPool(<span class="keyword">JedisPool </span><span class="keyword">jedisPool) </span>&#123;</span><br><span class="line">this.<span class="keyword">jedisPool </span>= <span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String set(String key, String value) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.set(key, </span>value)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String get(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.get(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">Boolean </span>exists(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Boolean </span>result = <span class="keyword">jedis.exists(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long expire(String key, int seconds) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.expire(key, </span>seconds)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long ttl(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.ttl(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long incr(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.incr(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long hset(String key, String field, String value) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.hset(key, </span>field, value)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String hget(String key, String field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.hget(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long hdel(String key, String... field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.hdel(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">Boolean </span>hexists(String key, String field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Boolean </span>result = <span class="keyword">jedis.hexists(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;String&gt; hvals(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>List&lt;String&gt; result = <span class="keyword">jedis.hvals(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long del(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.del(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.jedisClientCluster<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lups.org.common.jedis.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lups.org.common.jedis.JedisClient;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class JedisClientCluster implements JedisClient &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> JedisCluster getJedisCluster() &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setJedisCluster(JedisCluster jedisCluster) &#123;</span><br><span class="line"><span class="keyword">this</span>.jedisCluster = jedisCluster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.<span class="built_in">set</span>(<span class="built_in">key</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Boolean exists(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.exists(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long expire(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> seconds) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.expire(<span class="built_in">key</span>, seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long ttl(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.ttl(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long incr(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.incr(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long hset(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field, <span class="keyword">String</span> value) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hset(<span class="built_in">key</span>, field, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> hget(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hget(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long hdel(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span>... field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hdel(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Boolean hexists(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hexists(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; hvals(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hvals(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long del(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.del(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.linuxidc.com/Linux/2016-12/138979.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;防火墙关闭,也可能对搭建有影响&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用redis-cli连接r
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>Redis基本操作</title>
    <link href="luoyupiaoshang.club/2018/02/24/redis/"/>
    <id>luoyupiaoshang.club/2018/02/24/redis/</id>
    <published>2018-02-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>判断redis服务的健康状态.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2e65d5efd03b0e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">存储key-value,把key计算为一个hash值,把它放在一个位置.</span><br><span class="line"></span><br><span class="line">取得时候,先计算是哪个位置,直接去那个位置去取,</span><br><span class="line"></span><br><span class="line">是直接存取这个值,而不是遍历.</span><br><span class="line"></span><br><span class="line">Redis之所以快,是因为所有数据都是保存在内存当中的.</span><br></pre></td></tr></table></figure></p><p>5种数据类型<br>key-value类型.</p><p>string<br>hash<br>list<br>set<br>sorted set</p><h3 id="1-string类型"><a href="#1-string类型" class="headerlink" title="1.string类型"></a>1.string类型</h3><p>1.写入键值对<br><code>set str1 abc</code><br>2.取得键值对<br><code>get str1</code><br>3.显示所有的key<br><code>keys *</code><br>4.增加一个键<br><code>incr key1</code><br>5.删除操作<br><code>del key4</code><br>6.加1的操作</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b6ecd303f63c61fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>7.减1的操作</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0d6c6ab0999aae50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><code>Redis中所有的字段都是字符串,他们是先转换成整型,在加减1的.</code></p><p><code>我们观察下面的操作,就可以了.key2的键值是字符串,你给它加1,自然会出错,</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-5de49e5b35d18107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><code>要是像下面这样做就对了</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-fbaa5d14a4d9bc7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="2-hash类型"><a href="#2-hash类型" class="headerlink" title="2.hash类型"></a>2.hash类型</h3><p>1.创建一个hash<br><code>hset hash1 field1 1</code><br>2.查询一个hash的值<br><code>hget hash1 field1</code><br>3.删除一个hash<br><code>hdel hash1 field1</code><br>4.查询所有hash的field值<br><code>hkeys hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ac7d1421e7eaf530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.查询所有的hash的value值<br><code>hvals hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2c692c0e17613d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>6.查询hash所有的key-value值<br><code>hgetall hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e44ea5663b444d91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h3><p>list的元素可以重复,有序.<br>1.从左往右存储数据<br><code>rpush a b c d e f</code><br>2.从右往左储存数据<br><code>lpush 1 2 3 4 5 6</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e27713e2bb8e7749.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.查看数据范围<br><code>lrange list1 0 -1</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-544ce80889e2d2ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.取出元素<br><code>lpop list1</code><br><code>rpop list1</code><br><code>取出元素之后,就不能看到之前的全部了.</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-46681b59cb0d0f20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h3><p>set 无序,且输入的数据不能重复<br>1.添加元素<br><code>sadd set1 a b c d a b</code><br>2.删除元素<br><code>srem set1 a</code><br>3.查看元素<br><code>smembers set1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f08045c0049e09a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.seta与setb的比较</p><p><code>类似于左连接和右连接那种形式,剔除共有的部分</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-272878a72f49c3d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.取交集<br><code>sinter seta setb</code><br>6.取并集<br><code>sunion seta setb</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-00495d5eb1a723a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h3><p>元素是有序的,耗费的性能会很高. </p><p>1.升序排列<br><code>zrange zset1 0 -1 withscores</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-b083f143961a1e89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-71de8f1e4cd5f97f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.降序排列<br><code>zrevrange zset1 0 -1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ad833f1ec1f6bf20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>3.带分数倒序排序</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-217194b867712373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="设置key的过期时间"><a href="#设置key的过期时间" class="headerlink" title="设置key的过期时间"></a>设置key的过期时间</h3><p><code>expire key1 20</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7bba03ea71cf76f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>1.看看过期时间和倒计时</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ce26d0a4e5fd10b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2.永久保存和不存在的标识</p><p><code>-1是永久保存的数据(持久化),-2是不存在的数据</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-d255b5319743bf4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="redis的持久化"><a href="#redis的持久化" class="headerlink" title="redis的持久化"></a>redis的持久化</h3><p>1.重新设置过期时间</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2d673484a9d4d0e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.持久化数据<br><code>persist key3</code>,-1就代表数据持久化了.<br><img src="http://upload-images.jianshu.io/upload_images/7505161-3a7a49d54a2d4d5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.redis的持久化.<br>redis总的所有数据都是保存在内存当中的.</p><p>持久化方案有2种:</p><pre><code>1.Rdb:快照形式.定期把内存中当前时刻的数据保存到磁盘.这是Redis默认支持的持久化方案.2.aof形式:把所有对redis数据库操作的命令,增删改操作的命令,保存到文件当中,数据库恢复时把所有的命令执行一遍就可以了.</code></pre><p>redis.conf的配置里面有描述.</p><p>1.第一种:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-7d3bcac61425b092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>15分钟之内有1个key发生变化,他就保存一个快照文件.<br>5分钟之内有10个key发生变化,他就保存一个快照文件.<br>1分钟之呢有1W个key发生变化,他就保存一个快照文件.</p><p><code>快照模式有丢失文件的可能性,但是我们一般就做缓存.没多大影响.</code></p><p>2.第二种<code>把增删改操作用文件保存</code></p><p>默认是不开启的.对磁盘的IO比较频繁.<br><img src="http://upload-images.jianshu.io/upload_images/7505161-4600ea0113d356eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;判断redis服务的健康状态.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>DB02-数据库字段设计规范</title>
    <link href="luoyupiaoshang.club/2018/02/22/DB02-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>luoyupiaoshang.club/2018/02/22/DB02-数据库字段设计规范/</id>
    <published>2018-02-22T02:16:47.000Z</published>
    <updated>2018-04-05T02:25:54.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>每个innodb表都要有一个主键</span><br><span class="line"><span class="number">2.</span>限制表上索引的数量,避免建立重复和冗余索引</span><br><span class="line"><span class="number">3.</span>注意合理选择符合索引键值的顺序</span><br></pre></td></tr></table></figure><h2 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h2><p>字段类型的选择,会直接影响数据库的建立.</p><p>列的字段越大,建立索引时所需要的空间就会越大.</p><h3 id="优先选择符合存储需要的最小数据类型"><a href="#优先选择符合存储需要的最小数据类型" class="headerlink" title="优先选择符合存储需要的最小数据类型."></a>优先选择符合存储需要的最小数据类型.</h3><p>1.我们一般是将字符串转为数字类型存储.</p><p>下面的函数的转换:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INET_ATON('<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span>') = <span class="number">4294967295</span></span><br><span class="line">把字符串的IP地址转换成整型.</span><br><span class="line"></span><br><span class="line">反之,把整型转换成字符串的IP地址</span><br><span class="line">INET_NTOA('<span class="number">4294967295</span>') = <span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span></span><br></pre></td></tr></table></figure></p><p>2.对于非负型的数据来说,要优先使用无符号整型来存储</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;复习&quot;&gt;&lt;a href=&quot;#复习&quot; class=&quot;headerlink&quot; title=&quot;复习&quot;&gt;&lt;/a&gt;复习&lt;/h2&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="mysql" scheme="luoyupiaoshang.club/categories/mysql/"/>
    
    
      <category term="mysql设计" scheme="luoyupiaoshang.club/tags/mysql%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>mysql服务器日志</title>
    <link href="luoyupiaoshang.club/2018/02/01/mysql%E6%97%A5%E5%BF%97%E5%88%92%E5%88%86/"/>
    <id>luoyupiaoshang.club/2018/02/01/mysql日志划分/</id>
    <published>2018-02-01T08:25:37.000Z</published>
    <updated>2018-04-05T02:25:53.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mysql的使用情景"><a href="#Mysql的使用情景" class="headerlink" title="Mysql的使用情景"></a>Mysql的使用情景</h2><h3 id="日志记录系统"><a href="#日志记录系统" class="headerlink" title="日志记录系统"></a>日志记录系统</h3><p>MySQL 数据库的插入和查询性能都非常的高效，如果设计地较好，在使用 MyISAM 存储引擎的时候，两者可以做到互不锁定，达到很高的并发性能。</p><p>所以，对需要大量的插入和查询日志记录的系统来说，MySQL 是非常不错的选择。</p><p>比如处理用户的登录日志，操作日志 等 ，都是非常适合的应用场景。</p><h3 id="数据仓库系统"><a href="#数据仓库系统" class="headerlink" title="数据仓库系统"></a>数据仓库系统</h3><p>随着现在数据仓库数据量的飞速增长，我们需要的存储空间越来越大。数据量的不断增长，使数据的统计分析变得越来越低效，也越来越困难。</p><p>解决方式如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 采用昂贵的高性能主机以提高计算性能，用高端存储设备提高 I/O 性能，效果理想，但是成本非常高；</span><br><span class="line">2. 通过将数据复制到多台使用大容量硬盘的廉价 pc server上，以提高整体计算性能和 I/O 能力，效果尚可，存储空间有一定限制，成本低廉.</span><br><span class="line">3. 通过将数据水平拆分，使用多台廉价的 pc<span class="built_in"> server </span>和本地磁盘来存放数据，每台机器上面都只有所有数据的一部分，解决了数据量的问题，</span><br><span class="line">   所有 pc<span class="built_in"> server </span>一起并行计算，也解决了计算能力问题，通过中间代理程序调配各台机器的运算任务，</span><br><span class="line">   既可以解决计算性能问题又可以解决 I/O 性能问题，成本也很低廉.</span><br></pre></td></tr></table></figure><p>这是基本解决方法.对于Mysql来讲,实现2,3步骤很容易,通过读写分离,主从复制就可以实现.</p><p>通过 MySQL 的简单复制功能，可以很好的将数据从一台主机复制到另外一台 ，不仅仅在局域网内可以复制，在广域网同样可以。优点在于Mysql是免费的.</p><h2 id="Mysql的架构组成"><a href="#Mysql的架构组成" class="headerlink" title="Mysql的架构组成"></a>Mysql的架构组成</h2><h3 id="Mysql的物理文件组成"><a href="#Mysql的物理文件组成" class="headerlink" title="Mysql的物理文件组成"></a>Mysql的物理文件组成</h3><h4 id="Mysql5-7服务器日志"><a href="#Mysql5-7服务器日志" class="headerlink" title="Mysql5.7服务器日志"></a>Mysql5.7服务器日志</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>选择常规查询和慢查询日志输出目的地</span><br><span class="line"><span class="bullet">2. </span>错误日志</span><br><span class="line"><span class="bullet">3. </span>一般查询日志</span><br><span class="line"><span class="bullet">4. </span>二进制日志(Binlog)</span><br><span class="line"><span class="bullet">5. </span>manchaxun rizhi</span><br><span class="line"><span class="bullet">6. </span>DDL 日志</span><br><span class="line"><span class="bullet">7. </span>服务器日志维护</span><br></pre></td></tr></table></figure><h2 id="MySQL服务器有几个日志可以帮助你找出正在发生的活动"><a href="#MySQL服务器有几个日志可以帮助你找出正在发生的活动" class="headerlink" title="MySQL服务器有几个日志可以帮助你找出正在发生的活动."></a>MySQL服务器有几个日志可以帮助你找出正在发生的活动.</h2><p>日志类型:</p><ul><li>错误日志</li><li>一般查询日志</li><li>二进制日志</li><li>中继日志</li><li>慢查询日志</li><li>DDL日志(元数据日志)<br>-<br>写入日志的信息:</li><li>在启动,运行或者停止mysqld时遇到的问题</li><li>建立了客户的客户关系和声明</li><li>改变数据的语句(也可用于复制)</li><li>从复制主服务器接收的数据更改</li><li>查询花费了超过 long_query_time几秒的时间执行</li><li>元数据操作由DDL语句执行</li></ul><hr><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，除Windows上的错误日志之外，不会启用任何日志。</span><br><span class="line"></span><br><span class="line">DDL日志始终在需要时创建，并且没有用户可配置选项;</span><br><span class="line"></span><br><span class="line">默认情况下，服务器为数据目录中的所有启用日志写入文件。</span><br><span class="line"></span><br><span class="line">您可以通过刷新日志来强制服务器关闭并重新打开日志文件（或在某些情况下切换到新的日志文件）。</span><br><span class="line"></span><br><span class="line">发出FLUSH LOGS语句时发生日志刷新 ; 用a 或者参数执行 mysqladmin ; 或使用 或 选项执行 mysqldump。</span><br><span class="line"></span><br><span class="line">例如<span class="symbol">:flush-logsrefresh--flush-logs--master-data</span></span><br><span class="line"></span><br><span class="line">另外，二进制日志在其大小达到max_binlog_size系统变量的值时被刷新 。</span><br><span class="line"></span><br><span class="line">可以在运行时控制常规查询和慢查询日志.可以启动或者禁用日志记,或者更改日志文件名称.</span><br><span class="line"></span><br><span class="line">也可以告诉服务器编写通用查询和慢查询条目来记录表或者日志文件.</span><br><span class="line"></span><br><span class="line">日志维护操作(比如<span class="symbol">:</span>旧日志文件到期)的信息</span><br><span class="line"></span><br><span class="line">有关保持日志安全的信息</span><br><span class="line"></span><br><span class="line">以上都可以查看下列链接.</span><br></pre></td></tr></table></figure><p>TODO:</p><p><a href="">DDL日志</a></p><p><a href="">FLUSH语法</a></p><p><a href="">mysqladmin - 管理MySQL服务器的客户端</a></p><p><a href="">mysqldump–数据库备份程序</a></p><p><a href="">从服务器中继日志</a></p><p><a href="">服务器日志维护</a></p><p><a href="">密码和日志记录</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mysql的使用情景&quot;&gt;&lt;a href=&quot;#Mysql的使用情景&quot; class=&quot;headerlink&quot; title=&quot;Mysql的使用情景&quot;&gt;&lt;/a&gt;Mysql的使用情景&lt;/h2&gt;&lt;h3 id=&quot;日志记录系统&quot;&gt;&lt;a href=&quot;#日志记录系统&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="ServiceLog" scheme="luoyupiaoshang.club/tags/ServiceLog/"/>
    
  </entry>
  
  <entry>
    <title>选择常规查询和慢速查询日志的输出目的地</title>
    <link href="luoyupiaoshang.club/2018/01/27/%E9%80%89%E6%8B%A9%E5%B8%B8%E8%A7%84%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%85%A2%E9%80%9F%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E7%9A%84%E8%BE%93%E5%87%BA%E7%9B%AE%E7%9A%84%E5%9C%B0/"/>
    <id>luoyupiaoshang.club/2018/01/27/选择常规查询和慢速查询日志的输出目的地/</id>
    <published>2018-01-27T08:25:37.000Z</published>
    <updated>2018-04-05T02:25:55.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果启用了这些日志，则MySQL服务器可以灵活地控制输出目标到常规查询日志和慢速查询日志。</p><p>日志条目的可能目标是日志文件或 数据库中的general_log和 slow_log表mysql。</p><p>可以选择任一个或两个目的地。</p><h2 id="服务器启动时的日志控制。"><a href="#服务器启动时的日志控制。" class="headerlink" title="服务器启动时的日志控制。"></a>服务器启动时的日志控制。</h2><p>该–log-output选项指定日志输出的目的地.</p><p>该选项本身不会启用日志。它的语法是 ： –log-output[=value,…]</p><blockquote><p>如果–log-output给定值，则该值应该是一个或多个单词TABLE（记录到表）， FILE（记录到文件）或 NONE（不记录到表或文件）的以逗号分隔的列表。 NONE如果存在的话，优先于任何其他说明符。</p><p>如果–log-output省略，则默认日志记录目标为FILE。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果启用了这些日志，则MySQL服务器可以灵活地控制输出目标到常规查询日志和慢速查询日志。&lt;/p&gt;
&lt;p&gt;日志条目的可能目标是日志文件或 数
      
    
    </summary>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="ServiceLog" scheme="luoyupiaoshang.club/tags/ServiceLog/"/>
    
  </entry>
  
  <entry>
    <title>集群环境中解决Session共享问题</title>
    <link href="luoyupiaoshang.club/2018/01/25/%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%A7%A3%E5%86%B3Session%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98/"/>
    <id>luoyupiaoshang.club/2018/01/25/集群环境中解决Session共享问题/</id>
    <published>2018-01-25T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:53.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="具体业务"><a href="#具体业务" class="headerlink" title="具体业务"></a>具体业务</h2><p>1.登录需要校验用户名和密码,然后把用户信息保存在session里面。最终返回用户登录成功。</p><p>2.用户访问用户中心，必须要登录。我们使用拦截器来实现。判断用户当前是否登录。</p><p>3.在拦截器里面判断有没有Session信息，再看session中有没有用户信息。如果有Session里面有用户信息，用户就登陆了。</p><p>但是要实现高并发，高可用。用需要前端搭建nginx服务器.</p><h2 id="session共享发生的位置"><a href="#session共享发生的位置" class="headerlink" title="session共享发生的位置"></a>session共享发生的位置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过<span class="selector-tag">nginx</span>负载均衡服务器，如果用户登录，如果用户登录成功了，就会把用户信息保存到当前的<span class="selector-tag">tomcat1</span>的<span class="selector-tag">Session</span>里面。</span><br><span class="line"></span><br><span class="line">用户成功后，刷新页面，他就会去访问用户中心。</span><br><span class="line"></span><br><span class="line">判断用户是否登录，恰巧轮到<span class="selector-tag">tomcat2</span>来提供服务了。发现没有用户的登录信息。要求用户登录。</span><br><span class="line"></span><br><span class="line">接下来，又提示登录，登录成功后，<span class="selector-tag">session</span>保存在<span class="selector-tag">Tomcat1</span>里面，刷新页面，再次访问用户中心，又会访问<span class="selector-tag">Tomcat2</span><span class="selector-class">.tomcat2</span>里面没有存储用户信息的<span class="selector-tag">session</span>，所以提示再次登录。</span><br></pre></td></tr></table></figure><h2 id="一般的解决方案"><a href="#一般的解决方案" class="headerlink" title="一般的解决方案"></a>一般的解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">配置tomcat，tomcat1会广播自己的节点信息，其他的tomcat节点接收到消息，会把那一个tomcat的session复制到其他的tomcat里面来。</span><br><span class="line"></span><br><span class="line">tomcat广播形式配合session共享，会有一个节点的上限。如果不听的往集群中加tomcat的时候，会形成内网的，网络固化，会占满内网的带宽，服务器的会变慢。</span><br><span class="line"></span><br><span class="line">所有节点共享session，需要解决高并发问题。</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有一个服务器，专门存储管理session信息。（Session里面都是<span class="built_in">key</span>-<span class="built_in">value</span>的形式，并且有过期时间的设置。）</span><br><span class="line"></span><br><span class="line">需要我们来模拟Session。redis有list的存储模型，有序，且是<span class="built_in">key</span>-<span class="built_in">value</span>的形式。</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>配置tomcat集群，配置tomcatsession复制。节点不要超过<span class="number">5</span>个。</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>可以使用session服务器，保存Session信息，使每个节点是无状态，需要模拟session。</span><br><span class="line"></span><br><span class="line">单点登录系统是使用Redis模拟Session，实现session的统一管理。</span><br></pre></td></tr></table></figure><h2 id="分布式事务的理解"><a href="#分布式事务的理解" class="headerlink" title="分布式事务的理解"></a>分布式事务的理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提交订单，订单提交，提醒库房系统发货。MQ，系统发消息。</span><br><span class="line"></span><br><span class="line">出异常，就说明事情没做完，导致数据不一致，还有手动应答，把消息处理完毕，正常结束了。</span><br><span class="line"></span><br><span class="line">给服务器一个回馈，我已经成功了。 此时，服务器吧这个消息删除掉。</span><br><span class="line"></span><br><span class="line">如果没有正常消费这个消息，服务器就会不停的重发，直到这个消息处理完，就能保证这个事不停的做。最终保证数据的一致性。</span><br><span class="line"></span><br><span class="line">我们使用ActiveMQ来实现事务的最终一致性。这个就可以解决分布式事务这样的问题。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;具体业务&quot;&gt;&lt;a href=&quot;#具体业务&quot; class=&quot;headerlink&quot; title=&quot;具体业务&quot;&gt;&lt;/a&gt;具体业务&lt;/h2&gt;&lt;p&gt;1.登录需要校验用户名和密码,然后把用户信息保存在session里面。最终返回用户登录成功。&lt;/p&gt;
&lt;p&gt;2.用户访问用户
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Session共享" scheme="luoyupiaoshang.club/tags/Session%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>ajax跨域问题</title>
    <link href="luoyupiaoshang.club/2018/01/24/ajax%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>luoyupiaoshang.club/2018/01/24/ajax跨域问题/</id>
    <published>2018-01-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模拟ajax跨域问题"><a href="#模拟ajax跨域问题" class="headerlink" title="模拟ajax跨域问题"></a>模拟ajax跨域问题</h2><p>建立2个工程,一个客户端,一个服务端.</p><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-4a04cbedae7ea614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="服务端的代码"><a href="#服务端的代码" class="headerlink" title="服务端的代码"></a>服务端的代码</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-949db7dccc96f168.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/7505161-aeea368f4bee676c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="写一个get请求的测试"></p><p>虽然调用成功,但是却有问题<br><img src="http://upload-images.jianshu.io/upload_images/7505161-79ea920fd6d539ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>console栏报出错误:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-b1103ae784cc7c6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>发生ajax跨域的原因:</strong></p><p>一开始我以为是服务器后台不允许前台调用,但实际上并不是这样.</p><p>它是由于下面的原因决定的:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>浏览器限制</span><br><span class="line">这是出于浏览器安全的考虑,当他发现你的请求是跨域的时候,浏览器本身会做一些校验,如果检验不通过,就会报出跨域安全问题.</span><br><span class="line"></span><br><span class="line">服务器后台没有问题,而是浏览器校验出了问题.</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>跨域</span><br><span class="line">发出的请求不是本域的,请求协议域名,端口,任何一个不一样,浏览器都视为跨域问题.我们后台的端口是<span class="number">8080</span>,前台的端口是<span class="number">9901.</span>域名即使一样也不可以.</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="symbol">XHR</span>(<span class="symbol">XMLHTTPRequest</span>)请求</span><br><span class="line">也就是发送的不是<span class="symbol">XHR</span>请求,就算是跨域,浏览器也不会报错.</span><br><span class="line"></span><br><span class="line">如果是json的请求,就不会报出这个错误,如果是xhr类型的请求,就会出现这样的错误.</span><br><span class="line"></span><br><span class="line">普通的ajax请求返回的是json对象.</span><br><span class="line"></span><br><span class="line">jsonp请求返回的是一个json脚本.</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/<span class="number">7505161</span><span class="number">-61</span>cf20ca7baa8e64.png?imageMogr2/auto-orient/strip<span class="comment">%7CimageView2/2/w/1240)</span></span><br></pre></td></tr></table></figure></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.浏览器限制:每个人都做改动,就是客户端的改动.</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.XHR:只要发出的数据类型不是这个类型,我们就可以跨域,所以我们使用jsonp.</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.跨域</span><br><span class="line">一.被调用方(),基于HHTP协议关于跨域方面的要求做出的修改,也就是说<span class="keyword">A</span>域名调用B域名的时候,在B域名返回数据中加入一些字段允许<span class="keyword">A</span>域名调用.浏览器通过校验,就不会发生浏览器校验问题,</span><br><span class="line"></span><br><span class="line">别的公司的,调用方(隐藏跨域:通过代理,浏览器发出的都是<span class="keyword">A</span>域名的请求,把代理的URL都转到B域名里面,这样看起来就是同一个域名.)</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.浏览器禁止检查:</span><br><span class="line"></span><br><span class="line">命令行禁止启动: --<span class="keyword">disable-web-security</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">2.jsonp如何解决跨域</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">jsonp是json的一种补充使用.</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">使用jsonp后台也需要改动.</span></span><br></pre></td></tr></table></figure><h3 id="jsonp类型展示"><a href="#jsonp类型展示" class="headerlink" title="jsonp类型展示:"></a>jsonp类型展示:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url  : cartHostUrl+<span class="string">'/ajax/getproduct/'</span>,</span><br><span class="line">    type : <span class="string">'GET'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">//返回json格式的数据   </span></span><br><span class="line">    jsonp: <span class="string">'callback'</span>,</span><br><span class="line">    cache:<span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       result =json;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后台修改:</p><p><img src="https://upload-images.jianshu.io/upload_images/7505161-1f5e01e70c1cb8c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模拟ajax跨域问题&quot;&gt;&lt;a href=&quot;#模拟ajax跨域问题&quot; class=&quot;headerlink&quot; title=&quot;模拟ajax跨域问题&quot;&gt;&lt;/a&gt;模拟ajax跨域问题&lt;/h2&gt;&lt;p&gt;建立2个工程,一个客户端,一个服务端.&lt;/p&gt;
&lt;h3 id=&quot;客户端代码&quot;
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Session共享" scheme="luoyupiaoshang.club/tags/Session%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>WebCrawler-网络爬虫01</title>
    <link href="luoyupiaoshang.club/2018/01/09/WebCrawler/"/>
    <id>luoyupiaoshang.club/2018/01/09/WebCrawler/</id>
    <published>2018-01-09T07:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.750Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="大虫子"><a href="#大虫子" class="headerlink" title="大虫子"></a>大虫子</h1><p><img src="https://luoyu-1255840357.cos.ap-shanghai.myqcloud.com/skystar/51de3afb518f0.jpg" alt=""></p><h2 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h2><p>我们人做的事:<br><br>访问一个网页,输入URL,按回车,该网站的服务器就会返回一个HTML文件<br>浏览器解析返回的数据,展示在UI上.</p><p>爬虫做的事:<br><br>爬虫模仿人的操作,给网站发送一个请求,网站会给爬虫程序返回一个HTML文件,爬虫程序在根据返回的数据进行抓取分析.</p><h3 id="爬虫概论"><a href="#爬虫概论" class="headerlink" title="爬虫概论"></a>爬虫概论</h3><p>网络爬虫是一种自动化浏览网络的程序,或者叫网络机器人.<br><br>爬虫被广泛用于互联网搜索引擎或其他类似网站，以获取或更新这些网站的内容和检索方式。<br>它们可以自动采集所有其能够访问到的页面内容，以供搜索引擎做进一步处理（分检整理下载的页面），而使得用户能更快的检索到他们需要的信息。</p><p>白话:你手动打开窗口，输入数据等等操作用程序代替。用程序替你获取你想要的信息，这就是网络爬虫.</p><h3 id="爬虫应用"><a href="#爬虫应用" class="headerlink" title="爬虫应用"></a>爬虫应用</h3><p>通常搜索引擎处理的对象是互联网网页。<br><br>首先面临的问题是：如何能够设计出高效的下载系统，以将如此海量的网页数据传送到本地，在本地形成互联网网页的镜像备份。网络爬虫即起此作用，它是搜索引擎系统中很关键也很基础的构件。</p><p>爬虫：实际上就是通过相应的技术，抓取页面上特定的信息。</p><p>这种程序实际是利用html文档之间的链接关系，在Web上一个网页一个网页的爬取(crawl)，</p><p>将这些网页抓到系统来进行分析，并放入数据库中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;大虫子&quot;&gt;&lt;a href=&quot;#大虫子&quot; class=&quot;headerlink&quot; title=&quot;大虫子&quot;&gt;&lt;/a&gt;大虫子&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://luoyu-1255840357.cos.ap-shangh
      
    
    </summary>
    
    
      <category term="爬虫的原理" scheme="luoyupiaoshang.club/tags/%E7%88%AC%E8%99%AB%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    
      <category term="爬虫架构" scheme="luoyupiaoshang.club/tags/%E7%88%AC%E8%99%AB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>区块链(Blockchain)</title>
    <link href="luoyupiaoshang.club/2018/01/08/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>luoyupiaoshang.club/2018/01/08/区块链/</id>
    <published>2018-01-08T12:45:39.000Z</published>
    <updated>2018-04-05T02:25:53.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><ul><li>区块链技术起源于<code>比特币</code>,是比特币的底层技术.</li></ul><blockquote><p>区块链本身是一串使用密码学方法相关联产生的数据块,<br>  每一个数据块中包含了一次比特币网络交易的信息,并由世界各地所有的比特币用户共同维护.</p></blockquote><h2 id="区块链的本质"><a href="#区块链的本质" class="headerlink" title="区块链的本质"></a>区块链的本质</h2><ul><li>区块链的本质是<code>电子账簿</code>.<blockquote><p>通俗讲,区块链就是利用计算机程序在全网记录所有交易信息的<strong>公开大账本</strong>.<br>人们只需要加入一个公开透明的数据库,通过点对点的记账,数据传输,认证或合约<br>来达成信用共识,而不再借助任何中间方.</p></blockquote></li></ul><h2 id="区块链的特点"><a href="#区块链的特点" class="headerlink" title="区块链的特点"></a>区块链的特点</h2><ul><li>区块链特点是受第三方控制的.</li></ul><blockquote><p>区块链中每个节点和矿工必须遵循同一记账交易规则,而这个规则是基于<strong>密码算法</strong>而不是信用.<br>  同时每笔交易需要网络内其他用户的批准,所以不需要一套第三方中介结构或信任机构背锅.</p></blockquote><h2 id="区块链的安全性"><a href="#区块链的安全性" class="headerlink" title="区块链的安全性"></a>区块链的安全性</h2><p>区块链的技术采取保障其安全性的算法是<code>单向哈希算法</code>.</p><blockquote><p>区块链采取单向哈希算法,哈希(hash)算法是一种单向密码体制,即它是一个从明文到密文的不可逆的映射,只有加密过程,没有解密过程.<br>  每当有加密交易产生时,网络中有强大运算能力的矿工(Miner)就开始利用算法解密验证交易,创造出新的区块来记录最新的交易.<br>  像石榴算法,绿萝算法,企鹅算法都是常见的搜索引擎算法.</p></blockquote><h2 id="区块链的分类"><a href="#区块链的分类" class="headerlink" title="区块链的分类"></a>区块链的分类</h2><p>目前已知的区块链技术大致可分成三类:</p><ul><li><p>公开区块链(public blockchain): 像比特币,公开区块链上的数据所有人都可以访问,所有人都可以发出交易等待被写入区块链.</p></li><li><p>协作区块链(federated blockchain): 德勤等会计所尝试的<strong>审计系统</strong>,参与区款连的节点是事先选择好的,节点间很可能是有很好的网络连接.</p></li><li><p>私有区域链(private blockchain): 参与的节点只有用户自己,数据的访问和使用有严格的权限管理.</p></li></ul><h2 id="区款连的运行"><a href="#区款连的运行" class="headerlink" title="区款连的运行"></a>区款连的运行</h2><blockquote><p>区块链这个公开透明的数据库包括了过去所有的交易记录,历史数据以及其他相关信息,这些信息安全地<strong>分布式存储</strong>在一串使用密码学方法产生的数据块中,即为一个区块,每个区块都包含了一个区块的索引,即区块的哈希值(hash),而从创始区块连接当前区块,就形成了区块链.<br>    区块链自动地降低了支付成本.</p></blockquote><h2 id="15年12月重金投资区块链的初创公司"><a href="#15年12月重金投资区块链的初创公司" class="headerlink" title="15年12月重金投资区块链的初创公司"></a>15年12月重金投资区块链的初创公司</h2><blockquote><p>华尔街的金融公司正在投资区块链,抢滩布局.Visa,纳斯达克,花旗风投投资了一家旧金山区块链初创公司chain,设计融资金额达到3000万美元.</p></blockquote><h2 id="类比特币数据货币RSCoin"><a href="#类比特币数据货币RSCoin" class="headerlink" title="类比特币数据货币RSCoin"></a>类比特币数据货币RSCoin</h2><blockquote><p>英国央行计划发布由中央机构控制的类比特币数据货币RSCoin.<br>    这是一款完全基于央行的需求来设计的基于区块链技术的数字货币,该技术将依赖于一系列权威机构,如商业机构,防止货币重复消费.<br>    目前,RSCoin由伦敦大学学院(UCL)研发,已进入了初步测试阶段.</p></blockquote><h2 id="区块链的结算应用"><a href="#区块链的结算应用" class="headerlink" title="区块链的结算应用"></a>区块链的结算应用</h2><blockquote><p>瑞穗银行声明中表示:”连续地生成包含交易信息的区块按照时间顺序链接成了区块链,编程不能被篡改的信息.而且,因为信息可以在多个公司之间共享,所以合作伙伴证实它可以缩短交易后的程序所需要的时间.”<br>    区块链技术在试验过程中,也确实缩短了交易后程序的时间,达到接近即时结算的效果.</p></blockquote><h2 id="中国资本在区块链的作为"><a href="#中国资本在区块链的作为" class="headerlink" title="中国资本在区块链的作为"></a>中国资本在区块链的作为</h2><blockquote><p>作为比特币及区块链的忠实拥护者.万向集团出资5000万美元成立了区块链基金,用于在全球范围内投资区块链商业应用相关的各类项目.<br>    全球十大区块链投资中我国占据三席,分别为数贝投资,IDG,万向区块链基金.    </p></blockquote><h2 id="测试代码高亮"><a href="#测试代码高亮" class="headerlink" title="测试代码高亮"></a>测试代码高亮</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] ages</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你好啊!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    代码高亮测试</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;区块链技术起源于&lt;code&gt;比特币&lt;/code&gt;,是比特币的底层技术.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;区
      
    
    </summary>
    
      <category term="区块链(Blockchain)" scheme="luoyupiaoshang.club/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-Blockchain/"/>
    
    
      <category term="FT中文网" scheme="luoyupiaoshang.club/tags/FT%E4%B8%AD%E6%96%87%E7%BD%91/"/>
    
      <category term="区块链" scheme="luoyupiaoshang.club/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>秒杀Service层开发</title>
    <link href="luoyupiaoshang.club/2018/01/02/%E7%A7%92%E6%9D%80service%E5%B1%82%E5%BC%80%E5%8F%91/"/>
    <id>luoyupiaoshang.club/2018/01/02/秒杀service层开发/</id>
    <published>2018-01-02T11:59:06.000Z</published>
    <updated>2018-04-05T02:25:54.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思考DAO层做的事"><a href="#思考DAO层做的事" class="headerlink" title="思考DAO层做的事"></a>思考DAO层做的事</h2><p>创建数据库,编写接口,书写mapper.xml(SQL),</p><p>配置mybatis-config.xml,整合spring-dao.xml.</p><p>总的来说就是接口设计和SQL编写.</p><p>代码和SQL进行分离,方便Review.</p><p>DAO拼接等逻辑在SERVICE层完成.</p><p>DAO层也成为数据访问层,也就是对mysql等远程系统的操作.</p><h2 id="service层包分类"><a href="#service层包分类" class="headerlink" title="service层包分类"></a>service层包分类</h2><p>dto –数据传输层,关于web和service的数据传递.</p><p>entity –业务实体的存放.</p><p>exception –秒杀结束,秒杀存货不足.</p><p>enum –枚举类</p><h3 id="service层接口的设计"><a href="#service层接口的设计" class="headerlink" title="service层接口的设计"></a>service层接口的设计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 业务接口:站在&quot;使用者&quot;角度设计接口</span><br><span class="line"> * 三个方面:方法定义粒度,参数,返回类型(return 类型/异常)</span><br><span class="line"> */</span><br><span class="line">public interface SeckillService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 展示所有秒杀记录</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;Seckill&gt; getAllSeckill();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return 展示单个秒杀记录</span><br><span class="line">     */</span><br><span class="line">    Seckill getBySeckillId(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 行为接口</span><br><span class="line">     * 秒杀开启时输出秒杀接口地址,</span><br><span class="line">     * 否则输出系统时间和秒杀时间.</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return Exposer</span><br><span class="line">     */</span><br><span class="line">    Exposer exportSeckillUrl(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行秒杀操作,需要根据商品Id和用户名来执行操作,</span><br><span class="line">     * 同时对用户的url来源渠道做一次验证.即和之前秒杀开启前的MD5值作比较.</span><br><span class="line">     *</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @param md5</span><br><span class="line">     * @Return SeckillException</span><br><span class="line">     */</span><br><span class="line">    SeckillExecution executeSeckill(long seckillId, long userPhone, String md5)</span><br><span class="line">            throws SeckillException, SeckillClosedException, RepatKillException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据传输数据的封装-dto"><a href="#数据传输数据的封装-dto" class="headerlink" title="数据传输数据的封装(dto)"></a>数据传输数据的封装(dto)</h3><h4 id="Exposer-暴露秒杀信息的的封装类"><a href="#Exposer-暴露秒杀信息的的封装类" class="headerlink" title="Exposer-暴露秒杀信息的的封装类"></a>Exposer-暴露秒杀信息的的封装类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 暴露秒杀地址DTO</span><br><span class="line"> */</span><br><span class="line">public class Exposer &#123;</span><br><span class="line">    //是否开启秒杀</span><br><span class="line">    public boolean exposed;</span><br><span class="line"></span><br><span class="line">    //MD5加密</span><br><span class="line">    private String md5;</span><br><span class="line"></span><br><span class="line">    //商品ID</span><br><span class="line">    private long seckillId;</span><br><span class="line"></span><br><span class="line">    //系统当前时间(毫秒),方便用户浏览器控制服务器的时间.</span><br><span class="line">    private Date now;</span><br><span class="line"></span><br><span class="line">    //秒杀开始时间</span><br><span class="line">    private Date start;</span><br><span class="line"></span><br><span class="line">    //秒杀结束时间</span><br><span class="line">    private Date end;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 不同的构造方法方便对象的初始化.</span><br><span class="line">     * 秒杀成功用到的构造方法</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param md5</span><br><span class="line">     * @param seckillId</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed, String md5, long seckillId) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        this.md5 = md5;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 不符合条件,用到的构造方法</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param now</span><br><span class="line">     * @param start</span><br><span class="line">     * @param end</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed,long seckillId,Date now, Date start, Date end) &#123;</span><br><span class="line">        this.exposed=exposed;</span><br><span class="line">        this.seckillId=seckillId;</span><br><span class="line">        this.now = now;</span><br><span class="line">        this.start = start;</span><br><span class="line">        this.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 秒杀开始之前,需要对秒杀地址隐藏,加密.</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param seckillId</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed, long seckillId) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isExposed() &#123;</span><br><span class="line">        return exposed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setExposed(boolean exposed) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMd5() &#123;</span><br><span class="line">        return md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setMd5(String md5) &#123;</span><br><span class="line">        this.md5 = md5;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getSeckillId() &#123;</span><br><span class="line">        return seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setSeckillId(long seckillId) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getNow() &#123;</span><br><span class="line">        return now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setNow(Date now) &#123;</span><br><span class="line">        this.now = now;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getStart() &#123;</span><br><span class="line">        return start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setStart(Date start) &#123;</span><br><span class="line">        this.start = start;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getEnd() &#123;</span><br><span class="line">        return end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setEnd(Date end) &#123;</span><br><span class="line">        this.end = end;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SeckillExecution-秒杀执行结果的封装类"><a href="#SeckillExecution-秒杀执行结果的封装类" class="headerlink" title="SeckillExecution-秒杀执行结果的封装类"></a>SeckillExecution-秒杀执行结果的封装类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 秒杀执行结果</span><br><span class="line"> */</span><br><span class="line">public class SeckillExecution &#123;</span><br><span class="line"></span><br><span class="line">    private long seckillId;</span><br><span class="line">    //秒杀执行结果状态</span><br><span class="line">    private int state;</span><br><span class="line">    //状态表示</span><br><span class="line">    private String stateInfo;</span><br><span class="line">    //秒杀成功对象</span><br><span class="line">    private SuccessKilled successKilled;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum, SuccessKilled successKilled) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getSeckillId() &#123;</span><br><span class="line">        return seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setSeckillId(long seckillId) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setState(int state) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStateInfo() &#123;</span><br><span class="line">        return stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setStateInfo(String stateInfo) &#123;</span><br><span class="line">        this.stateInfo = stateInfo;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SuccessKilled getSuccessKilled() &#123;</span><br><span class="line">        return successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setSuccessKilled(SuccessKilled successKilled) &#123;</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="秒杀接口的实现–Impl"><a href="#秒杀接口的实现–Impl" class="headerlink" title="秒杀接口的实现–Impl"></a>秒杀接口的实现–Impl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class SeckillServiceImpl implements SeckillService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用slf4j的日志</span><br><span class="line">     */</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SuccessKilledDao successKilledDao;</span><br><span class="line">    /**</span><br><span class="line">     * 与MD5结合的混淆的字符串.</span><br><span class="line">     */</span><br><span class="line">    private final String hx = &quot;aaskg8has$%^&amp;@i1564I^$&amp;*@$!&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Seckill&gt; getAllSeckill() &#123;</span><br><span class="line">        return secKillDao.queryAll(0, 4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Seckill getBySeckillId(long seckillId) &#123;</span><br><span class="line">        return secKillDao.queryById(seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断秒杀时间是否开始了</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Exposer exportSeckillUrl(long seckillId) &#123;</span><br><span class="line">        Seckill seckill = secKillDao.queryById(seckillId);</span><br><span class="line"></span><br><span class="line">        //系统当前时间</span><br><span class="line">        Date nowTime = new Date();</span><br><span class="line">        Date startTime = seckill.getStartTime();</span><br><span class="line">        Date endTime = seckill.getEndTime();</span><br><span class="line"></span><br><span class="line">        //1.如果seckill为null,不暴露地址.调用Exposer里面的初始化方法就可以了.</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            return new Exposer(false, seckillId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //2.如果秒杀时间不符合,也不能进行秒杀.</span><br><span class="line">        if (nowTime.getTime() &lt; startTime.getTime() || nowTime.getTime() &gt; endTime.getTime()) &#123;</span><br><span class="line">            return new Exposer(false, seckillId, nowTime, startTime, endTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //3.md5转换特定字符串的过程,是不可逆的.</span><br><span class="line">        String md5 = getMd5(seckillId);</span><br><span class="line">        return new Exposer(true, md5, seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成MD5字符串</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getMd5(long seckillId) &#123;</span><br><span class="line">        String base = seckillId + &quot;/&quot; + hx;</span><br><span class="line">        String md5 = DigestUtils.md5DigestAsHex(base.getBytes());</span><br><span class="line">        return md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行秒杀的实现,主要校验MD5来实现秒杀</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @param md5</span><br><span class="line">     * @return</span><br><span class="line">     * @throws SeckillException</span><br><span class="line">     * @throws SeckillClosedException</span><br><span class="line">     * @throws RepatKillException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5) throws SeckillException, SeckillClosedException, RepatKillException &#123;</span><br><span class="line"></span><br><span class="line">        //1.md5匹配不上,系统出现异常</span><br><span class="line">        if (md5 == null || !md5.equals(getMd5(seckillId))) &#123;</span><br><span class="line">            throw new SeckillException(&quot;Seckill data rewite! 你可能使用了重复秒杀的插件 !=QAQ=!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 2. md5匹配成功,</span><br><span class="line">         * 执行秒杀逻辑:</span><br><span class="line">         *  --减库存</span><br><span class="line">         *  --写明细</span><br><span class="line">         */</span><br><span class="line">        Date killTime = new Date();</span><br><span class="line">        try &#123;</span><br><span class="line">            //减库存</span><br><span class="line">            int updateCount = secKillDao.reduceNumber(seckillId, killTime);</span><br><span class="line">            //更新数&lt;0,说明减库存失败,没有更新到记录</span><br><span class="line">            if (updateCount &lt; 0) &#123;</span><br><span class="line">                //秒杀过期</span><br><span class="line">                throw new SeckillClosedException(&quot;Seckill is closed!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //写明细</span><br><span class="line">            int insertState = successKilledDao.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">            //唯一的验证标准就是验证 秒杀商品的ID和用户手机号.</span><br><span class="line">            //之前秒杀成功,state=1.再次秒杀同一seckillId的商品,他就会秒杀不成功了,因为我们设置的是insert ignore,插入就会忽略,insertState返回的就是0.</span><br><span class="line">            if (insertState &lt;= 0) &#123;</span><br><span class="line">                //重复秒杀</span><br><span class="line">                throw new RepatKillException(&quot;Seckill repeted!&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //秒杀成功</span><br><span class="line">                SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.SUCCESS, successKilled);</span><br><span class="line">                //TODO</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //这些异常的抛出有次序.我们要友好一些,要知道抛出的是哪个部分的异常.</span><br><span class="line">        //重复秒杀的异常</span><br><span class="line">        catch (RepatKillException e1) &#123;</span><br><span class="line">            throw e1;</span><br><span class="line">        &#125;</span><br><span class="line">        //秒杀时间过期的异常</span><br><span class="line">        catch (SeckillClosedException e2) &#123;</span><br><span class="line">            throw e2;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            //所有编译期异常都要转换为运行期异常</span><br><span class="line">            throw new SeckillException(&quot;seckill inner error:&quot; + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据字典的形成"><a href="#数据字典的形成" class="headerlink" title="数据字典的形成"></a>数据字典的形成</h4><p>根据条件判断需要抛出的stateInfo提示信息,直接在里面写,可用性很差,所以我们采用枚举类的方式来规范statInfo的分配.</p><h4 id="枚举类SeckillStatEnum"><a href="#枚举类SeckillStatEnum" class="headerlink" title="枚举类SeckillStatEnum"></a>枚举类SeckillStatEnum</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用枚举类表述常量数据字典</span><br><span class="line"> */</span><br><span class="line">public enum SeckillStatEnum &#123;</span><br><span class="line">    SUCCESS(1,&quot;秒杀成功!&quot;),</span><br><span class="line">    END(0,&quot;秒杀结束!&quot;),</span><br><span class="line">    REPEAT_KILL(-1,&quot;重复秒杀!&quot;),</span><br><span class="line">    INNER_ERROR(-2,&quot;系统异常!&quot;),</span><br><span class="line">    DATA_REWRITE(-3,&quot;数据篡改!&quot;);</span><br><span class="line"></span><br><span class="line">    private int state;</span><br><span class="line">    private String stateInfo;</span><br><span class="line"></span><br><span class="line">    SeckillStatEnum(int state, String stateInfo) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        this.stateInfo = stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStateInfo() &#123;</span><br><span class="line">        return stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //此静态方法迭代所有的类型</span><br><span class="line">    public static SeckillStatEnum stateOf(int index) &#123;</span><br><span class="line">        for (SeckillStatEnum state : values()) &#123;</span><br><span class="line">            //values()用来拿到所有类型</span><br><span class="line">            if (state.getState() == index) &#123;</span><br><span class="line">                return state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于以前的构造方法改造成含有枚举的表示方法.</p><p>秒杀成功用到的构造方法:<br>改造前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution(long seckillId, int state, String stateInfo, SuccessKilled successKilled) &#123;</span><br><span class="line">     this.seckillId = seckillId;</span><br><span class="line">     this.state = state;</span><br><span class="line">     this.stateInfo = stateInfo;</span><br><span class="line">     this.successKilled = successKilled;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>改造后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution(long seckillId, SeckillStatEnum statEnum) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum, SuccessKilled successKilled) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="异常的处理–Exception"><a href="#异常的处理–Exception" class="headerlink" title="异常的处理–Exception"></a>异常的处理–Exception</h4><h5 id="秒杀异常"><a href="#秒杀异常" class="headerlink" title="秒杀异常"></a>秒杀异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后两个异常都属于秒杀异常,所以继承此类即可.</span><br><span class="line"> */</span><br><span class="line">public class SeckillException extends RuntimeException &#123;</span><br><span class="line">    public SeckillException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="重复秒杀异常"><a href="#重复秒杀异常" class="headerlink" title="重复秒杀异常"></a>重复秒杀异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 重复秒杀异常(运行期异常)</span><br><span class="line"> * java的异常一般分为运行期异常和编译期异常</span><br><span class="line"> * spring声明式事务只接收运行期异常事务回滚策略.抛出非声明式异常,spring不会对其进行事务回滚.</span><br><span class="line"> */</span><br><span class="line">public class RepatKillException extends SeckillException&#123;</span><br><span class="line">    public RepatKillException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line">    public RepatKillException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="秒杀关闭异常"><a href="#秒杀关闭异常" class="headerlink" title="秒杀关闭异常"></a>秒杀关闭异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package org.seckill.exception;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: ligang</span><br><span class="line"> * date: 2018/2/7</span><br><span class="line"> * time: 15:39</span><br><span class="line"> * 秒杀时间关闭异常</span><br><span class="line"> */</span><br><span class="line">public class SeckillClosedException extends SeckillException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 运行期异常的继承,但是他们都属于秒杀异常</span><br><span class="line">     * @param message</span><br><span class="line">     */</span><br><span class="line">    public SeckillClosedException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillClosedException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Spring托管SERVICE依赖理论"><a href="#使用Spring托管SERVICE依赖理论" class="headerlink" title="使用Spring托管SERVICE依赖理论"></a>使用Spring托管SERVICE依赖理论</h2><h3 id="SpringIOC的概念"><a href="#SpringIOC的概念" class="headerlink" title="SpringIOC的概念"></a>SpringIOC的概念</h3><p>IOC-依赖注入</p><p>SpringIOC的过程会创建一个对象工厂,还会进行依赖管理,最终给一个一致的访问接口.</p><p>SuccessKillSERVICE完整的实例如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-63c952d8ab503399.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>使用IOC的好处:</strong></p><ol><li>对象创建统一托管</li><li>规范的声明周期管理</li><li>灵活的依赖注入</li><li>一致的获取对象(默认是单例)</li></ol><p>SpringIOC的注入方式和场景</p><p>三种方式实现如下</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7337c3d038b7ae0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们的IOC使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XML配置</span><br><span class="line">package-scan(包扫描)</span><br><span class="line">Annotation注解</span><br></pre></td></tr></table></figure><h3 id="springIOC的注解用法"><a href="#springIOC的注解用法" class="headerlink" title="springIOC的注解用法"></a>springIOC的注解用法</h3><ol><li>先进行包扫描</li></ol><p>在spring-service.xml里面输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--扫描Service包下所有使用注解的类型--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;org.seckill.service&quot;/&gt;</span><br></pre></td></tr></table></figure></p><ol><li>注解部分</li></ol><ul><li>@Component  如果你不知道该写@Service/@Controller的时候,@Component就是一个比较笼统的Spring容器在一个组件实例.</li><li>@Service</li><li>@Controller</li><li>dao里面的所有内容都会通过mapper.xml文件初始化放进Spring容器中,然后spring容器中回去Dao的实例,注入到相关的ervice下面</li><li>@Autowired(自动注入,就不用自己new实现类了) / @Resource / @Inject 注入方式</li></ul><h3 id="spring的声明式事务"><a href="#spring的声明式事务" class="headerlink" title="spring的声明式事务"></a>spring的声明式事务</h3><p>声明式事务就是不关心事务的开启或者提交.而是交给第三方框架来实现的.解脱事务代码.</p><p>1.执行事务的步骤<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">修改SQL<span class="number">-1</span>(更新/增加/删除)</span><br><span class="line">修改SQL<span class="number">-2</span></span><br><span class="line">修改SQL<span class="number">-3</span></span><br><span class="line">提交或者回滚</span><br></pre></td></tr></table></figure></p><p>2.声明式事务的使用方式<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ProxyFactoryBean</span> + <span class="selector-tag">XML</span>  <span class="selector-tag">----</span>  早期的使用方式(<span class="number">2.0</span>)</span><br><span class="line"><span class="selector-tag">tx</span><span class="selector-pseudo">:advice+aop</span>命名空间    <span class="selector-tag">----</span>  一次配置永久生效(使用最多的方式,不太关心事务是如何操作的)</span><br><span class="line">注解@<span class="selector-tag">Transaction</span>        <span class="selector-tag">-----</span>  注解控制(推荐使用,对我们有利)</span><br></pre></td></tr></table></figure></p><p>3.事务方法嵌套</p><p>声明式事务独有的概念<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">传播行为 --- spring默认是`propagation_required`,</span><br><span class="line">意思就是说当有一个新的事务加入中来,会直接加入到已经存在的事务,</span><br><span class="line">如果有事务存在就会直接加入到原有的事务当中,如果没有就会创建一个新的事务</span><br></pre></td></tr></table></figure></p><p>4.什么时候回滚事务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 抛出运行期异常(RuntimeException)可以执行回滚,非运行期异常可能不会全部回滚.</span><br><span class="line">2. 小心不当的try-catch,要是你使用try-catch包括一个有异常的程序,spring就会感知不到它会出现异常.</span><br></pre></td></tr></table></figure></p><ul><li><p>声明式事务的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--2.配置事务管理器,我们使用的是jdbc的事务管理器--&gt;</span><br><span class="line">   &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">       &lt;!--注入数据库连接池--&gt;</span><br><span class="line">       &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--3.配置基于声明式注解的声明式事务</span><br><span class="line">       当你输入tx:annotation-driven的时候,它会自动的把相关的schema加上</span><br><span class="line">       默认使用注解来管理事务行为</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>@Transaction的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用注解控制事务方法的优点:</span><br><span class="line">     1. 开发团队达成一致的约定,明确标注事务方法的编程风格</span><br><span class="line">     2. 保证事务方法的执行时间尽可能短,不要穿插其他的网络操作,比如:RPC/HTTP请求.或者剥离到事务方法外部:就是把它们写到方法的上一层.</span><br><span class="line">     3. 不是所有的方法都使用事务,如:只有一条修改操作,只读操作不需要事务控制.(mysql的行级锁有涉及到)</span><br></pre></td></tr></table></figure></li></ul><h3 id="service测试"><a href="#service测试" class="headerlink" title="service测试"></a>service测试</h3><p><a href="https://logback.qos.ch/manual/configuration.html" target="_blank" rel="noopener">slf4j接口的实现logback官网配置文件</a></p><p>日志logback.xml的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!--打印到控制台,默认级别是debug,时间,线程和日志的格式--&gt;</span><br><span class="line">&lt;configuration debug=&quot;true&quot;&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!-- encoders are  by default assigned the type</span><br><span class="line">             ch.qos.logback.classic.encoder.PatternLayoutEncoder --&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;debug&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类:"></a>测试类:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;,&quot;classpath:spring/spring-service.xml&quot;&#125;)</span><br><span class="line">public class SeckillServiceTest &#123;</span><br><span class="line">    //使用日志</span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SeckillService seckillService;</span><br><span class="line">    @Test</span><br><span class="line">    public void getAllSeckill() throws Exception &#123;</span><br><span class="line">        List&lt;Seckill&gt; list = seckillService.getAllSeckill();</span><br><span class="line">        logger.info(&quot;list =&#123;&#125;,&quot;,list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getBySeckillId() throws Exception &#123;</span><br><span class="line">        Seckill seckill = seckillService.getBySeckillId(1000L);</span><br><span class="line">        logger.info(&quot;list =&#123;&#125;,&quot;,seckill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void exportSeckillUrl() throws Exception &#123;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(1000L);</span><br><span class="line">        logger.info(&quot;exposer =&#123;&#125;,&quot;,exposer);</span><br><span class="line">        /**</span><br><span class="line">         *  exposer =Exposer&#123;exposed=true, md5=&apos;d592364bb958482949d97e04131f4b2e&apos;, seckillId=1000, now=null, start=null, end=null&#125;,</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void executeSeckill() throws Exception &#123;</span><br><span class="line">        long id =1000L;</span><br><span class="line">        long phone= 1245564659;</span><br><span class="line">        String md5=&quot;d592364bb958482949d97e04131f4b2e&quot;;</span><br><span class="line">         try &#123;</span><br><span class="line">             SeckillExecution seckillExecution = seckillService.executeSeckill(id, phone, md5);</span><br><span class="line">             logger.info(&quot;seckillExecution:&quot; + seckillExecution);</span><br><span class="line">         &#125;</span><br><span class="line">         catch(RepatKillException e)&#123;</span><br><span class="line">             logger.error(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">         catch (SeckillClosedException e)&#123;</span><br><span class="line">             logger.error(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">        /**</span><br><span class="line">         * 再一次执行秒杀会出现运行期异常.</span><br><span class="line">         * org.seckill.exception.RepatKillException: Seckill repeted!</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testSeckillLogic() throws Exception&#123;</span><br><span class="line">        long id =1000L;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(id);</span><br><span class="line">        logger.info(&quot;exposer =&#123;&#125;,&quot;,exposer);</span><br><span class="line">        if(exposer.isExposed())&#123;</span><br><span class="line">            //开始执行秒杀</span><br><span class="line">            long phone= 1245564359;</span><br><span class="line">            String md5 = exposer.getMd5();</span><br><span class="line">            try &#123;</span><br><span class="line">                SeckillExecution seckillExecution = seckillService.executeSeckill(id, phone, md5);</span><br><span class="line">                logger.info(&quot;seckillExecution:&quot; + seckillExecution);</span><br><span class="line">            &#125;</span><br><span class="line">            catch(RepatKillException e)&#123;</span><br><span class="line">                logger.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SeckillClosedException e)&#123;</span><br><span class="line">                logger.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            logger.warn(&quot;exposer=&#123;&#125;&quot;,exposer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//id=1001 的测试 seckillExecution:SeckillExecution&#123;seckillId=1001, state=1, stateInfo=&apos;秒杀成功!&apos;, successKilled=SuccessKilled&#123;seckillId=1001, userPhone=1245564359, state=0, createTime=Tue Feb 20 13:19:46 CST 2018&#125;&#125;</span><br><span class="line">//id=1000 的测试 21:22:24.838 [main] WARN  o.secKill.service.SeckillServiceTest - exposer=Exposer&#123;exposed=false, md5=&apos;null&apos;, seckillId=1000, now=Tue Feb 20 21:22:24 CST 2018, start=Tue Feb 20 12:41:15 CST 2018, end=Tue Feb 20 12:41:15 CST 2018&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思考DAO层做的事&quot;&gt;&lt;a href=&quot;#思考DAO层做的事&quot; class=&quot;headerlink&quot; title=&quot;思考DAO层做的事&quot;&gt;&lt;/a&gt;思考DAO层做的事&lt;/h2&gt;&lt;p&gt;创建数据库,编写接口,书写mapper.xml(SQL),&lt;/p&gt;
&lt;p&gt;配置myb
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="SSM" scheme="luoyupiaoshang.club/tags/SSM/"/>
    
      <category term="Service" scheme="luoyupiaoshang.club/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>秒杀高并发优化</title>
    <link href="luoyupiaoshang.club/2018/01/02/%E7%A7%92%E6%9D%80%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/"/>
    <id>luoyupiaoshang.club/2018/01/02/秒杀高并发优化/</id>
    <published>2018-01-02T11:59:06.000Z</published>
    <updated>2018-04-05T02:25:53.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高并发发生的位置"><a href="#高并发发生的位置" class="headerlink" title="高并发发生的位置"></a>高并发发生的位置</h2><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-85e9859248fa7aea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>红色: 可能出现高并发.</p><p>绿色: 忽略不计</p><h3 id="详情页的分析"><a href="#详情页的分析" class="headerlink" title="详情页的分析"></a>详情页的分析</h3><p>秒杀时间要到的时候,用户会自然而然的刷新秒杀页面.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-66a70a1083881608.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="CDN的理解"><a href="#CDN的理解" class="headerlink" title="CDN的理解"></a>CDN的理解</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>CDN(内部分发网络)加速用户获取数据的系统</span><br><span class="line"><span class="bullet">2. </span>部署在里用户最近的网络节点上</span><br><span class="line"><span class="bullet">3. </span>命中CDN不需要访问后端服务器</span><br><span class="line"><span class="bullet">4. </span>互联网公司有自己搭建或者租用</span><br></pre></td></tr></table></figure><h3 id="系统时间优不优化"><a href="#系统时间优不优化" class="headerlink" title="系统时间优不优化?"></a>系统时间优不优化?</h3><p>运行一次内存(Cacheline)大约10ns(可忽略不计)</p><p>我们单独获取系统时间,在Controller里面做了一个接口.</p><h3 id="秒杀地址接口分析"><a href="#秒杀地址接口分析" class="headerlink" title="秒杀地址接口分析"></a>秒杀地址接口分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 无法使用CDN缓存</span><br><span class="line">2. 适合服务器端缓存:Redis等</span><br><span class="line">3. 一致性维护成本低</span><br></pre></td></tr></table></figure><h3 id="秒杀地址接口优化"><a href="#秒杀地址接口优化" class="headerlink" title="秒杀地址接口优化"></a>秒杀地址接口优化</h3><p>存在的问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 无法使用CDN缓存(用的别人的)</span><br><span class="line">2. 后端缓存困难:库存问题</span><br><span class="line">3. 一行数据竞争:热点商品</span><br></pre></td></tr></table></figure></p><p>解决方式:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-64ea52ab89b2a6fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><h3 id="其他方案分析"><a href="#其他方案分析" class="headerlink" title="其他方案分析"></a>其他方案分析</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-6071abed5a124f26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="成本分析"><a href="#成本分析" class="headerlink" title="成本分析"></a>成本分析</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a47c7fe04bb002d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="mysqlUpdate测试"><a href="#mysqlUpdate测试" class="headerlink" title="mysqlUpdate测试"></a>mysqlUpdate测试</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-d2460fc0b5c35b4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>mysqlUpdate压力测试:同一个商品1S钟可以被卖4W次<br>但是我们并不使用mysql来解决高并发的问题,一般认为mysql比较低效.</p><h3 id="java控制事务行为的分析"><a href="#java控制事务行为的分析" class="headerlink" title="java控制事务行为的分析"></a>java控制事务行为的分析</h3><p>以一条更新语句为例:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-583d887d4ab61903.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>当所有人都去购买同一个商品的时候,都执行update操作,这样会造成用户阻塞,当排队排在最前的用户commit的时候,后面的用户才能执行update,会存在串行化的问题.</p><p>只有上一条更新操作commit的时候,下一条update SQL语句,获得行锁,才能执行更新操作.</p><p>行级锁是在Commit之后释放.</p><h3 id="高并发的难点所在"><a href="#高并发的难点所在" class="headerlink" title="高并发的难点所在"></a>高并发的难点所在</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f50b353a03de31d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>行级锁在Commit提交之后释放,要想办法减少行级锁持有的时间.</p><p>但是大部分的MySQL数据库都是云服务,部署在异地机房,就有有传播延迟,实际约20ms.</p><p>所以<strong>延迟问题</strong>也会造成行锁释放需要的时间更加长.</p><p>比如下图:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-aa7ef35e2860cb2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="判断Update更新库存成功"><a href="#判断Update更新库存成功" class="headerlink" title="判断Update更新库存成功"></a>判断Update更新库存成功</h3><p>有两个条件:<br>– update自身运行没出错<br>– 客户端确认Update影响记录数</p><p>– 优化方法:</p><pre><code>把客户端逻辑放到Mysql服务端.避免网络延迟和GC影响.</code></pre><p>将客户端逻辑放到Mysql服务端的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 定制Mysql方案:update/*+[auto_commit]*/,需要修改mysql的源码</span><br><span class="line">2. 使用存储过程:整个事务在Mysql端完成.</span><br><span class="line">````   </span><br><span class="line">### 总结</span><br><span class="line">* 前端控制暴露接口,按钮防止重复.</span><br><span class="line">* 动静态数据分离:CDN缓存,后端缓存.</span><br><span class="line">* 事务竞争优化:减少事务锁时间.</span><br><span class="line"></span><br><span class="line">## Redis的使用</span><br><span class="line">```androiddatabinding</span><br><span class="line">使用redis优化地址暴露接口</span><br><span class="line">make</span><br><span class="line">make install </span><br><span class="line">-- 需要GCC的环境</span><br><span class="line">redis-server</span><br><span class="line">集群环境下的查看监控日志:</span><br><span class="line">redis-sentinel sentinel.conf</span><br><span class="line"></span><br><span class="line">加入pom.xml依赖</span><br><span class="line">&lt;!--Redis客户端的支持--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Redis后端缓存优化"><a href="#Redis后端缓存优化" class="headerlink" title="Redis后端缓存优化"></a>Redis后端缓存优化</h2><p>我们知道在<strong>暴露接口</strong>的实现发过程中,我们是使用主键查询的方式来工作的,这样访问速度很快.<br>但是频繁的访问数据库,给我们的服务器造成了很大的压力.</p><p>我们希望Redis来做缓存,来降低访问数据库的压力.</p><h2 id="优化编码"><a href="#优化编码" class="headerlink" title="优化编码"></a>优化编码</h2><p>优化的是秒杀暴露接口,就是通过Id去查询商品的那个方法.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>传输的就是二进制的数据,所以需要将对象序列化.</p><p>一般在实体上implements serializable,这是jdk自带的序列话机制.</p><p><a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="noopener">JVM 性能比对.</a></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">采用自定义序列化<span class="comment">(protostuff)</span></span><br><span class="line"></span><br><span class="line">把我们的对象转换为二进制的数组<span class="comment">(字节数组)</span>存到Redis当中.</span><br></pre></td></tr></table></figure><h3 id="protostuff序列化的依赖"><a href="#protostuff序列化的依赖" class="headerlink" title="protostuff序列化的依赖"></a>protostuff序列化的依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--ProtoStuff的序列化依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="添加Redis服务"><a href="#添加Redis服务" class="headerlink" title="添加Redis服务"></a>添加Redis服务</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存优化</span></span><br><span class="line"><span class="comment"> * get from cache</span></span><br><span class="line"><span class="comment"> * if null</span></span><br><span class="line"><span class="comment"> * getdb</span></span><br><span class="line"><span class="comment"> * else</span></span><br><span class="line"><span class="comment"> * put cache</span></span><br><span class="line"><span class="comment"> * locgoin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class RedisDao &#123;</span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入地址&amp;&amp;端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param ip</span></span><br><span class="line"><span class="comment">     * @param port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> RedisDao(<span class="keyword">String</span> ip, <span class="built_in">int</span> port) &#123;</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(ip, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过类的字节码对象创建,</span></span><br><span class="line"><span class="comment">     * 通过类的反射可以拿到类有什么属性,哪些方法.</span></span><br><span class="line"><span class="comment">     * RunTimeSchema就是基于类的属性去做一个模式.</span></span><br><span class="line"><span class="comment">     * 创建对象的时候,会根据模式赋予相应的值.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出Seckill</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param seckillId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Seckill getSeckill(<span class="keyword">long</span> seckillId) &#123;</span><br><span class="line">        <span class="comment">//Redis缓存的逻辑:先拿到对象,判断对象是否存在,将其反序列化成对象.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jedis jedis = jedisPool.getResource();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//前缀+值的模式</span></span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">key</span> = <span class="string">"seckill:"</span> + seckillId;</span><br><span class="line">                <span class="comment">//但并没有实现内部序列化操作</span></span><br><span class="line">                <span class="comment">//get--&gt;byte[]--&gt;反序列化--&gt;Object[Seckill]</span></span><br><span class="line">                <span class="built_in">byte</span>[] bytes = jedis.<span class="built_in">get</span>(<span class="built_in">key</span>.getBytes());</span><br><span class="line">                <span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//就将这个字节数组利用protostuff序列化</span></span><br><span class="line">                    <span class="comment">//创建一个空对象</span></span><br><span class="line">                    Seckill seckill = schema.newMessage();</span><br><span class="line">                    <span class="comment">//按照schema把数据传输到空对象里面去</span></span><br><span class="line">                    ProtostuffIOUtil.mergeFrom(bytes,seckill,schema);</span><br><span class="line">                    <span class="comment">//seckill被反序列化,空间压缩到原生jdk处理的十分之一,压缩速度快,节省了CPU.</span></span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往里面防止Seckill对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param seckill</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> putSeckill(Seckill seckill) &#123;</span><br><span class="line">        <span class="comment">//set Object[Seckill] --&gt; 序列化--&gt;byte[] </span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">key</span>=<span class="string">"seckill:"</span>+seckill.getseckillId();</span><br><span class="line">                <span class="comment">//将其转为字节数组,里面内置了一个缓存器,如果当前对象特别大,会有一个缓冲的过程.</span></span><br><span class="line">                <span class="built_in">byte</span>[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));</span><br><span class="line">                <span class="comment">//经测试,这个字节数组的大小为51</span></span><br><span class="line">                <span class="comment">//超时缓存</span></span><br><span class="line">                <span class="built_in">int</span> timeout =<span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">                <span class="keyword">String</span> result = jedis.setex(<span class="built_in">key</span>.getBytes(), timeout, bytes);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span><br><span class="line">public class BaseTest &#123;</span><br><span class="line">    private long id = 1001;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisDao redisDao;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testRedisDao() &#123;</span><br><span class="line">        Seckill seckill = redisDao.getSeckill(id);</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            seckill = secKillDao.queryById(id);</span><br><span class="line">            if (seckill != null) &#123;</span><br><span class="line">                String result = redisDao.putSeckill(seckill);</span><br><span class="line">                System.out.println(&quot;存入是否成功:&quot; + result);</span><br><span class="line">                seckill = redisDao.getSeckill(id);</span><br><span class="line">                System.out.println(&quot;取出的SeckillShop是:&quot; + seckill);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发优化"><a href="#并发优化" class="headerlink" title="并发优化"></a>并发优化</h2><p>事务的发生:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-bddd21602d02c09e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>目的就是要缩短update 减库存的时候使用行级锁,到commit事务的时候释放行级锁的时间.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们把insert语句放在update语句的前面,因为他会做一个判断.</span><br><span class="line"></span><br><span class="line">insert ignore 插入成功,返回1,代表插入一行.插入失败,返回0.</span><br><span class="line"></span><br><span class="line">根据返回值来确定是否执行Update,update就是减少库存,返回1执行成功,返回0执行失败.</span><br><span class="line"></span><br><span class="line">主要目的就是降低mysql-rowLock的持有时间.</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a28f0f1e8d2c1894.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>找到SeckillService</p><p>改造SeckillServiceImpl中的代码:</p><p><code>将先执行update操作&amp;&amp;insert明细  改造成  insert操作在前然后update在后的样子</code></p><p>这样做的好处是缩短了获得行级锁的时间.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">update insert update insert </span><br><span class="line"></span><br><span class="line">2个事务</span><br><span class="line">前面先占用行级锁,然后再插入明细      后面等待行级锁,再执行插入操作,这样等待行级锁的时间会更长.</span><br><span class="line"></span><br><span class="line">insert update insert update </span><br><span class="line"></span><br><span class="line">前面插入完毕后,执行update才占用行级锁         后面先插入,然后等待行级锁.</span><br><span class="line"></span><br><span class="line">也就是两个事务同时insert的情况下,没有锁竞争,执行速度会快.</span><br></pre></td></tr></table></figure></p><p>改造代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//写明细</span><br><span class="line">           int insertState = successKilledDao.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">           //唯一的验证标准就是验证 秒杀商品的ID和用户手机号.</span><br><span class="line">           //之前秒杀成功,state=1.再次秒杀同一seckillId的商品,他就会秒杀不成功了,因为我们设置的是insert ignore,插入就会忽略,insertState返回的就是0.</span><br><span class="line">           if (insertState &lt;= 0) &#123;</span><br><span class="line">               //重复秒杀</span><br><span class="line">               throw new RepatKillException(&quot;Seckill repeted!&quot;);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               //减库存,热点商品竞争发生在这个地方</span><br><span class="line">               int updateCount = secKillDao.reduceNumber(seckillId, killTime);</span><br><span class="line">               //更新数&lt;0,说明减库存失败,没有更新到记录</span><br><span class="line">               if (updateCount &lt;= 0) &#123;</span><br><span class="line">                   //没有更新到记录,秒杀结束,rollback</span><br><span class="line">                   throw new SeckillClosedException(&quot;Seckill is closed!&quot;);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   //秒杀成功,commit</span><br><span class="line">                   SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                   return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><h2 id="事务SQL在Mysql客户端执行"><a href="#事务SQL在Mysql客户端执行" class="headerlink" title="事务SQL在Mysql客户端执行."></a>事务SQL在Mysql客户端执行.</h2><p>存储过程做优化.</p><p>目的:降低行级锁到commit的持续时间,同时让mysql获得更高的QPS.</p><p>编写mysql的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$ --console   默认的分隔符是; 现在将 ; 转换为 $$,这样看着舒服    </span><br><span class="line">--定义存储过程    </span><br><span class="line">--参数:in 输入参数; out 输入参数    </span><br><span class="line">--row_count():返回上一条修改类型sql的影响行数    </span><br><span class="line">--row_count :0;未修改数据; &gt;0;表示修改的行数;&lt;0:sql错误或者未执行sql    </span><br><span class="line">CREATE PROCEDURE `seckill`.`execute_seckill`    </span><br><span class="line">(in v_seckill_id bigint,in v_phone bigint,    </span><br><span class="line">in v_kill_time timestamp,out r_result int)    </span><br><span class="line">BEGIN    </span><br><span class="line">    DECLARE insert_count int default 0;    </span><br><span class="line">    START TRANSACTION;    </span><br><span class="line">    insert ignore into success_killed    </span><br><span class="line">    (seckill_id,user_phone,create_time)    </span><br><span class="line">    values (v_seckill_id,v_phone,v_kill_time);    </span><br><span class="line">    select row_count() into insert_count;    </span><br><span class="line">    IF (insert_count = 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -1;    </span><br><span class="line">    ELSEIF (insert_count &lt; 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -2;    </span><br><span class="line">    ELSE    </span><br><span class="line">    update seckill    </span><br><span class="line">    set number = number -1    </span><br><span class="line">    where seckill_id = v_seckill_id    </span><br><span class="line">    and start_time &lt; v_kill_time    </span><br><span class="line">    and end_time &gt; v_kill_time    </span><br><span class="line">    and number &gt; 0;    </span><br><span class="line">    select row_count() into insert_count;    </span><br><span class="line">    IF (insert_count = 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = 0;    </span><br><span class="line">    ELSEIF (insert_count &lt; 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -2;    </span><br><span class="line">    ELSE    </span><br><span class="line">    COMMIT;    </span><br><span class="line">    set r_result = 1;    </span><br><span class="line">    END IF;    </span><br><span class="line">    END IF;    </span><br><span class="line">END;  </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>执行存储的过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先把分隔符改回来</span><br><span class="line">DELIMITER ;</span><br><span class="line">1.定义一个常量</span><br><span class="line">-- 执行存储过程</span><br><span class="line">call execute_seckill(1003,13784832739,now(),@r_result);</span><br><span class="line">--  获取结果</span><br><span class="line">select @r_result;</span><br></pre></td></tr></table></figure><p>可以看到结果是result=1,执行秒杀成功.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-018aae8a40889a22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们可以查看库存和明细表.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f9df0bf1808d4ec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f4741e9bae1c6727.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="具体实现mysql的存储过程秒杀商品"><a href="#具体实现mysql的存储过程秒杀商品" class="headerlink" title="具体实现mysql的存储过程秒杀商品"></a>具体实现mysql的存储过程秒杀商品</h2><h3 id="编写service层接口"><a href="#编写service层接口" class="headerlink" title="编写service层接口"></a>编写service层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 主要是完成mysql的存储过程</span><br><span class="line">    * @param seckillId</span><br><span class="line">    * @param userPhone</span><br><span class="line">    * @param md5</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5);</span><br></pre></td></tr></table></figure><h3 id="编写Dao层接口"><a href="#编写Dao层接口" class="headerlink" title="编写Dao层接口"></a>编写Dao层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 使用存储过程执行秒杀</span><br><span class="line">    * @param paramMap</span><br><span class="line">    */</span><br><span class="line">   void killByProcedure(Map&lt;String,Object&gt; paramMap);</span><br></pre></td></tr></table></figure><h3 id="mapper中的写法"><a href="#mapper中的写法" class="headerlink" title="mapper中的写法"></a>mapper中的写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybati调用存储过程--&gt;</span><br><span class="line">   &lt;select id=&quot;killByProcedure&quot; statementType=&quot;CALLABLE&quot;&gt;</span><br><span class="line">       call execute_seckill(</span><br><span class="line">         #&#123;seckillId,jdbcType=BIGINT,mode=IN&#125;,</span><br><span class="line">         #&#123;phone,jdbcType=BIGINT,mode=IN&#125;,</span><br><span class="line">         #&#123;killTime,jdbcType=TIMESTAMP,mode=IN&#125;,</span><br><span class="line">         #&#123;result,jdbcType=INTEGER,mode=OUT&#125;</span><br><span class="line">       )</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="引入依赖Commons-collections"><a href="#引入依赖Commons-collections" class="headerlink" title="引入依赖Commons-collections"></a>引入依赖Commons-collections</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="编写Service层接口"><a href="#编写Service层接口" class="headerlink" title="编写Service层接口"></a>编写Service层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5) &#123;</span><br><span class="line">        //校验MD5</span><br><span class="line">        if(md5 == null || !md5.equals(getMd5(seckillId)) )&#123;</span><br><span class="line">            return new SeckillExecution(seckillId,SeckillStatEnum.DATA_REWRITE);</span><br><span class="line">        &#125;</span><br><span class="line">        Date killTime  = new Date();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;seckillId&quot;,seckillId);</span><br><span class="line">        map.put(&quot;phone&quot;,userPhone);</span><br><span class="line">        map.put(&quot;killTime&quot;,killTime);</span><br><span class="line">        map.put(&quot;result&quot;,null);</span><br><span class="line">        //执行存储过程,result被赋值</span><br><span class="line">        try &#123;</span><br><span class="line">            secKillDao.killByProcedure(map);</span><br><span class="line">            //获取Result</span><br><span class="line">            Integer result = MapUtils.getInteger(map, &quot;result&quot;, -2);</span><br><span class="line"></span><br><span class="line">            if(result == 1 )&#123;</span><br><span class="line">                SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.SUCCESS,successKilled);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //根据Result去拿我们的秒杀状态.</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.stateOf(result));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">            return new SeckillExecution(seckillId,SeckillStatEnum.INNER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试mysql存储过程</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void executeSeckillByProcedure()&#123;</span><br><span class="line">    long id =1003;</span><br><span class="line">    long phone= 1358963569;</span><br><span class="line">    Exposer exposer = seckillService.exportSeckillUrl(id);</span><br><span class="line">    if(exposer.isExposed())&#123;</span><br><span class="line">        //开始执行秒杀</span><br><span class="line">        String md5 = exposer.getMd5();</span><br><span class="line">            if(md5!= null)&#123;</span><br><span class="line">                SeckillExecution seckillExecution = seckillService.executeSeckillProcedure(id, phone, md5);</span><br><span class="line">                logger.info(seckillExecution.getStateInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="替换Controller"><a href="#替换Controller" class="headerlink" title="替换Controller"></a>替换Controller</h3><p>就把SeckillController中的秒杀方法改为executeSeckillByProcedure即可.</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>详情表列表</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b2f27e6e385231a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>重复秒杀</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-cd6d98f19a6d1e83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>秒杀成功</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-c2d3b10cc408d3a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>秒杀成功的json数据–execution展示.这是用存储过程来执行秒杀的.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-564db0197d8fe6f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;高并发发生的位置&quot;&gt;&lt;a href=&quot;#高并发发生的位置&quot; class=&quot;headerlink&quot; title=&quot;高并发发生的位置&quot;&gt;&lt;/a&gt;高并发发生的位置&lt;/h2&gt;&lt;p&gt;图示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jian
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="RowsLock" scheme="luoyupiaoshang.club/tags/RowsLock/"/>
    
      <category term="高并发" scheme="luoyupiaoshang.club/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>秒杀web层开发</title>
    <link href="luoyupiaoshang.club/2018/01/02/%E7%A7%92%E6%9D%80Web%E5%B1%82%E5%BC%80%E5%8F%91/"/>
    <id>luoyupiaoshang.club/2018/01/02/秒杀Web层开发/</id>
    <published>2018-01-02T11:59:06.000Z</published>
    <updated>2018-04-05T02:25:54.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol><li>前端交互设计</li><li>Restful</li><li>springmvc</li><li>bootstrap+jquery</li></ol><h2 id="前端交互设计"><a href="#前端交互设计" class="headerlink" title="前端交互设计"></a>前端交互设计</h2><ol><li>产品</li><li>前端</li><li>后端</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8aad1b29e7b4525e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>详情页流程逻辑</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e6263a73fb5ef628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Restful接口设计"><a href="#Restful接口设计" class="headerlink" title="Restful接口设计"></a>Restful接口设计</h2><h3 id="什么是Restful"><a href="#什么是Restful" class="headerlink" title="什么是Restful"></a>什么是Restful</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST是英文representational state transfer(表象性状态转变)或者表述性状态转移;</span><br><span class="line">Rest是web服务的一种架构风格;</span><br><span class="line">使用HTTP,URI,XML,JSON,HTML等广泛流行的标准和协议;轻量级,跨平台,跨语言的架构设计;</span><br><span class="line">它是一种设计风格,不是一种标准,是一种思想.</span><br><span class="line"></span><br><span class="line">Restful兴起于Rails,是一种优雅的URL表述方式,资源的状态和状态转移.</span><br></pre></td></tr></table></figure><h3 id="Rest架构的风格"><a href="#Rest架构的风格" class="headerlink" title="Rest架构的风格"></a>Rest架构的风格</h3><p>Rest架构的主要原则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">网络上的所有事物都被抽象为资源</span><br><span class="line"></span><br><span class="line">每个资源都有一个唯一的资源标识符</span><br><span class="line"></span><br><span class="line">同一个资源具有多种表现形式(xml,json等)</span><br><span class="line"></span><br><span class="line">对资源的各种操作不会改变资源标识符</span><br><span class="line"></span><br><span class="line">所有的操作都是无状态的</span><br><span class="line"></span><br><span class="line">符合REST原则的架构方式即可称为RESTful</span><br></pre></td></tr></table></figure></p><h3 id="Restful的示例"><a href="#Restful的示例" class="headerlink" title="Restful的示例"></a>Restful的示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET   /Seckill/list   风格友好</span><br><span class="line">POST /Seckill/execute/&#123;seckillId&#125; 风格不友好 </span><br><span class="line">POST /Seckill/&#123;seckillId&#125;/execute 风格友好</span><br><span class="line"></span><br><span class="line">GET /seckill/delete/&#123;id&#125; 风格不友好</span><br><span class="line">GET /seckill/&#123;id&#125;/delete 风格友好</span><br></pre></td></tr></table></figure><h3 id="Restful规范"><a href="#Restful规范" class="headerlink" title="Restful规范"></a>Restful规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET     --&gt;查询操作</span><br><span class="line">POST    --&gt;添加/修改操作</span><br><span class="line">PUT     --&gt;修改操作</span><br><span class="line">DELETE  --&gt;删除操作</span><br></pre></td></tr></table></figure><p>图示:</p><p><img src="http://img.blog.csdn.net/20170625151347639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnhpYW9jaGFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p>HTTP状态码:</p><p><img src="http://img.blog.csdn.net/20170625152145836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnhpYW9jaGFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><h3 id="springmvc中实现Restful服务"><a href="#springmvc中实现Restful服务" class="headerlink" title="springmvc中实现Restful服务"></a>springmvc中实现Restful服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC实现restful服务:</span><br><span class="line">SpringMVC原生态的支持了REST风格的架构设计</span><br><span class="line">所涉及到的注解:</span><br><span class="line">--@RequestMapping</span><br><span class="line">--@PathVariable</span><br><span class="line">--@ResponseBody</span><br></pre></td></tr></table></figure><h3 id="url的设计"><a href="#url的设计" class="headerlink" title="url的设计"></a>url的设计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. /模块/资源/&#123;标示&#125;/集合1/...</span><br><span class="line">良好的表示如下:</span><br><span class="line">    2. /user/&#123;uid&#125;/friends    --&gt;好友列表</span><br><span class="line">    3. /user/&#123;uid&#125;/followers  --&gt;关注者列表</span><br></pre></td></tr></table></figure><p><strong>秒杀API的URL设计</strong><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="string">/seckill/list</span>                   秒杀列表</span><br><span class="line">GET <span class="string">/seckill/</span>&#123;id&#125;<span class="string">/detail</span>            详情页面</span><br><span class="line">GET <span class="string">/seckill/time/now</span>               系统时间</span><br><span class="line">POST <span class="string">/seckill/</span>&#123;id&#125;<span class="string">/exposer</span>          暴露秒杀</span><br><span class="line">POST <span class="string">/seckill/</span>&#123;id&#125;/&#123;md5&#125;<span class="string">/execution</span>  执行秒杀</span><br></pre></td></tr></table></figure></p><h2 id="SpringMVC的运行流程"><a href="#SpringMVC的运行流程" class="headerlink" title="SpringMVC的运行流程"></a>SpringMVC的运行流程</h2><h3 id="我们始终围绕着Handler开发-如下"><a href="#我们始终围绕着Handler开发-如下" class="headerlink" title="我们始终围绕着Handler开发,如下:"></a>我们始终围绕着Handler开发,如下:</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a7b951d96de382f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="SpringMVC的运行流程-1"><a href="#SpringMVC的运行流程-1" class="headerlink" title="SpringMVC的运行流程"></a>SpringMVC的运行流程</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.用户发送请求到<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">2<span class="selector-class">.DispatchServlet</span>根据请求路径查询具体的<span class="selector-tag">Handler</span></span><br><span class="line"></span><br><span class="line">3<span class="selector-class">.HandlerMapping</span>返回一个<span class="selector-tag">HandlerExcutionChain</span>给<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">　<span class="selector-tag">HandlerExcutionChain</span>：<span class="selector-tag">Handler</span>和<span class="selector-tag">Interceptor</span>集合</span><br><span class="line"></span><br><span class="line">4<span class="selector-class">.DispatchServlet</span>调用<span class="selector-tag">HandlerAdapter</span>适配器</span><br><span class="line"></span><br><span class="line">5<span class="selector-class">.HandlerAdapter</span>调用具体的<span class="selector-tag">Handler</span>处理业务</span><br><span class="line"></span><br><span class="line">6<span class="selector-class">.Handler</span>处理结束返回一个具体的<span class="selector-tag">ModelAndView</span>给适配器</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">ModelAndView</span><span class="selector-pseudo">:model--</span>&gt;数据模型，<span class="selector-tag">view--</span>&gt;视图名称</span><br><span class="line"></span><br><span class="line">7.适配器将<span class="selector-tag">ModelAndView</span>给<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">8<span class="selector-class">.DispatchServlet</span>把视图名称给<span class="selector-tag">ViewResolver</span>视图解析器</span><br><span class="line"></span><br><span class="line">9<span class="selector-class">.ViewResolver</span>返回一个具体的视图给<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">10.渲染视图</span><br><span class="line"></span><br><span class="line">11.展示给用户</span><br></pre></td></tr></table></figure><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-df43c8d02cff87c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="Http处理地址映射原理"><a href="#Http处理地址映射原理" class="headerlink" title="Http处理地址映射原理"></a>Http处理地址映射原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-df748190bd76bbf0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="注解映射示例"><a href="#注解映射示例" class="headerlink" title="注解映射示例"></a>注解映射示例</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>注解:</span><br><span class="line"><span class="number">1.</span> 支持标准的URL</span><br><span class="line"><span class="number">2.</span> Ant风格URL(以?和** 等字符)</span><br><span class="line">3. 带(XXX)占位符的URL</span><br><span class="line"></span><br><span class="line">for example:</span><br><span class="line"><span class="number">1.</span> <span class="regexp">/user/</span>*/creation</span><br><span class="line">匹配 <span class="regexp">/user/</span>aaa<span class="regexp">/creation,/</span>user<span class="regexp">/bbb/</span>creation等URL</span><br><span class="line"><span class="number">2.</span> <span class="regexp">/user/</span>**/creation </span><br><span class="line">匹配 <span class="regexp">/usr/</span>creation,  <span class="regexp">/user/</span>aaa<span class="regexp">/bbb/</span>creation等URL</span><br><span class="line"><span class="number">3.</span> <span class="regexp">/user/</span>&#123;userId&#125;</span><br><span class="line">匹配<span class="regexp">/user/</span><span class="number">123</span>,<span class="regexp">/user/</span>abc等URL</span><br><span class="line"><span class="number">4.</span> <span class="regexp">/company/</span>&#123;companyId&#125;<span class="regexp">/user/</span>&#123;userId&#125;/detail</span><br><span class="line">匹配<span class="regexp">/company/</span><span class="number">123</span><span class="regexp">/user/</span><span class="number">456</span>/detail等URL</span><br></pre></td></tr></table></figure><h2 id="请求方法细节的处理"><a href="#请求方法细节的处理" class="headerlink" title="请求方法细节的处理"></a>请求方法细节的处理</h2><p>包括:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>请求参数的绑定</span><br><span class="line"><span class="bullet">2. </span>请求方式限制</span><br><span class="line"><span class="bullet">3. </span>请求转发和重定向</span><br><span class="line"><span class="bullet">4. </span>数据模型赋值</span><br><span class="line"><span class="bullet">5. </span>返回JSON数据</span><br><span class="line"><span class="bullet">6. </span>cookie访问</span><br></pre></td></tr></table></figure></p><h3 id="参数绑定的示例"><a href="#参数绑定的示例" class="headerlink" title="参数绑定的示例"></a>参数绑定的示例</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;seckillId&#125;/detail"</span>,mnethod=RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String detail(<span class="meta">@PathVariable(<span class="meta-string">"seckillId"</span>)</span><span class="built_in">Long</span> seckillId,Model model)&#123;</span><br><span class="line">    <span class="keyword">if</span>(seckillId == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/seckill/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Seckill seckill=SeckillService.getById|(seckillId);</span><br><span class="line">    <span class="keyword">if</span>(seckill == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/seckill/list"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(<span class="string">"seckill"</span>,seckill);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"detail"</span>;<span class="comment">//view</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回json数据的示例"><a href="#返回json数据的示例" class="headerlink" title="返回json数据的示例"></a>返回json数据的示例</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;seckillId&#125;/&#123;md5&#125;/execution"</span>,method=RequestMethod.POST,produces=&#123;<span class="string">"application/json;charset=UTF-8"</span>&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> SeckillResult&lt;Exposer&gt; exposerSeckillURL(<span class="meta">@PathVariable</span>(<span class="string">"id"</span>)<span class="keyword">long</span> id)&#123;</span><br><span class="line"> SeckillResult&lt;Exposer&gt; result;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">    Exposer exposer =...</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    logger.<span class="keyword">error</span>(e.getMessage(),e);</span><br><span class="line">   result=<span class="keyword">new</span> SeckillResult&lt;Exposer&gt;(<span class="keyword">false</span>,e.getMessage());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie访问的示例"><a href="#Cookie访问的示例" class="headerlink" title="Cookie访问的示例"></a>Cookie访问的示例</h3><p>@CookieValue(value=”killPhone”,required=false)long phone)</p><p>如果请求的RequestMapping里面没有包含killPhone的Cookie,SpringMVC框架就会报错,所以要设置成false.具体的判断要在程序里面判断.</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;seckillId&#125;/&#123;md5&#125;/execution"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> SeckillResult&lt;SeckillExecution&gt; execute(<span class="meta">@PathVariable</span>(<span class="string">"seckillId"</span>)<span class="keyword">long</span> seckillId,<span class="meta">@PathVariable</span>(<span class="string">"md5"</span>)String md5,<span class="meta">@CookieValue</span>(value=<span class="string">"killPhone"</span>,required=<span class="keyword">false</span>)<span class="keyword">long</span> phone)&#123;</span><br><span class="line">    <span class="keyword">if</span>(phone ==<span class="keyword">null</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">false</span>,<span class="string">"电话未注册"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SeckillExecution <span class="keyword">execution</span>=seckillService.executeSeckillByProcedure(seckillId,md5,phone);</span><br><span class="line">    SeckillResult&lt;SeckillExecution&gt; result=<span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,<span class="keyword">execution</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-xml的配置"><a href="#web-xml的配置" class="headerlink" title="web.xml的配置"></a>web.xml的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置DispactherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>seckill-dispacther<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置springmvc需要加载的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>seckill-dispacther<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认匹配所有的请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-web-xml的配置"><a href="#spring-web-xml的配置" class="headerlink" title="spring-web.xml的配置"></a>spring-web.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/mvc</span><br><span class="line">http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--配置SpringMVC--&gt;</span><br><span class="line">    &lt;!--1.开启SpringMVC注解模式--&gt;</span><br><span class="line">    &lt;!--简化配置:</span><br><span class="line">        1. 自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerDdapter</span><br><span class="line">        2. 提供一系列:数据绑定,数字和日期.和Format @NumberFormat,@DataTimeFormat,xml,json默认读写支持</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line">    &lt;!--2.静态资源默认Servlet配置</span><br><span class="line">        1. 加入对静态资源的处理:js,gif,png</span><br><span class="line">        2. 允许使用&quot;/&quot;做整体映射</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">    &lt;!--3.配置jsp,显示ViewResolver--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;./jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--4.扫描web相关的bean--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;org.seckill.web&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="书写秒杀的Controller"><a href="#书写秒杀的Controller" class="headerlink" title="书写秒杀的Controller"></a>书写秒杀的Controller</h2><p>SeckillController<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url的格式:     url:/模块/资源/&#123;id&#125;/细分   /seckill/&#123;id&#125;/list</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/seckill&quot;)</span><br><span class="line">public class SeckillController &#123;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SeckillService seckillService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span><br><span class="line">    public String getList(Model model) &#123;</span><br><span class="line">        List&lt;Seckill&gt; list = seckillService.getAllSeckill();</span><br><span class="line">        model.addAttribute(&quot;list&quot;, list);</span><br><span class="line">        //list.jsp + model = ModelAndView</span><br><span class="line">        return &quot;list&quot;;//WEB-INF/jsp/&quot;list&quot;.jsp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&#123;seckillId&#125;/detail&quot;, method = RequestMethod.GET)</span><br><span class="line">    public String getDetail(@PathVariable(&quot;seckillId&quot;) Long seckillId, Model model) &#123;</span><br><span class="line">        if (seckillId == null) &#123;</span><br><span class="line">            return &quot;redirect:/seckill/list&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        Seckill seckill = seckillService.getBySeckillId(seckillId);</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            return &quot;forward:/seckill/list&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(&quot;seckill&quot;, seckill);</span><br><span class="line">        return &quot;detail&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //ajax  json</span><br><span class="line">    @RequestMapping(value = &quot;/&#123;seckillId&#125;/exposer&quot;, method = RequestMethod.POST, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public SeckillResult&lt;Exposer&gt; exposer(@PathVariable(&quot;seckillId&quot;) Long seckillId) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Exposer exposer = seckillService.exportSeckillUrl(seckillId);</span><br><span class="line">            return new SeckillResult&lt;Exposer&gt;(true, exposer);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            return new SeckillResult&lt;Exposer&gt;(false, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&#123;seckillId&#125;/&#123;md5&#125;/execution&quot;, method = RequestMethod.POST, produces = &#123;</span><br><span class="line">            &quot;application/json; charset=utf-8&quot;&#125;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public SeckillResult&lt;SeckillExecution&gt; execute(@PathVariable(&quot;seckillId&quot;) Long seckillId,</span><br><span class="line">                                                   @PathVariable(&quot;md5&quot;) String md5, @CookieValue(value = &quot;killPhone&quot;, required = false) Long phone) &#123;</span><br><span class="line">        // springmvc valid</span><br><span class="line">        if (phone == null) &#123;</span><br><span class="line">            return new SeckillResult&lt;&gt;(false, &quot;未注册&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 存储过程调用</span><br><span class="line">            SeckillExecution execution = seckillService.executeSeckill(seckillId, phone, md5);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125; catch (RepatKillException e) &#123;</span><br><span class="line">            SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.REPEAT_KILL);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125; catch (SeckillClosedException e) &#123;</span><br><span class="line">            SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.END);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/time/now&quot;, method = RequestMethod.GET)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public SeckillResult&lt;Long&gt; time() &#123;</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        return new SeckillResult&lt;Long&gt;(true, now.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些插件的CDN"><a href="#一些插件的CDN" class="headerlink" title="一些插件的CDN"></a>一些插件的CDN</h2><p><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">CDN查询地址</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jquery-cookie</span><br><span class="line"></span><br><span class="line">https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.js</span><br><span class="line"></span><br><span class="line">jquery-countdown</span><br><span class="line"></span><br><span class="line">https://cdn.bootcss.com/jquery-countdown/2.0.2/jquery.countdown-ar.js</span><br></pre></td></tr></table></figure></p><p><strong>切记</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">必须使用这种方法书写</span><br><span class="line">&lt;script src=&quot;xxx&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">如果采用下面的写法,浏览器不会加载资源</span><br><span class="line">&lt;script src=&quot;xxx&quot; type=&quot;text/javascript&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> Bootstrap和JS在github地址有.我才开始用,需要了解一部分.感觉逻辑什么的还挺好用的.</p><p> DTO传输数据</p><p> 注解映射驱动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;前端交互设计&lt;/li&gt;
&lt;li&gt;Restful&lt;/li&gt;
&lt;li&gt;springmvc&lt;/li&gt;
&lt;li&gt;boot
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="SSM" scheme="luoyupiaoshang.club/tags/SSM/"/>
    
      <category term="Web" scheme="luoyupiaoshang.club/tags/Web/"/>
    
      <category term="Bootstrap" scheme="luoyupiaoshang.club/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>秒杀概述</title>
    <link href="luoyupiaoshang.club/2018/01/01/%E7%A7%92%E6%9D%80%E6%A6%82%E8%BF%B0/"/>
    <id>luoyupiaoshang.club/2018/01/01/秒杀概述/</id>
    <published>2018-01-01T11:59:06.000Z</published>
    <updated>2018-04-05T02:25:54.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="涉及的内容"><a href="#涉及的内容" class="headerlink" title="涉及的内容:"></a>涉及的内容:</h2><p>1.Mysql</p><p>表设计<br>SQL技巧<br>事务和行级锁</p><p>2.Mybatis</p><p>dao层的设计和开发</p><p>mybatis的合理使用</p><p>mybatis与Spring整合</p><p>3.Spring</p><p>Spring IOC整合Service</p><p>声明式事务运用</p><p>4.SpringMVC</p><p>Restful接口设计和使用</p><p>框架运作流程</p><p>Controller开发技巧</p><p>5.前端</p><p>交互设计</p><p>Bootstrap</p><p>JQuery,Ajax</p><p>6.高并发</p><p>优化,及优化思路.</p><h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><p>mvn命令创建项目<br><a href="http://blog.csdn.net/smilecall/article/details/54345702" target="_blank" rel="noopener">创建项目更加详细的链接</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:<span class="keyword">generate</span>  -DarchetypeCatalog=internal -DgroupId=org.seckill -DartifactId=secKill -DarchetypeArtifactId=maven-archetype-webapp</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">值得注意的是,webapp下面的web.xml过时了不能使用,</span><br><span class="line"></span><br><span class="line">我们可以拿tomcat8里面的webapp/examples下面的web.xml的表头来操作:</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line">&lt;?xml <span class="keyword">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-<span class="keyword">app</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation="http:<span class="comment">//xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="line">                      http:<span class="comment">//xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line">         <span class="keyword">version</span>=<span class="string">"3.1"</span></span><br><span class="line">         metadata-complete=<span class="string">"true"</span>&gt;</span><br><span class="line">&lt;/web-<span class="keyword">app</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="pom-xml的配置"><a href="#pom-xml的配置" class="headerlink" title="pom.xml的配置"></a>pom.xml的配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.junit3使用的是编程式的测试,junit4使用的是声明式(注解)的测试</span><br><span class="line">2.java中常用的日志:slf4j,log4j,logback,common-logging</span><br><span class="line">       sfl4j:是规范/接口</span><br><span class="line">       </span><br><span class="line">       日志实现:log4j,logback,common-logging</span><br><span class="line">       使用:slf4j + logback</span><br><span class="line">3.数据库的相关组件</span><br><span class="line">4.mybatis的相关组件</span><br><span class="line">5.spring相关组件</span><br></pre></td></tr></table></figure><p>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;org.seckill&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;secKill&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;secKill Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--0.使用junit4,采用声明注解方式测试--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--1.日志选用slf4j和logback--&gt;</span><br><span class="line">    &lt;!--日志使用slf4j--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--实现了logback核心的功能--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--实现slf4j接口并整合--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--2.数据库相关的依赖--&gt;</span><br><span class="line">    &lt;!--数据库驱动--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">      &lt;version&gt;5.1.35&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--数据库连接池c3p0--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--3.dao框架:mybatis依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mybatis自身实现的spring整合依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--4.Service Web相关依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.Spring依赖--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.1.spring核心依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.2 spring的IOC--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.3 spring的包扫描.IOC拓展用到的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.4 spring Dao层的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.5 spring Transaction的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.6 spring Web的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.6 spring Test的相关依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;finalName&gt;secKill&lt;/finalName&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h2 id="秒杀业务的分析"><a href="#秒杀业务的分析" class="headerlink" title="秒杀业务的分析"></a>秒杀业务的分析</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5d7a0f57c7897ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可知,秒杀业务的核心是对库存的处理.</p><p>用户针对库存业务分析:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5befd8c4cfdc0171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>什么是购买行为?</p><p>记录秒杀成功信息</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e4c7fac05c5fb225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果没有事务存在,可能会出现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 减库存没有购买明细,</span><br><span class="line"></span><br><span class="line">2. 记录了明细没有减库存,</span><br><span class="line"></span><br><span class="line">3. 超卖/少卖</span><br></pre></td></tr></table></figure></p><p>故障责任…</p><p>数据落地:</p><p>mysql  VS nosql</p><p>nosql对事务的支持不尽如意,但是对高性能,高可用支持非常棒.</p><p>事务机制仍然是目前最可靠的落地方案.mysql内置的事务机制很可靠.</p><h2 id="5-秒杀业务的难点"><a href="#5-秒杀业务的难点" class="headerlink" title="5.秒杀业务的难点"></a>5.秒杀业务的难点</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-3419dc842b5f4b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>难点在与竞争.</p><p><strong>反映在mysql中是事务和行级锁.</strong></p><p>我们做的事务流程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Start transaction </span><br><span class="line"></span><br><span class="line">Update 库存数量(竞争发生在这一块)</span><br><span class="line"></span><br><span class="line">Insert购买明细</span><br><span class="line"></span><br><span class="line">Commit</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/7505161-42ef80fb34c43437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可见当所有人秒杀一件商品时,执行同一个SQL语句,由于采用的是行级锁,所以每次只能执行一条SQL语句.</p><p>现在看来,秒杀的难点就是如何<strong>高效的</strong>处理竞争了.</p><h2 id="秒杀功能"><a href="#秒杀功能" class="headerlink" title="秒杀功能"></a>秒杀功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 秒杀接口暴露</span><br><span class="line">2. 执行秒杀</span><br><span class="line">3. 相关查询</span><br></pre></td></tr></table></figure><p>代码开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. DAO设计编码</span><br><span class="line">   包括数据库的表设计,DAO的接口,mybatis如何去实现DAO.</span><br><span class="line">2.Service设计编码</span><br><span class="line">    Spring管理Service,声明式事务去标注方法是事务操作,简化事务控制</span><br><span class="line">3.Web设计编码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;涉及的内容&quot;&gt;&lt;a href=&quot;#涉及的内容&quot; class=&quot;headerlink&quot; title=&quot;涉及的内容:&quot;&gt;&lt;/a&gt;涉及的内容:&lt;/h2&gt;&lt;p&gt;1.Mysql&lt;/p&gt;
&lt;p&gt;表设计&lt;br&gt;SQL技巧&lt;br&gt;事务和行级锁&lt;/p&gt;
&lt;p&gt;2.Mybatis&lt;/
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="SSM" scheme="luoyupiaoshang.club/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>数据库的基本操作</title>
    <link href="luoyupiaoshang.club/2018/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>luoyupiaoshang.club/2018/01/01/数据库的基本操作/</id>
    <published>2018-01-01T11:59:06.000Z</published>
    <updated>2018-04-03T14:55:23.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RDBMS术语"><a href="#RDBMS术语" class="headerlink" title="RDBMS术语"></a>RDBMS术语</h2><ul><li>数据库: 数据库是一些关联表的集合。</li><li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格.</li><li>列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li><li>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性.</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引.</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><h2 id="mysql的数据类型"><a href="#mysql的数据类型" class="headerlink" title="mysql的数据类型"></a>mysql的数据类型</h2><p>目前我使用过的数据类型有 <code>int varchar timestamp bigint smallint dater time yeartinyint double</code></p><p>下面是标准数据库的类型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围(有符号)</th><th style="text-align:center">范围(无符号)</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1字节</td><td style="text-align:center">(-128，127)</td><td style="text-align:center">(0，255)</td><td style="text-align:center">小整数值</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2 字节</td><td style="text-align:center">(-32 768，32 767)</td><td style="text-align:center">(0，65 535)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3 字节</td><td style="text-align:center">(-8 388 608，8 388 607)</td><td style="text-align:center">(0，16 777 215)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">INT或INTEGER</td><td style="text-align:center">4 字节</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:center">(0，4 294 967 295)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">8 字节</td><td style="text-align:center">(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)</td><td style="text-align:center">(0，18 446 744 073 709 551 615)</td><td style="text-align:center">极大整数值</td></tr><tr><td style="text-align:center">FLOAT</td><td style="text-align:center">4 字节</td><td style="text-align:center">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td style="text-align:center">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td style="text-align:center">单精度浮点数值</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">8 字节</td><td style="text-align:center">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">双精度浮点数值</td></tr><tr><td style="text-align:center">DECIMAL</td><td style="text-align:center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">小数值</td></tr></tbody></table><h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围</th><th style="text-align:center">格式</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">3</td><td style="text-align:center">1000-01-01/9999-12-31</td><td style="text-align:center">YYYY-MM-DD</td><td style="text-align:center">日期值</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3</td><td style="text-align:center">‘-838:59:59’/‘838:59:59’</td><td style="text-align:center">HH:MM:SS</td><td style="text-align:center">时间值或持续时间</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1</td><td style="text-align:center">1901/2155</td><td style="text-align:center">YYYY</td><td style="text-align:center">年份值</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8</td><td style="text-align:center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:center">YYYY-MM-DD HH:MM:SS</td><td style="text-align:center">混合日期和时间值</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4</td><td style="text-align:center">1970-01-01 00:00:00/2038,结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:center">YYYYMMDD HHMMSS</td><td style="text-align:center">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">CHAR</td><td style="text-align:center">0-255字节</td><td>定长字符串</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">0-65535 字节</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">0-255字节</td><td style="text-align:center">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">0-255字节</td><td style="text-align:center">短文本字符串</td></tr><tr><td style="text-align:center">BLOB    0-65</td><td style="text-align:center">535字节</td><td style="text-align:center">二进制形式的长文本数据</td></tr><tr><td style="text-align:center">TEXT    0-65</td><td style="text-align:center">535字节</td><td style="text-align:center">长文本数据</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">0-16777215字节</td><td style="text-align:center">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">0-16777215字节</td><td style="text-align:center">中等长度文本数据</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">0-4294967295字节</td><td style="text-align:center">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">0-4294967295字节</td><td style="text-align:center">极大文本数据</td></tr></tbody></table><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CHAR</span>和VARCHAR类型类似，但它们保存和检索的方式不同。</span><br><span class="line"></span><br><span class="line">它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</span><br><span class="line"></span><br><span class="line"><span class="keyword">BINARY</span>和VARBINARY类类似于<span class="built_in">CHAR</span>和VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。</span><br><span class="line">也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</span><br><span class="line"></span><br><span class="line">BLOB是一个二进制大对象，可以容纳可变数量的数据。</span><br><span class="line">有<span class="number">4</span>种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。</span><br><span class="line"></span><br><span class="line">有<span class="number">4</span>种<span class="keyword">TEXT</span>类型：TINYTEXT、<span class="keyword">TEXT</span>、MEDIUMTEXT和LONGTEXT。这些对应<span class="number">4</span>种BLOB类型，有相同的最大长度和存储需求。</span><br></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><code>create database student;</code></p><h3 id="使用此数据库"><a href="#使用此数据库" class="headerlink" title="使用此数据库"></a>使用此数据库</h3><p><code>use student;</code></p><h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_inf(</span><br><span class="line">  <span class="string">`student_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'学生ID'</span>,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"学生姓名"</span>,</span><br><span class="line">  <span class="string">`student_age`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"学生年龄"</span>,</span><br><span class="line">  <span class="string">`student_birthday`</span> <span class="built_in">DATE</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"出生日期"</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">"创建时间"</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(student_id),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time)</span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> auto_increment = <span class="number">1000</span> <span class="keyword">DEFAULT</span> <span class="keyword">charset</span> = utf8 <span class="keyword">comment</span> =<span class="string">'学生信息表'</span>;</span><br></pre></td></tr></table></figure><p>我们可以查看表的结构:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0f784ae3394e7f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><p><code>drop table table_name;</code></p><h2 id="查看表的字段"><a href="#查看表的字段" class="headerlink" title="查看表的字段"></a>查看表的字段</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-47413178e8440d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p><code>show index from stundet_inf;</code><br><code>show keys from student_inf;</code></p><p>这两种方式都可以,查出来是2条索引.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-4b866b777cdfa319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ad90fa5aa685ea53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p>创建索引时,可以规定索引能否包含重复值,如果不包含,则索引应该创建为<code>Primary key</code>或者<code>unique</code>类型的索引.</p><p>对于单列惟一性索引，这保证单列不包含重复的值。</p><p>对于多列惟一性索引，保证多个值的组合不重复。</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>实际上就是,在表中哪列上添加索引</p><p><code>alter table student_inf add index idx_student_age(student_age);</code></p><p>此时我们可以查看一下索引有没有增加:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-49a886475fa1296d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>我们其实并不需要<code>idx_stundet_age</code>这个索引.索引多了会拖慢查询速度.影响CPU的处理性能.</p><p>所以删除:<code>drop index idx_student_age on student_inf</code></p><p>此时再查询,就会发现还剩2个索引.</p><p>或者<code>alter table student_inf drop index idx_student_age</code>.这样也可以.</p><p>删除主键的操作不长使用,<code>alter table student_inf drop primary key</code></p><p>因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。</p><p>如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。</p><p>如果从表中删除了某列，则索引会受到影响。</p><p>对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。</p><p>如果删除组成索引的所有列，则整个索引将被删除。</p><h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-80bf0859040c39a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们根据表的结构来进行insert 操作.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_inf(student_id,student_name,student_age,student_birthday,create_time) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'小明'</span>,<span class="number">12</span>,<span class="string">'1995-05-02'</span>,<span class="string">'2018-03-03 10:56:00'</span>);</span><br></pre></td></tr></table></figure><h2 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h2><p>我们不小心犯错误了,把月份写成25月了.</p><p>所以采用下面的语句进行更新.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student_inf <span class="keyword">set</span> student_birthday = <span class="string">'1995-02-02'</span> <span class="keyword">where</span> student_id =<span class="number">1000</span> ;</span><br></pre></td></tr></table></figure><p>此时再看一下查询语句:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0a01927525057066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>值得注意的是我们在生产环境中,不要使用<code>select *</code>来操作,这是查询表中所有的数据,会造成慢查询的问题.</p><h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h2><p><code>delete from student_inf where student_id = 1000;</code></p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-cc5601f170abd94a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-98ca9aaae6d26869.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>##查看查询计划</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0efdf50cad3b718e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>我们可以看到查询用到了<code>idx_create_time</code>这个索引.</p><h2 id="Union操作符"><a href="#Union操作符" class="headerlink" title="Union操作符"></a>Union操作符</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。</p><p>多个 SELECT 语句会删除重复的数据。</p><p>我们先来创建两个表</p><h3 id="website表"><a href="#website表" class="headerlink" title="website表"></a>website表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> website(</span><br><span class="line">  <span class="string">`website_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'站点ID'</span>,</span><br><span class="line">  <span class="string">`website_name`</span> <span class="built_in">varchar</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`website_url`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点地址'</span>,</span><br><span class="line">  <span class="string">`website_alexa`</span> <span class="built_in">smallint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'点击度排名'</span>,</span><br><span class="line">  <span class="string">`website_country`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点服务维护所在国家'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(<span class="string">`website_id`</span>),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time) <span class="keyword">comment</span> <span class="string">'创建间索引'</span></span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> =utf8;</span><br></pre></td></tr></table></figure><h3 id="apps表"><a href="#apps表" class="headerlink" title="apps表"></a>apps表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> apps(</span><br><span class="line">  <span class="string">`apps_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'站点ID'</span>,</span><br><span class="line">  <span class="string">`apps_name`</span> <span class="built_in">varchar</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`apps_url`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点地址'</span>,</span><br><span class="line">  <span class="string">`apps_country`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点服务维护所在国家'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(<span class="string">`apps_id`</span>),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time) <span class="keyword">comment</span> <span class="string">'创建间索引'</span></span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> =utf8;</span><br></pre></td></tr></table></figure><p>插入数据</p><p>1.插入website的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> website(website_id,website_name,website_url,website_alexa,website_country,create_time) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Google'</span>,<span class="string">'https://www.google.cm/'</span>,<span class="number">1</span>,<span class="string">'USA'</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> website(website_id,website_name,website_url,website_alexa,website_country,create_time) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'淘宝'</span>,<span class="string">'https://www.taobao.cm/'</span>,<span class="number">13</span>,<span class="string">'CN'</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">再编几个吧</span><br></pre></td></tr></table></figure></p><p>2.插入apps表的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> apps(apps_id,apps_name,apps_url,apps_country,create_time) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'QQ APP'</span>,<span class="string">'http://im.qq.com'</span>,<span class="string">'CN'</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>3.使用<code>union</code>或者’union all’关键字来进行两个表之间的查询数据.</p><p>4.开始查询</p><p>union关键字的使用:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a109f8e7af2e704c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>union all 关键字的使用:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-d3a7611b04f1e5fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="排序的使用-order-by"><a href="#排序的使用-order-by" class="headerlink" title="排序的使用(order by)"></a>排序的使用(order by)</h2><p>下面的例子都是按照<code>create_time</code>来进行排序查询的.</p><h3 id="倒序查询"><a href="#倒序查询" class="headerlink" title="倒序查询"></a>倒序查询</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a776b9e4163ce97e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="正序查询"><a href="#正序查询" class="headerlink" title="正序查询"></a>正序查询</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1238b4286159939a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Mysql的分组-group-by-查询"><a href="#Mysql的分组-group-by-查询" class="headerlink" title="Mysql的分组(group by)查询"></a>Mysql的分组(group by)查询</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>这个时候,我们来试试脚本运行的方法吧,换个样子肯定很舒服.</p><p>脚本如下,我们命名为<code>schema.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 选择你的目标数据库</span></span><br><span class="line"><span class="keyword">use</span> mysqldemo;</span><br><span class="line"><span class="comment">-- 开始执行下面的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee_tbl`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee_tbl`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`singin`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee_tbl`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-22 15:25:33'</span>, <span class="string">'1'</span>), (<span class="string">'2'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-20 15:25:47'</span>, <span class="string">'3'</span>), (<span class="string">'3'</span>, <span class="string">'小丽'</span>, <span class="string">'2016-04-19 15:26:02'</span>, <span class="string">'2'</span>), (<span class="string">'4'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-07 15:26:14'</span>, <span class="string">'4'</span>), (<span class="string">'5'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-11 15:26:40'</span>, <span class="string">'4'</span>), (<span class="string">'6'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-04 15:26:54'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>我们使用一下图形化工具<code>MysqlWorkBench</code>吧.</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><p>1.我们首先要创建一个新的schema.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-4acf00b9751fdaba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7e2e10be9f2b206d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.导入数据</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-cc4683dd195df1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.点击按钮,我们创建成功.</p><p>在脚本上好歹也要写上自己的目标数据库吧.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-21549d89eede176c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://jingyan.baidu.com/album/546ae1853d0fab1148f28c7f.html?picindex=2" target="_blank" rel="noopener">如何使用mysqlworkbench导入mysql脚本</a></p><h3 id="分组测试"><a href="#分组测试" class="headerlink" title="分组测试"></a>分组测试</h3><p>1.查询数据</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8272ebb09877bccf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.执行分组</p><p>我们将以上的数据表按照名字进行分组,在统计每个人登录的次数.</p><p><code>select name, SUM(singin) as singin_count from employee_tbl group by name with rollup</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-7d431d89c3e3b3bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这个<code>with rollup</code>的作用就是可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）.就相当于加上了<code>最终的总数计算</code>,</p><p>我们再试试count()函数,并使用 GROUP BY 语句 将数据表按名字进行分组，并统计每个人有多少条记录：</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-70ebd1b24a2e160c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>null表示所有人登录的总次数,用<code>null</code>来表示太难看看,所以我们用coalesce语法来设计一下:</p><p><code>select coalesce(a,b,c)</code></p><p>参数说明：</p><p>如果a==null,则选择b；如果b==null,则选择c；</p><p>如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</p><p><strong>下面我们进行<code>null</code>的改写.</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2563efb4e087af14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mysql连接的使用"><a href="#mysql连接的使用" class="headerlink" title="mysql连接的使用"></a>mysql连接的使用</h2><p><strong>一说连接,我们就要告别单表查询的时代了.</strong></p><p>Mysql的Join在两个或者多个表中查询数据.</p><p>可以在SELECT,UPDATE,DELETE语句中使用mysql的JOIN来联合多表查询.</p><p>JOIN按照功能大致分为3类:</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> inner <span class="built_in">join</span>(内连接,或者等值连接):获取两个表中字段匹配关系的记录.</span><br><span class="line"><span class="number">2.</span> <span class="built_in">Left</span> <span class="built_in">join</span>(左连接):获取左表所有记录,即使右表没有对应匹配的记录.</span><br><span class="line"><span class="number">3.</span> <span class="built_in">Right</span> <span class="built_in">join</span>(右连接):与<span class="built_in">Left</span> <span class="built_in">Join</span>相反,用于获取右表所有记录,即使左表没有与之相匹配的数据.</span><br></pre></td></tr></table></figure><p>既然需要关联两个表,我们就再设计一个<code>student_sto</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_scores(</span><br><span class="line">  <span class="string">`student_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'学生ID'</span>,</span><br><span class="line">  <span class="string">`answer_person_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"答题人姓名"</span>,</span><br><span class="line">  <span class="string">`math_scores`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"数学成绩"</span>,</span><br><span class="line">  <span class="string">`language_scores`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"语文成绩"</span>,</span><br><span class="line">  <span class="string">`physcial_score`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'物理成绩'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">"创建时间"</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(student_id,answer_person_name),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time)</span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> auto_increment = <span class="number">1000</span> <span class="keyword">DEFAULT</span> <span class="keyword">charset</span> = utf8 <span class="keyword">comment</span> =<span class="string">'学生成绩表'</span>;</span><br></pre></td></tr></table></figure></p><p>这里我们用到了联合索引,且是用在了主键上.需要我们明白下面的意思:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主键是唯一的。联合主键其实就是主键。</span><br><span class="line">只是联合主键是用<span class="number">2</span>个或<span class="number">2</span>个以上的字段组成主键。</span><br><span class="line">用这个主键包含的字段作为主键，这个组合在数据表中是唯一，且加了主键索引。</span><br></pre></td></tr></table></figure><p>插入数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_scores(student_id,answer_person_name,math_scores,language_scores,physcial_score,create_time)<span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">"小红"</span>,<span class="number">18</span>,<span class="number">36</span>,<span class="number">87</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>1.和<code>student_inf</code>这张表做一个联合查询.我们先做’inner join’的实验.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select <span class="built_in">s1</span>.student_id,<span class="built_in">s1</span>.student_name,<span class="built_in">s2</span>.math_scores,<span class="built_in">s2</span>.language_scores from student_inf <span class="built_in">s1</span> inner <span class="keyword">join </span>student_scores <span class="built_in">s2</span> on <span class="built_in">s1</span>.student_name = <span class="built_in">s2</span>.answer_person_name<span class="comment">;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>测试结果如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8bf2385488e9942a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.我们再做’left join’的实验.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="built_in">s1</span>.student_id,<span class="built_in">s1</span>.student_name,<span class="built_in">s2</span>.math_scores,<span class="built_in">s2</span>.language_scores from student_inf <span class="built_in">s1</span> left <span class="keyword">join </span>student_scores <span class="built_in">s2</span> on <span class="built_in">s1</span>.student_name = <span class="built_in">s2</span>.answer_person_name<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>3.<code>right join</code>的测试</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1d00e380b2a1cdb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>既然到这里,我们再深入一些,3表查询.也试一试吧.要不多没意思啊.又不是考试,但是我们要做到位.玩玩嘛.</p><p>再来一个表<code>student_spending</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stundet_spending(</span><br><span class="line">  student_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'学生ID'</span>,</span><br><span class="line">  spending_person_name <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'消费者姓名'</span>,</span><br><span class="line">  buy_book_spending <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'买书钱'</span>,</span><br><span class="line">  telephone_costs <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'电话费'</span>,</span><br><span class="line">  living_supplies_costs <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'生活用品花费'</span>,</span><br><span class="line">  create_time <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(student_id,spending_person_name),</span><br><span class="line">  <span class="keyword">key</span> idx_create_time(create_time)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> auto_increment = <span class="number">1000</span> <span class="keyword">DEFAULT</span> <span class="keyword">charset</span> = utf8 <span class="keyword">comment</span> =<span class="string">'学生花销表'</span>;</span><br></pre></td></tr></table></figure></p><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_spending(student_id,spending_person_name,buy_book_spending,telephone_costs,living_supplies_costs,create_time) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小红'</span>,<span class="number">12</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="我们来关联这3个表"><a href="#我们来关联这3个表" class="headerlink" title="我们来关联这3个表:"></a>我们来关联这3个表:</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="built_in">s1</span>.student_name,<span class="built_in">s1</span>.student_age,<span class="built_in">s2</span>.physcial_score,<span class="built_in">s3</span>.<span class="keyword">buy_book_spending,s3.create_time </span>from student_inf <span class="built_in">s1</span> inner <span class="keyword">join </span>student_scores <span class="built_in">s2</span> on <span class="built_in">s1</span>.student_name =<span class="built_in">s2</span>.answer_person_name inner <span class="keyword">join </span>student_spending <span class="built_in">s3</span> on <span class="built_in">s2</span>.answer_person_name=<span class="built_in">s3</span>.spending_person_name where <span class="built_in">s1</span>.student_age = <span class="number">18</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f0c77cda267c7980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mysql-null-值处理"><a href="#mysql-null-值处理" class="headerlink" title="mysql null 值处理"></a>mysql null 值处理</h2><p>MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。</p><p>为了处理这种情况，MySQL提供了三大运算符:</p><ul><li>IS NULL: 当列的值是 NULL,此运算符返回 true。</li><li>IS NOT NULL: 当列的值不为 NULL, 运算符返回 true。</li><li>&lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true。</li></ul><p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。</p><p>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 false，即 NULL = NULL 返回false 。</p><p>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p><p>好吧,我们做个试验:</p><ul><li><p>建表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> runoob_test_tbl</span><br><span class="line">    (</span><br><span class="line">    runoob_author <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    runoob_count  <span class="built_in">INT</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'RUNOOB'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'菜鸟教程'</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'Google'</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'FK'</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> runoob_test_tbl;</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count = <span class="literal">NULL</span>;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count != <span class="literal">NULL</span>;</span><br><span class="line">Empty set (0.01 sec)</span><br></pre></td></tr></table></figure><ul><li>正确的测试</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/7505161-65707c4f961c6a45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e3947e4b2475ed82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>mysql中,<code>= 和 != 运算符是不起作用的</code>;</p><h2 id="mysql的正则表达式"><a href="#mysql的正则表达式" class="headerlink" title="mysql的正则表达式"></a>mysql的正则表达式</h2><p>MySQL中使用 <code>REGEXP 操作符</code>来进行正则表达式匹配。</p><p>1.查找runoob_author字段中以’st’为开头的所有数据：<br><img src="http://upload-images.jianshu.io/upload_images/7505161-e956ef1ad10451d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2.查找runoob_author字段以’OB’结尾的所有数据:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-98f789e7888cffed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>3.查找runoob_author字段中所有内容包含<code>O</code>的所有数据:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-38c882fe1d262690.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.查找runoob_author字段中以元音字符开头或以’OB’字符串结尾的所有数据：<br><img src="http://upload-images.jianshu.io/upload_images/7505161-f1d74ba33e158fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><a href="http://www.runoob.com/mysql/mysql-regexp.html" target="_blank" rel="noopener">正则表达式地址</a></p><h2 id="Mysql的事务"><a href="#Mysql的事务" class="headerlink" title="Mysql的事务"></a>Mysql的事务</h2><p><code>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</code></p><ul><li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 insert,update,delete 语句</li></ul><h3 id="事务必须满足ACID这4个条件"><a href="#事务必须满足ACID这4个条件" class="headerlink" title="事务必须满足ACID这4个条件"></a>事务必须满足ACID这4个条件</h3><p>分别为:</p><ul><li>原子性（Atomicity，或称不可分割性）.</li><li>一致性（Consistency）.</li><li>隔离性（Isolation，又称独立性）.</li><li>持久性（Durability）.<blockquote><p>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></blockquote></li></ul><blockquote><p>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p><p>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p><p>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</code></p><h3 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h3><ul><li><p>BEGIN或START TRANSACTION；显式地开启一个事务；</p></li><li><p>COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改称为永久性的；</p></li><li><p>ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</p></li><li><p>SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；</p></li><li><p>RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p></li><li><p>ROLLBACK TO identifier；把事务回滚到标记点；</p></li><li><p>SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。</p></li></ul><h3 id="Mysql事务处理主要有两种方法有2种方法"><a href="#Mysql事务处理主要有两种方法有2种方法" class="headerlink" title="Mysql事务处理主要有两种方法有2种方法"></a>Mysql事务处理主要有两种方法有2种方法</h3><p>1.用BEGIN,ROLLBACK,COMMIT来实现</p><ul><li>BEGIN开始一个事务</li><li>ROLLBACK事务回滚</li><li>COMMIT事务确认</li></ul><p>2.直接用SET来改变Mysql的自动提交模式</p><ul><li>SET AUTOCOMMIT=0 禁止自动提交</li><li>SET AUTOCOMMIT=1 开启自动提交</li></ul><h3 id="事务测试"><a href="#事务测试" class="headerlink" title="事务测试"></a>事务测试</h3><p>1.一个完整的事务如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0697c5c7c5a8fff8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.我们来看看<code>rollback</code>情况.</p><p> 再开始一个事务,特别之处是它没有提交.并被回滚了.</p><p> <img src="http://upload-images.jianshu.io/upload_images/7505161-f0d898e9fe4b1ec8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>所以自然没有插进数据.</p><p>3.查看mysql的隔离级别</p><p><code>select @@tx_isolation</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-3bf7543f895d3917.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可见mysql的隔离级别默认是<code>可重复读</code>.</p><h2 id="Alter命令"><a href="#Alter命令" class="headerlink" title="Alter命令"></a>Alter命令</h2><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令。</p><p>我们先查看标的结构:</p><p>以下,2中查看方法是一致的.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0b61ff91b16db4eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="删除-添加-或修改表字段"><a href="#删除-添加-或修改表字段" class="headerlink" title="删除,添加,或修改表字段."></a>删除,添加,或修改表字段.</h3><p>1.使用alter命令及drop字句删除表的i字段.</p><p><code>alter table testalter_tbl drop i;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8afc153bedeca78f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>看一看更加全面的表结构.编码默认是<code>gbk</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1993c5bdedfd95aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.增加一列</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-238f962342e103c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.指定新增字段的位置.</p><p>执行下面的语句来测试,看看字段的位置有没有变化.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">DROP</span> i;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ADD</span> i <span class="built_in">INT</span> <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">DROP</span> i;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ADD</span> i <span class="built_in">INT</span> <span class="keyword">AFTER</span> c;</span><br></pre></td></tr></table></figure><p>前两条SQL的执行结果:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e3de62a1fb81cd2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>后两条SQL的执行结果.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8e17af62a3c526e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>修改字段类型及名称.</li></ol><p><strong>改字段的类型</strong></p><p><code>modify</code>字段的使用.</p><p><code>alter table testalter_tbl modify i bigint;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8fbb033540592eca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>改字段的名称</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-bad8550f07ec39e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>字段名和类型全都改</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ef89b792a7ca2c0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.解决对null值和默认值的影响</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1fae36766538ff61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>6.修改字段默认值</p><p><code>alter table testalter_tbl alter i set default 1000;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7d9220630c429470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>7.使用alter命令及drop字段来删除字段的默认值<br><img src="http://upload-images.jianshu.io/upload_images/7505161-5669d011da7ce718.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>8.修改数据表类型</p><p><code>alter table testalter_tbl engine = myisam;</code></p><p>9.修改表名<br><code>ALTER TABLE testalter_tbl RENAME TO alter_tbl;</code></p><p>10.查看表的类型.</p><p><code>show table status like &#39;testalter_tbl&#39;\G;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-758ccbc9411559dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/7505161-b2e7f9642bd462a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p><p>打个比方，如果合理的设计且使用索引的MySQL是一辆兰博基尼的话，那么没有设计和使用索引的MySQL就是一个人力三轮车。</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>创建索引时，你需要确保该索引是应用在    SQL 查询语句的条件(一般作为 WHERE 子句的条件)。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p><p>建立索引会占用磁盘空间的索引文件。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><p><code>CREATE INDEX indexName ON mytable(username(length));</code></p><p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p><h3 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h3><p><code>ALTER table tableName ADD INDEX indexName(columnName)</code></p><p>创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(</span><br><span class="line"></span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">INDEX</span> [indexName] (username(<span class="keyword">length</span>))</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h3><p><code>DROP INDEX [indexName] ON mytable;</code></p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><h3 id="创建索引-2"><a href="#创建索引-2" class="headerlink" title="创建索引"></a>创建索引</h3><p><code>CREATE UNIQUE INDEX indexName ON mytable(username(length))</code></p><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p><code>ALTER table mytable ADD UNIQUE [indexName] (username(length))</code></p><p>创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(</span><br><span class="line"></span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNIQUE</span> [indexName] (username(<span class="keyword">length</span>))</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h3><p>有四种方式来添加数据表的索引：</p><p><code>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):</code></p><p> 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</p><p><code>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):</code></p><p> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</p><p><code>ALTER TABLE tbl_name ADD INDEX index_name (column_list):</code></p><p> 添加普通索引，索引值可出现多次。</p><p><code>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):</code></p><p>该语句指定了索引为 FULLTEXT ，用于全文索引。</p><p>以下实例为在表中添加索引。</p><p><code>mysql&gt; ALTER TABLE testalter_tbl ADD INDEX (c);</code></p><p>你还可以在 ALTER 命令中使用 DROP 子句来删除索引。尝试以下实例删除索引:</p><p><code>mysql&gt; ALTER TABLE testalter_tbl DROP INDEX c;</code></p><h3 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER 命令添加和删除主键"></a>使用 ALTER 命令添加和删除主键</h3><p>主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空（NOT NULL）。实例如下：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">MODIFY i INT NOT NULL</span>;</span><br><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">ADD PRIMARY KEY (i)</span>;</span><br></pre></td></tr></table></figure></p><p>你也可以使用 ALTER 命令删除主键：</p><p><code>mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;</code></p><p>删除主键时只需指定PRIMARY KEY，但在删除索引时，你必须知道索引名。</p><h3 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h3><p>你可以使用 SHOW INDEX 命令来列出表中的相关的索引信息。可以通过添加 \G 来格式化输出信息。</p><p>尝试以下实例:</p><p><code>mysql&gt; SHOW INDEX FROM table_name; \G</code></p><h2 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h2><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p><p>临时表在MySQL 3.23版本中添加，如果你的MySQL版本低于 3.23版本就无法使用MySQL的临时表。不过现在一般很少有再使用这么低版本的MySQL数据库服务了。</p><p>MySQL临时表只在当前连接可见，如果你使用PHP脚本来创建MySQL临时表，那每当PHP脚本执行完成后，该临时表也会自动销毁。</p><p>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line"><span class="code">    -&gt; product_name VARCHAR(50) NOT NULL</span></span><br><span class="line"><span class="code">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span></span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line"><span class="code">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span></span><br><span class="line"><span class="code">    -&gt; VALUES</span></span><br><span class="line"><span class="code">    -&gt; ('cucumber', 100.25, 90, 2);</span></span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| product<span class="emphasis">_name | total_</span>sales | avg<span class="emphasis">_unit_</span>price | total<span class="emphasis">_units_</span>sold |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当你使用 SHOW TABLES命令显示数据表列表时，你将无法看到 SalesSummary表。</p><p>如果你退出当前MySQL会话，再使用 SELECT命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p><h3 id="删除临时表"><a href="#删除临时表" class="headerlink" title="删除临时表"></a>删除临时表</h3><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line"><span class="code">    -&gt; product_name VARCHAR(50) NOT NULL</span></span><br><span class="line"><span class="code">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span></span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line"><span class="code">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span></span><br><span class="line"><span class="code">    -&gt; VALUES</span></span><br><span class="line"><span class="code">    -&gt; ('cucumber', 100.25, 90, 2);</span></span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| product<span class="emphasis">_name | total_</span>sales | avg<span class="emphasis">_unit_</span>price | total<span class="emphasis">_units_</span>sold |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; DROP TABLE SalesSummary;</span><br><span class="line">mysql&gt;  SELECT * FROM SalesSummary;</span><br><span class="line">ERROR 1146: Table <span class="emphasis">'RUNOOB.SalesSummary'</span> doesn't exist</span><br></pre></td></tr></table></figure></p><h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><p>如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用CREATE TABLE … SELECT 命令，是无法实现的。</p><p>本章节将为大家介绍如何完整的复制MySQL数据表，步骤如下：</p><ul><li>使用 SHOW CREATE TABLE 命令获取创建数据表(CREATE TABLE) 语句，该语句包含了原数据表的结构，索引等。</li><li>复制以下命令显示的SQL语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构。</li><li>如果你想复制表的内容，你就可以使用 INSERT INTO … SELECT 语句来实现。</li></ul><p>实例<br>尝试以下实例来复制表 runoob_tbl 。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">步骤一：</span><br><span class="line"></span><br><span class="line">获取数据表的完整结构。</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW <span class="keyword">CREATE</span> TABLE runoob_tbl \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: runoob_tbl</span><br><span class="line"><span class="keyword">Create</span> Table: <span class="keyword">CREATE</span> TABLE <span class="symbol">`runoob_tbl`</span> (</span><br><span class="line">  <span class="symbol">`runoob_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="symbol">`runoob_title`</span> varchar(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  <span class="symbol">`runoob_author`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  <span class="symbol">`submission_date`</span> date default <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>  (<span class="symbol">`runoob_id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`AUTHOR_INDEX`</span> (<span class="symbol">`runoob_author`</span>)</span><br><span class="line">) ENGINE=InnoDB</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br><span class="line">步骤二：</span><br><span class="line"></span><br><span class="line">修改SQL语句的数据表名，并执行SQL语句。</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> TABLE <span class="symbol">`clone_tbl`</span> (</span><br><span class="line">  -&gt; <span class="symbol">`runoob_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  -&gt; <span class="symbol">`runoob_title`</span> varchar(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  -&gt; <span class="symbol">`runoob_author`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  -&gt; <span class="symbol">`submission_date`</span> date default <span class="literal">NULL</span>,</span><br><span class="line">  -&gt; <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>  (<span class="symbol">`runoob_id`</span>),</span><br><span class="line">  -&gt; <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`AUTHOR_INDEX`</span> (<span class="symbol">`runoob_author`</span>)</span><br><span class="line">-&gt; ) ENGINE=InnoDB;</span><br><span class="line">Query OK, 0 rows affected (1.80 sec)</span><br><span class="line">步骤三：</span><br><span class="line"></span><br><span class="line">执行完第二步骤后，你将在数据库中创建新的克隆表 clone_tbl。 如果你想拷贝数据表的数据你可以使用 <span class="keyword">INSERT</span> <span class="keyword">INTO</span>... <span class="keyword">SELECT</span> 语句来实现。</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> clone_tbl (runoob_id,</span><br><span class="line">    -&gt;                        runoob_title,</span><br><span class="line">    -&gt;                        runoob_author,</span><br><span class="line">    -&gt;                        submission_date)</span><br><span class="line">    -&gt; <span class="keyword">SELECT</span> runoob_id,runoob_title,</span><br><span class="line">    -&gt;        runoob_author,submission_date</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> runoob_tbl;</span><br><span class="line">Query OK, 3 rows affected (0.07 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line">执行以上步骤后，你将完整的复制表，包括表结构及表数据。</span><br></pre></td></tr></table></figure></p><h2 id="mysql的元数据"><a href="#mysql的元数据" class="headerlink" title="mysql的元数据"></a>mysql的元数据</h2><p>你可能想知道MySQL以下三种信息：</p><ul><li>查询结果信息： SELECT, UPDATE 或 DELETE语句影响的记录数。</li><li>数据库和数据表的信息： 包含了数据库及数据表的结构信息。</li><li>MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等。<br>在MySQL的命令提示符中，我们可以很容易的获取以上服务器信息。 但如果使用Perl或PHP等脚本语言，你就需要调用特定的接口函数来获取。 接下来我们会详细介绍。</li></ul><h3 id="获取查询语句影响的记录数"><a href="#获取查询语句影响的记录数" class="headerlink" title="获取查询语句影响的记录数"></a>获取查询语句影响的记录数</h3><p>PERL 实例<br>在 DBI 脚本中， 语句影响的记录数通过函数 do( ) 或 execute( )返回：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="comment"># 使用do( ) 执行  $query</span></span><br><span class="line"><span class="keyword">my</span> $count = $dbh-&gt;<span class="keyword">do</span> ($query);</span><br><span class="line"><span class="comment"># 如果发生错误会输出 0</span></span><br><span class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="comment"># 使用prepare( ) 及 execute( ) 执行  $query</span></span><br><span class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare ($query);</span><br><span class="line"><span class="keyword">my</span> $count = $sth-&gt;execute ( );</span><br><span class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><h3 id="数据库和数据表列表"><a href="#数据库和数据表列表" class="headerlink" title="数据库和数据表列表"></a>数据库和数据表列表</h3><p>你可以很容易的在MySQL服务器中获取数据库和数据表列表。 如果你没有足够的权限，结果将返回 null。</p><p>你也可以使用 SHOW TABLES 或 SHOW DATABASES 语句来获取数据库和数据表列表。</p><p>REAL实例<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前数据库中所有可用的表。</span></span><br><span class="line"><span class="keyword">my</span> @tables = $dbh-&gt;tables ( );</span><br><span class="line"><span class="keyword">foreach</span> $table (@tables )&#123;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"表名 $table\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取服务器元数据"><a href="#获取服务器元数据" class="headerlink" title="获取服务器元数据"></a>获取服务器元数据</h3><p>以下命令语句可以在 MySQL 的命令提示符使用，也可以在脚本中 使用，如PHP脚本。</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7bc11eae1c498e7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mysql的序列"><a href="#mysql的序列" class="headerlink" title="mysql的序列"></a>mysql的序列</h2><p>MySQL序列是一组整数：1, 2, 3, …，由于一张数据表只能有一个字段自增主键， 如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现。</p><p>本章我们将介绍如何使用MySQL的序列。</p><h3 id="使用AUTO-INCREMENT"><a href="#使用AUTO-INCREMENT" class="headerlink" title="使用AUTO_INCREMENT"></a>使用AUTO_INCREMENT</h3><p>MySQL中最简单使用序列的方法就是使用 MySQL AUTO_INCREMENT 来定义列。</p><p>实例</p><p>以下实例中创建了数据表insect， insect中id无需指定值可实现自动增长。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line"><span class="code">    -&gt; (</span></span><br><span class="line"><span class="code">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="code">    -&gt; PRIMARY KEY (id),</span></span><br><span class="line"><span class="code">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span></span><br><span class="line"><span class="code">    -&gt; date DATE NOT NULL, # date collected</span></span><br><span class="line"><span class="code">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span></span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">mysql&gt; INSERT INTO insect (id,name,date,origin) VALUES</span><br><span class="line"><span class="code">    -&gt; (NULL,'housefly','2001-09-10','kitchen'),</span></span><br><span class="line"><span class="code">    -&gt; (NULL,'millipede','2001-09-10','driveway'),</span></span><br><span class="line"><span class="code">    -&gt; (NULL,'grasshopper','2001-09-10','front yard');</span></span><br><span class="line">Query OK, 3 rows affected (0.02 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; SELECT * FROM insect ORDER BY id;</span><br><span class="line"><span class="code">+----+</span>-------------<span class="code">+------------+</span>------------+</span><br><span class="line">| id | name        | date       | origin     |</span><br><span class="line"><span class="code">+----+</span>-------------<span class="code">+------------+</span>------------+</span><br><span class="line">|  1 | housefly    | 2001-09-10 | kitchen    |</span><br><span class="line">|  2 | millipede   | 2001-09-10 | driveway   |</span><br><span class="line">|  3 | grasshopper | 2001-09-10 | front yard |</span><br><span class="line"><span class="code">+----+</span>-------------<span class="code">+------------+</span>------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="获取AUTO-INCREMENT值"><a href="#获取AUTO-INCREMENT值" class="headerlink" title="获取AUTO_INCREMENT值"></a>获取AUTO_INCREMENT值</h3><p>在MySQL的客户端中你可以使用 SQL中的LAST_INSERT_ID( ) 函数来获取最后的插入表中的自增列的值。</p><p>在PHP或PERL脚本中也提供了相应的函数来获取最后的插入表中的自增列的值。</p><p>PERL实例<br>使用 mysql_insertid 属性来获取 AUTO_INCREMENT 的值。 实例如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dbh</span>-&gt;<span class="keyword">do</span> (<span class="string">"INSERT INTO insect (name,date,origin)</span></span><br><span class="line"><span class="string">VALUES('moth','2001-09-14','windowsill')"</span>);</span><br><span class="line">my <span class="variable">$seq</span> = <span class="variable">$dbh</span>-&gt;&#123;mysql_insertid&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h3><p><code>如果你删除了数据表中的多条记录，并希望对剩下数据的AUTO_INCREMENT列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。 不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱</code></p><p>操作如下所示：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> insect <span class="comment">DROP id</span>;</span><br><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> insect</span><br><span class="line">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class="line">    -&gt; ADD PRIMARY KEY (id);</span><br></pre></td></tr></table></figure></p><h3 id="设置序列的开始值"><a href="#设置序列的开始值" class="headerlink" title="设置序列的开始值"></a>设置序列的开始值</h3><p>一般情况下序列的开始值为1，但如果你需要指定一个开始值100，那我们可以通过以下语句来实现：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id INT UNSIGNED <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; PRIMARY KEY (id),</span><br><span class="line">    -&gt; name VARCHAR(30) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; date DATE <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; origin VARCHAR(30) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="attribute">engine</span>=innodb <span class="attribute">auto_increment</span>=100 <span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>或者你也可以在表创建成功后，通过以下语句来实现：</p><p><code>mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</code></p><h2 id="MySQL-处理重复数据"><a href="#MySQL-处理重复数据" class="headerlink" title="MySQL 处理重复数据"></a>MySQL 处理重复数据</h2><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p><p>本章节我们将为大家介绍如何防止数据表出现重复数据及如何删除数据表中的重复数据。</p><h3 id="防止表中出现重复数据"><a href="#防止表中出现重复数据" class="headerlink" title="防止表中出现重复数据"></a>防止表中出现重复数据</h3><p>你可以在MySQL数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。</p><p>让我们尝试一个实例：下表中无索引及主键，所以该表允许出现多条重复记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">    first_name <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    last_name <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="built_in">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><code>如果你想设置表中字段first_name，last_name数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为NULL，可设置为NOT NULL。</code></p><p>如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   last_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   sex <span class="built_in">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>如果我们设置了唯一索引，那么在插入重复数据时，SQL语句将无法执行成功,并抛出错。</p><p><code>INSERT IGNORE INTO与INSERT INTO的区别就是INSERT IGNORE会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的</code></p><p>以下实例使用了INSERT IGNORE INTO，执行后不会出错，也不会向数据表中插入重复数据：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">INSERT</span> <span class="selector-tag">IGNORE</span> <span class="selector-tag">INTO</span> <span class="selector-tag">person_tbl</span> (last_name, first_name)</span><br><span class="line">    <span class="selector-tag">-</span>&gt; <span class="selector-tag">VALUES</span>( <span class="string">'Jay'</span>, <span class="string">'Thomas'</span>);</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, <span class="selector-tag">1</span> <span class="selector-tag">row</span> <span class="selector-tag">affected</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">INSERT</span> <span class="selector-tag">IGNORE</span> <span class="selector-tag">INTO</span> <span class="selector-tag">person_tbl</span> (last_name, first_name)</span><br><span class="line">    <span class="selector-tag">-</span>&gt; <span class="selector-tag">VALUES</span>( <span class="string">'Jay'</span>, <span class="string">'Thomas'</span>);</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, <span class="selector-tag">0</span> <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p><code>INSERT IGNORE INTO当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而REPLACE INTO into如果存在primary 或 unique相同的记录，则先删除掉。再插入新记录</code></p><p>另一种设置数据的唯一性方法是添加一个UNIQUE索引，如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   last_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   sex <span class="built_in">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">   <span class="keyword">UNIQUE</span> (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h3><p>以下我们将统计表中 first_name 和 last_name的重复记录数：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    -&gt;<span class="built_in"> GROUP </span>BY last_name, first_name</span><br><span class="line">    -&gt; HAVING repetitions &gt; 1;</span><br></pre></td></tr></table></figure></p><p>以上查询语句将返回 person_tbl 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p><p>确定哪一列包含的值可能会重复。</p><p>在列选择列表使用COUNT(*)列出的那些列。</p><p>在GROUP BY子句中列出的列。</p><p>HAVING子句设置重复数大于1。</p><p>###过滤重复数据</p><p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name, first_name</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> person_tbl;</span><br></pre></td></tr></table></figure></p><p>你也可以使用 GROUP BY 来读取数据表中不重复的数据：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT last_name, first_name</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    -&gt;<span class="built_in"> GROUP </span>BY (last_name, first_name);</span><br></pre></td></tr></table></figure></p><h3 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h3><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tmp SELECT last_name, first_name, sex</span><br><span class="line">    -&gt;                  <span class="keyword">FROM</span> person_tbl;</span><br><span class="line">    -&gt;                 <span class="built_in"> GROUP </span>BY (last_name, first_name, sex);</span><br><span class="line">mysql&gt; DROP TABLE person_tbl;</span><br><span class="line">mysql&gt; ALTER TABLE tmp RENAME <span class="keyword">TO</span> person_tbl;</span><br></pre></td></tr></table></figure><p>当然你也可以在数据表中添加 INDEX（索引） 和 PRIMAY KEY（主键）这种简单的方法来删除表中的重复记录。</p><p>方法如下：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER IGNORE <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">    -&gt; ADD PRIMARY KEY (last_name, first_name);</span><br></pre></td></tr></table></figure></p><h3 id="MySQL-及-SQL-注入"><a href="#MySQL-及-SQL-注入" class="headerlink" title="MySQL 及 SQL 注入"></a>MySQL 及 SQL 注入</h3><p>如果您通过网页获取用户输入的数据并将其插入一个MySQL数据库，那么就有可能发生SQL注入安全的问题。</p><p>本章节将为大家介绍如何防止SQL注入，并通过脚本来过滤SQL中注入的字符。</p><p>所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p><p>以下实例中，输入的用户名必须为字母、数字及下划线的组合，且用户名长度为 8 到 20 个字符之间：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\w&#123;8,20&#125;$/"</span>, <span class="variable">$_GET</span>[<span class="string">'username'</span>], <span class="variable">$matches</span>))</span><br><span class="line">&#123;</span><br><span class="line">   <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">"SELECT * FROM users</span></span><br><span class="line"><span class="string">                          WHERE username=<span class="variable">$matches</span>[0]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"username 输入异常"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>让我们看下在没有过滤特殊字符时，出现的SQL情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 设定$name 中插入了我们不需要的SQL语句</span><br><span class="line">$name = "Qadir'; <span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;";</span><br><span class="line"> mysqli_query($conn, "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'&#123;$name&#125;'</span><span class="string">");</span></span><br></pre></td></tr></table></figure><p>以上的注入语句中，我们没有对 $name 的变量进行过滤，$name 中插入了我们不需要的SQL语句，将删除 users 表中的所有数据。</p><p>在PHP中的 mysqli_query() 是不允许执行多个 SQL 语句的，但是在 SQLite 和 PostgreSQL 是可以同时执行多条SQL语句的，所以我们对这些用户的数据需要进行严格的验证。</p><p>防止SQL注入，我们需要注意以下几个要点：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双<span class="string">"-"</span>进行转换等。</span><br><span class="line"><span class="number">2.</span>永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</span><br><span class="line"><span class="number">3.</span>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</span><br><span class="line"><span class="number">4.</span>不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</span><br><span class="line"><span class="number">5.</span>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</span><br><span class="line"><span class="number">6.</span>sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。</span><br></pre></td></tr></table></figure></p><h3 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h3><p>在脚本语言，如Perl和PHP你可以对用户输入的数据进行转义从而来防止SQL注入。</p><p>PHP的MySQL扩展提供了mysqli_real_escape_string()函数来转义特殊的输入字符。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">  $</span><span class="bash">name = stripslashes(<span class="variable">$name</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">$</span><span class="bash">name = mysqli_real_escape_string(<span class="variable">$conn</span>, <span class="variable">$name</span>);</span></span><br><span class="line"><span class="meta"> mysqli_query($</span><span class="bash">conn, <span class="string">"SELECT * FROM users WHERE name='&#123;<span class="variable">$name</span>&#125;'"</span>);</span></span><br></pre></td></tr></table></figure></p><h3 id="Like语句中的注入"><a href="#Like语句中的注入" class="headerlink" title="Like语句中的注入"></a>Like语句中的注入</h3><p><code>like查询时，如果用户输入的值有&quot;_&quot;和&quot;%&quot;，则会出现这种情况：用户本来只是想查询&quot;abcd_&quot;，查询结果中却有&quot;abcd_&quot;、&quot;abcde&quot;、&quot;abcdf&quot;等等；用户要查询&quot;30%&quot;（注：百分之三十）时也会出现问题。</code></p><p>在PHP脚本中我们可以使用addcslashes()函数来处理以上情况，如下实例：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sub = addcslashes(mysqli_real_escape_string($conn, <span class="string">"%something_"</span>), <span class="string">"%_"</span>);</span><br><span class="line">// $sub == \%something\<span class="number">_</span></span><br><span class="line"> mysqli_query($conn, <span class="string">"SELECT * FROM messages WHERE subject LIKE '&#123;$sub&#125;%'"</span>);</span><br><span class="line">addcslashes() 函数在指定的字符前添加反斜杠。</span><br></pre></td></tr></table></figure></p><p>语法格式:</p><p><code>addcslashes(string,characters)</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-9288c828836a0649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RDBMS术语&quot;&gt;&lt;a href=&quot;#RDBMS术语&quot; class=&quot;headerlink&quot; title=&quot;RDBMS术语&quot;&gt;&lt;/a&gt;RDBMS术语&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据库: 数据库是一些关联表的集合。&lt;/li&gt;
&lt;li&gt;数据表: 表是数据的矩阵。在一个
      
    
    </summary>
    
      <category term="mysql" scheme="luoyupiaoshang.club/categories/mysql/"/>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="增删改查" scheme="luoyupiaoshang.club/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="luoyupiaoshang.club/2018/01/01/Markdown/"/>
    <id>luoyupiaoshang.club/2018/01/01/Markdown/</id>
    <published>2018-01-01T11:59:06.000Z</published>
    <updated>2018-04-05T02:25:54.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表格模板"><a href="#表格模板" class="headerlink" title="表格模板"></a>表格模板</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| Tables |</span> Are <span class="params">| Cool |</span></span><br><span class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></span><br><span class="line"><span class="params">| col 3 is |</span> right-aligned <span class="params">| $1600 |</span></span><br><span class="line"><span class="params">| col 2 is |</span> centered <span class="params">| $12 |</span></span><br><span class="line"><span class="params">| zebra stripes |</span> are neat <span class="params">| $1 |</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表格模板&quot;&gt;&lt;a href=&quot;#表格模板&quot; class=&quot;headerlink&quot; title=&quot;表格模板&quot;&gt;&lt;/a&gt;表格模板&lt;/h2&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="markdown" scheme="luoyupiaoshang.club/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>秒杀Dao层开发</title>
    <link href="luoyupiaoshang.club/2018/01/01/%E7%A7%92%E6%9D%80Dao%E5%B1%82%E5%BC%80%E5%8F%91/"/>
    <id>luoyupiaoshang.club/2018/01/01/秒杀Dao层开发/</id>
    <published>2018-01-01T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库设计编码"><a href="#数据库设计编码" class="headerlink" title="数据库设计编码"></a>数据库设计编码</h2><p>数据库设计工作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.创建数据库seckill</span><br><span class="line">2.使用数据库seckill</span><br><span class="line"></span><br><span class="line">3.创建秒杀数据库存表:</span><br><span class="line">    3.1.存储引擎的选用.</span><br><span class="line">    3.2.具体字段的编辑.</span><br><span class="line">    3.3.索引的创建.</span><br><span class="line">4.初始化数据(插入几组数据)</span><br><span class="line"></span><br><span class="line">5.创建用户明细表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">秒杀成功明细表里面的主键不使用自增的主键,</span><br><span class="line"></span><br><span class="line">而是采用联合主键</span><br><span class="line"></span><br><span class="line">同一个用户只可能对同一个库存内的商品做秒杀,</span><br><span class="line">所以设计为</span><br><span class="line">PRIMARY_KEY(seckill_id,user_phone),</span><br></pre></td></tr></table></figure></p><p>详情如下:<br><strong>!!! 千万注意:表的字段,比如:<code>seckill_id</code>里面是tab上面的那个符号,不要弄错了.我使的是5.7版本,还有就是创建时间戳的时候,需要给它设置一个默认值</strong></p><h3 id="创建秒杀数据库"><a href="#创建秒杀数据库" class="headerlink" title="创建秒杀数据库"></a>创建秒杀数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE seckill(</span><br><span class="line">  `seckill_id` BIGINT NOT NULL AUTO_INCREMENT COMMENT &apos;商品库存id&apos;,</span><br><span class="line">  `name` VARCHAR(120) NOT NULL  COMMENT &apos;商品名称&apos;,</span><br><span class="line">  `number` int NOT NULL COMMENT &apos;库存数量&apos;,</span><br><span class="line">  `start_time` TIMESTAMP not null ON UPDATE CURRENT_TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &apos;秒杀开始时间&apos;,</span><br><span class="line">  `end_time` TIMESTAMP not null ON UPDATE CURRENT_TIMESTAMP  DEFAULT CURRENT_TIMESTAMP COMMENT &apos;秒杀结束时间&apos;,</span><br><span class="line">  `create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  PRIMARY KEY (seckill_id),</span><br><span class="line">  key idx_start_time(start_time),</span><br><span class="line">  key idx_end_time(end_time),</span><br><span class="line">  key idx_create_time(create_time)</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=1000 DEFAULT CHARSET=utf8 COMMENT =&apos;秒杀库存表&apos;;</span><br></pre></td></tr></table></figure><p>查看表的详细计划:show create table seckill\G;</p><h3 id="插入几组数据"><a href="#插入几组数据" class="headerlink" title="插入几组数据"></a>插入几组数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO seckill(name,number,start_time,end_time)</span><br><span class="line">VALUES</span><br><span class="line">(&apos;1000元秒杀iPad6&apos;,100,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;),</span><br><span class="line">(&apos;500元秒杀iPad7&apos;,200,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;),</span><br><span class="line">(&apos;300元秒杀小米4&apos;,300,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;),</span><br><span class="line">(&apos;200元秒杀红米note&apos;,400,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;);</span><br></pre></td></tr></table></figure><h3 id="创建用户明细表"><a href="#创建用户明细表" class="headerlink" title="创建用户明细表"></a>创建用户明细表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table success_killed(</span><br><span class="line">  `seckill_id` bigint NOT NULL COMMENT &apos;秒杀商品Id&apos;,</span><br><span class="line">  `user_phone` bigint NOT NULL COMMENT &apos;用户手机号&apos;,</span><br><span class="line">  `state` tinyint NOT NULL DEFAULT -1 COMMENT &apos;状态标识:-1:无效,0:成功,1:已付款,2:已发货&apos;,</span><br><span class="line">  `create_time` TIMESTAMP NOT NULL DEFAULT current_timestamp COMMENT &apos;创建时间&apos;,</span><br><span class="line">  PRIMARY KEY (seckill_id,user_phone),/*联合索引*/</span><br><span class="line">  key idx_create_time(create_time)</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT =&apos;秒杀成功明细表&apos;;</span><br></pre></td></tr></table></figure><p>现在发现IDEA里面用<code>show CREATE TABLE success_killed;</code>不用加上\G;</p><p>一般其他的控制台要加上\G;即:<code>show CREATE TABLE success_killed\G;</code></p><h2 id="DAO相关接口编码"><a href="#DAO相关接口编码" class="headerlink" title="DAO相关接口编码"></a>DAO相关接口编码</h2><h3 id="DAO层接口的设计"><a href="#DAO层接口的设计" class="headerlink" title="DAO层接口的设计"></a>DAO层接口的设计</h3><p>总的看来,我们的接口需要减少库存和增加明细的操作.</p><p>但是还要更加细致</p><p>其中,要注意的是,SuccessSeckilled是一个复合实体,里面有一个实体是Seckill,属于多对一的关系.</p><p>也就是同样的商品秒杀成功的话,可能有多个明细.</p><h3 id="SeckillDao接口的设计"><a href="#SeckillDao接口的设计" class="headerlink" title="SeckillDao接口的设计"></a>SeckillDao接口的设计</h3><ol><li><p>根据商品ID和秒杀时间减少库存</p></li><li><p>根据商品Id秒杀商品</p></li><li><p>根据偏移量查询秒杀商品列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface SeckillDao &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 减库存</span><br><span class="line">     * @param secKillId</span><br><span class="line">     * @param killTime</span><br><span class="line">     * @return 如果影响行数&gt;1,表示更新的记录行数(如果返回0,说明这条语句没有更新成功.)</span><br><span class="line">     */</span><br><span class="line">    int reduceNumber(long secKillId, Date killTime);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Id秒杀商品</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Seckill queryById(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据偏移量查询秒杀商品列表</span><br><span class="line">     * @param limit 取多少条记录</span><br><span class="line">     * @param offet 偏移量</span><br><span class="line">     * @return 商品列表</span><br><span class="line">     * 会用到一个SQL的链接,因为是符合查询(查询秒杀明细(查询秒杀商品))</span><br><span class="line">     */</span><br><span class="line">    List&lt;Seckill&gt; queryAll(int offet,int limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="SuccessKilledDao接口的设计"><a href="#SuccessKilledDao接口的设计" class="headerlink" title="SuccessKilledDao接口的设计"></a>SuccessKilledDao接口的设计</h3><ol><li><p>插入用户秒杀明细</p></li><li><p>查询携带秒杀商品的明细</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1.插入用户购买明细,可过滤重复(之前设置的是联合主键,所以可以帮我们过滤重复)</span><br><span class="line"> * 2.根据id查询Successkilled并携带Seckill实体</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface SuccessKilledDao &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 插入用户购买明细</span><br><span class="line">     * @param secKillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @return  插入的行数,就是秒杀成功的记录</span><br><span class="line">     */</span><br><span class="line">    int insertSuccessKilled(long secKillId,long userPhone);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询Successkilled并携带Seckill实体</span><br><span class="line">     * @param secKillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    SuccessKilled querySuccessKilledWithSeckill(long secKillId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="基于MyBatis实现DAO"><a href="#基于MyBatis实现DAO" class="headerlink" title="基于MyBatis实现DAO"></a>基于MyBatis实现DAO</h2><p>mybatis与hibernate其实都是针对对象关系的映射框架.</p><p>把数据库中的东西映射到对象</p><p>反过来就把对象中的东西映射到数据库当中</p><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-946d004c773772cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mybatis的特点"><a href="#mybatis的特点" class="headerlink" title="mybatis的特点"></a>mybatis的特点</h2><p>参数+SQL=Entity/List</p><h3 id="SQL写在的位置"><a href="#SQL写在的位置" class="headerlink" title="SQL写在的位置"></a>SQL写在的位置</h3><ol><li>XML提供SQL(推荐)</li></ol><p>2, 注解提供SQL</p><h3 id="实现DAO接口"><a href="#实现DAO接口" class="headerlink" title="实现DAO接口:"></a>实现DAO接口:</h3><ol><li><p>Mapper自动实现DAO接口(推荐)<br> 我知道有一种是通过MyEclipse实现接口的方式,用起来挺爽的.但是不利于我们对设计接口的理解.</p><p> 关注点:SQL如何编写,如何去设计DAO接口.节省了很多需要维护的程序.所有的实现都是mybatis自动完成.</p></li><li>API编程的方式实现DAO接口<br> 你可能会遗漏一些东西…影响工作效率</li></ol><h2 id="mybatis实现DAO编程"><a href="#mybatis实现DAO编程" class="headerlink" title="mybatis实现DAO编程"></a>mybatis实现DAO编程</h2><h3 id="mybatis官方文档地址"><a href="#mybatis官方文档地址" class="headerlink" title="mybatis官方文档地址"></a>mybatis官方文档地址</h3><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方链接</a></p><p>驼峰命名转换:不用关心列名到属性名的转换了.</p><p>配置文件如下:</p><h4 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!--1.配置全局属性--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!--使用JDBC的getGenerateKeys 获取数据库自增主键值,默认是false--&gt;</span><br><span class="line">        &lt;setting name=&quot;useGeneratekeys&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;!--使用列别名替换别名,默认是true</span><br><span class="line">            select name as title from table</span><br><span class="line">            列名name取得的列别名是title,mybatis会自动识别</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;setting name=&quot;useColumnLable&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;!--开启驼峰命名转换:Table(create_time)转为 Entity(createtime)--&gt;</span><br><span class="line">        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="配置文件mapper-xml-的书写"><a href="#配置文件mapper-xml-的书写" class="headerlink" title="配置文件mapper.xml 的书写"></a>配置文件mapper.xml 的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.引入方法内部的参数</span><br><span class="line">就跟HQL里里面的? 有类似之处</span><br><span class="line">#&#123;xxx&#125;  xxx是方法里面的参数</span><br><span class="line"></span><br><span class="line">2.mybatis配置的xml文件内部不能识别的符号的改写方法</span><br><span class="line">&gt;=</span><br><span class="line">配置文件中不允许有&gt;=符号的出现,允许下面这种写法:</span><br><span class="line">&lt;![CDATA[ &lt;= ]]&gt;</span><br><span class="line">为了防止冲突,就是告诉 &lt;= 不是xml的语法</span><br><span class="line"></span><br><span class="line">3.resultType--实体类名 parameterType-参数类型</span><br><span class="line"></span><br><span class="line">多个参数并不用加上parameterType</span><br><span class="line"></span><br><span class="line">4.解决主键冲突的话,可能出现错误:</span><br><span class="line"></span><br><span class="line">需要在insert into 中间加上ignore,即:insert ignore into 这样重复插入的话,就会插入不成功.返回插入的数=0</span><br><span class="line"></span><br><span class="line">5.解决mybatis把结果映射到表中同时映射表内部的实体问题</span><br><span class="line"></span><br><span class="line">可以利用内连接(inner join)来解决这个问题.</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from s s1</span><br><span class="line">inner join e e1 on s1.id = e1.id</span><br><span class="line">where s1.id =#&#123;Id&#125;</span><br></pre></td></tr></table></figure><p><strong>Mapper下的两个映射文件:</strong></p><h4 id="SeckillDao-xml"><a href="#SeckillDao-xml" class="headerlink" title="SeckillDao.xml"></a>SeckillDao.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;org.seckill.dao.SecKillDao&quot;&gt;</span><br><span class="line">    &lt;!--目的:为DAO接口方法提供SQL语句配置--&gt;</span><br><span class="line">    &lt;!--id就是方法名,看你的方法要执行什么操作了--&gt;</span><br><span class="line">    &lt;update id=&quot;reduceNumber&quot;&gt;</span><br><span class="line">        &lt;!--具体的SQL--&gt;</span><br><span class="line">        UPDATE seckill</span><br><span class="line">        SET number = number-1</span><br><span class="line">        WHERE seckill_id=#&#123;seckillId&#125;</span><br><span class="line">        AND start_time &lt;![CDATA[ &lt;= ]]&gt; #&#123;killTime&#125;</span><br><span class="line">        AND end_time &gt;= #&#123;killTime&#125;</span><br><span class="line">        AND number &gt; 0;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;queryById&quot; resultType=&quot;Seckill&quot; parameterType=&quot;long&quot;&gt;</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM seckill</span><br><span class="line">        WHERE seckill_id=#&#123;seckillId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;queryAll&quot; resultType=&quot;Seckill&quot;&gt;</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM seckill</span><br><span class="line">        ORDER BY create_time DESC</span><br><span class="line">        limit #&#123;offset&#125;,#&#123;limit&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="SuccessKilledDao-xml"><a href="#SuccessKilledDao-xml" class="headerlink" title="SuccessKilledDao.xml"></a>SuccessKilledDao.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;org.seckill.dao.SuccessKilledDao&quot;&gt;</span><br><span class="line">    &lt;insert id=&quot;insertSuccessKilled&quot;&gt;</span><br><span class="line">        &lt;!--如果主键冲突,报错--&gt;</span><br><span class="line">        insert ignore into success_killed (seckill_id, user_phone,state)</span><br><span class="line">        values (#&#123;seckillId&#125;,#&#123;userPhone&#125;,0);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;select id=&quot;querySuccessKilledWithSeckill&quot; resultType=&quot;SuccessKilled&quot;&gt;</span><br><span class="line">        &lt;!--根据id查询Successkilled并携带Seckill实体--&gt;</span><br><span class="line">        &lt;!--如何告诉MyBatis把结果映射到SuccessKilled同时映射SecKill属性--&gt;</span><br><span class="line">        &lt;!--最重要的原因就是:可以自由的控制SQL--&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        sk.seckill_id,</span><br><span class="line">        sk.user_phone,</span><br><span class="line">        sk.create_time,</span><br><span class="line">        sk.state,</span><br><span class="line">        s.seckill_id &quot;seckill.seckill_id&quot;,</span><br><span class="line">        s.name &quot;seckill.name&quot;,</span><br><span class="line">        s.number &quot;seckill.number&quot;,</span><br><span class="line">        s.start_time &quot;seckill.start_time&quot;,</span><br><span class="line">        s.end_time &quot;seckill.end_time&quot;,</span><br><span class="line">        s.create_time &quot;seckill.create_time&quot;</span><br><span class="line">        FROM success_killed sk</span><br><span class="line">        INNER JOIN seckill s ON sk.seckill_id=s.seckill_id</span><br><span class="line">        WHERE sk.seckill_id=#&#123;seckillId&#125; and sk.user_phone=#&#123;userPhone&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="Mybatis整合Spring理论"><a href="#Mybatis整合Spring理论" class="headerlink" title="Mybatis整合Spring理论"></a>Mybatis整合Spring理论</h2><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.更少的编码</span><br><span class="line">    只写接口,不写实现类</span><br><span class="line">    接口本身就能说明很多事情</span><br><span class="line"></span><br><span class="line">    比如:Seckill queryById(long secKillID);</span><br><span class="line">        1.参数 --long</span><br><span class="line">        2.结果集 --SecKill</span><br><span class="line">        3.行为: query</span><br><span class="line">        根据上面的就可以写SQL,配置mapper.xml就可以了.</span><br><span class="line"></span><br><span class="line">2.更少的配置</span><br><span class="line">        1.别名</span><br><span class="line">               就比如:从resultType=&quot;Scekill&quot;来说吧,本来他应该写更长的名字才对,即resultType=&quot;org.seckill.dao.SecKillDao&quot;</span><br><span class="line">               但是可以简写的原因就是,mybatis帮我们实现了包扫描,即Package Scan</span><br><span class="line">        2.配置扫描</span><br><span class="line">              1.</span><br><span class="line">               &lt;mapper resource=&quot;mapper/SeckillDao.xml&quot;/&gt;</span><br><span class="line">               &lt;mapper resource=&quot;mapper/SuccessKilledDao.xml&quot;/&gt;</span><br><span class="line">                   ......</span><br><span class="line">                当有很多这样的配置文件的话,我们会很费劲的添加,但mybatis有一个自动扫描配置文件的功能.</span><br><span class="line">              2.dao实现</span><br><span class="line">              一般就是&lt;bean id = &quot;xxxDao&quot; class =&quot;xxx.xxx.dao&quot;/&gt;的形式配置交给Spring容器管理.</span><br><span class="line">              要是有很多这样的配置文件的时候,我们就需要些很多这样的配置.</span><br><span class="line"></span><br><span class="line">              mybatis可以自动实现DAO接口,统一叫Mapper,效率非常高,</span><br><span class="line"></span><br><span class="line">              但是不利于初学者的学习.我之前做的电商项目就是DAO用mybatis自动生成的文件.</span><br><span class="line">              因为出来一堆mapper,就是dao,和一堆映射文件xxxmapper.xml.</span><br><span class="line"></span><br><span class="line">              自动注入spring容器.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.足够的灵活性</span><br><span class="line">        1.自由定制SQL语句</span><br><span class="line">        2.自由传递传参</span><br><span class="line">        3.结果集自动赋值</span><br><span class="line"></span><br><span class="line">自由的传递参数,自由的返回实体的类型</span><br></pre></td></tr></table></figure><p><strong>XML提供SQL,DAO接口Mapper.</strong></p><p>这种方式很好</p><h2 id="mybatis整合spring编码"><a href="#mybatis整合spring编码" class="headerlink" title="mybatis整合spring编码"></a>mybatis整合spring编码</h2><h2 id="spring整合mybatis官方文档"><a href="#spring整合mybatis官方文档" class="headerlink" title="spring整合mybatis官方文档"></a>spring整合mybatis官方文档</h2><p><a href="https://docs.spring.io/spring/docs/4.1.7.RELEASE/spring-framework-reference/pdf/" target="_blank" rel="noopener">Spring4.1.7官方版本</a></p><p>取它的容器头部.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">    &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">    &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;!-- more bean definitions go here --&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>连接池的配置,</p><p>c3p0连接池的配置:comboolPoolDataSource<br>除了驱动类,URL,user,password之外.还有一些私有配置</p><p><code>maxPoolSize</code>,每一个数据库中池子的最大数:,默认是15.<br><code>minPoolSize</code>,默认是3.</p><p><code>autoCommitOnClose</code></p><p>连接池的Connection调用Close的时候,本质上是把连接对象放到池子当中,放到池子的过程当中,c3p0连接池要做一些清理工作.</p><p>当close连接的时候,不要commit</p><p><code>checkoutTimeOut</code><br>当maxPoolSize连接满的时候,等待连接的间隔时间,c3p0默认是0,无线等待.</p><p><code>acquireRetryAttempts</code><br>获取连接失败重试次数</p><p><code>&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</code><br>后边的那个value值就是sqlSessionFactory的名字.</p><p>当MapperScannerConfigure启动的时候,可能会出现jdbc.properties里面的东西还没有被加载,不能拿到SQLSessionFactory里面的参数.</p><p>当用到mybatis的时候,才会去找对应的SqlSessionFactory.</p><h4 id="spring-dao-xml配置"><a href="#spring-dao-xml配置" class="headerlink" title="spring-dao.xml配置"></a>spring-dao.xml配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--配置整合mybatis过程--&gt;</span><br><span class="line">    &lt;!--1:配置数据库相关参数</span><br><span class="line">        properties的属性: $&#123;url&#125;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;!--配置连接池属性--&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">        &lt;!--2:c3p0连接池的私有属性--&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;!--关闭连接后不自动commit--&gt;</span><br><span class="line">        &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;!--获取连接超时时间--&gt;</span><br><span class="line">        &lt;!--property name=&quot;checkoutTimeout&quot; value=&quot;8000&quot;/--&gt;</span><br><span class="line">        &lt;!--当获取连接失败重试次数--&gt;</span><br><span class="line">        &lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--3.配置SQLSessionFactory对象--&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--注入数据库连接池--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;!--配置mybatis全局配置文件:mybatis-config.xml--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">        &lt;!--扫描Entity包 使用别名 org.seckill.entity.Seckill同一的转换为Seckill使用</span><br><span class="line">            有多个包的时候,可以分开写:</span><br><span class="line">            value=&quot;org.seckill.entity;org.seckill.entity2&quot;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;org.seckill.entity&quot;/&gt;</span><br><span class="line">        &lt;!--扫描SQL配置文件:mapper需要的xml文件--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--4.配置扫描DAO接口包,动态实现Dao接口,并注入到Spring容器中.</span><br><span class="line">           可以看出这个类专门是扫描mapper的,而在mybatis中mapper就相当于dao</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;!--注入SQLSessionFactory--&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">        &lt;!--给出需要扫描Dao接口包--&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;org.seckill.dao&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="spring-与junit整合"><a href="#spring-与junit整合" class="headerlink" title="spring 与junit整合"></a>spring 与junit整合</h3><ol><li><p>ctrl+shift+t创建单元测试类</p></li><li><p>RunWith(SpringJunit4ClassRunner.class)//junit启动时加载springIOC容器.</p></li><li><p>@Resource不管用,改用@Autowired</p></li><li><p>QueryAll方法测试遇到下面的<strong>绑定参数</strong>异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Parameter &apos;offset&apos; not found. Available parameters are [0, 1, param1, param2]</span><br></pre></td></tr></table></figure></li></ol><p>需要加上@Param(“实际形参”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Seckill&gt; queryAll(@Param(&quot;offset&quot;) int offset, @Param(&quot;limit&quot;) int limit);</span><br></pre></td></tr></table></figure></p><h3 id="SeckillDaoTest测试"><a href="#SeckillDaoTest测试" class="headerlink" title="SeckillDaoTest测试:"></a>SeckillDaoTest测试:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 配置Spring和junit整合,junit启动时加载springIOC容器</span><br><span class="line"> * spring-test,junit</span><br><span class="line"> */</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">//告诉junitspring配置文件的位置</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span><br><span class="line">public class SecKillDaoTest &#123;</span><br><span class="line">    //注入Dao</span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  Preparing: SELECT seckill.seckill_id,seckill.name,seckill.number,seckill.start_time,seckill.end_time,seckill.create_time</span><br><span class="line">     *  FROM seckill</span><br><span class="line">     *  WHERE seckill.seckill_id = ?;</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void queryById() throws Exception &#123;</span><br><span class="line">        long id=1000L;</span><br><span class="line">        Seckill seckill = secKillDao.queryById(id);</span><br><span class="line">        System.out.println(seckill);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void reduceNumber() throws Exception &#123;</span><br><span class="line">        Date killTime=new Date();</span><br><span class="line">        int updateNumber= secKillDao.reduceNumber(1000L, killTime);</span><br><span class="line">        System.out.println(&quot;updateNumber=&quot;+updateNumber);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void queryAll() throws Exception &#123;</span><br><span class="line">        List&lt;Seckill&gt; seckills = secKillDao.queryAll(2, 100);</span><br><span class="line">        for (Seckill seckill : seckills) &#123;</span><br><span class="line">            System.out.println(seckill);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SuccessKilledTest测试"><a href="#SuccessKilledTest测试" class="headerlink" title="SuccessKilledTest测试:"></a>SuccessKilledTest测试:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span><br><span class="line">public class SuccessKilledDaoTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SuccessKilledDao successKilledDao;</span><br><span class="line">    @Test</span><br><span class="line">    public void insertSuccessKilled() throws Exception &#123;</span><br><span class="line">        long id=1000L;</span><br><span class="line">        long phone=13784832725L;</span><br><span class="line">        int updateSuccessedKilled = successKilledDao.insertSuccessKilled(id, phone);</span><br><span class="line">        System.out.println(updateSuccessedKilled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Preparing:</span><br><span class="line">     * SELECT sk.seckill_id, sk.create_time, sk.state, sk.user_phone, s.seckill_id &quot;seckill.seckill_id&quot;, s.name &quot;seckill_name&quot;, s.number &quot;seckill_number&quot;, s.start_time &quot;seckill_start_time&quot;, s.end_time &quot;seckill_end_time&quot;, s.create_time &quot;seckill_create_time&quot;</span><br><span class="line">     * FROM success_killed sk</span><br><span class="line">     * INNER JOIN seckill s ON sk.seckill_id = s.seckill_id</span><br><span class="line">     * WHERE sk.seckill_id = ? AND sk.user_phone = ?;</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void querySuccessKilledWithSeckill() throws Exception &#123;</span><br><span class="line">        long id=1001L;</span><br><span class="line">        long phone=15733207536L;</span><br><span class="line">        SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(id,phone);</span><br><span class="line">        System.out.println(successKilled);</span><br><span class="line">        System.out.println(successKilled.getSeckill());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库设计编码&quot;&gt;&lt;a href=&quot;#数据库设计编码&quot; class=&quot;headerlink&quot; title=&quot;数据库设计编码&quot;&gt;&lt;/a&gt;数据库设计编码&lt;/h2&gt;&lt;p&gt;数据库设计工作:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="SSM" scheme="luoyupiaoshang.club/tags/SSM/"/>
    
  </entry>
  
</feed>
