<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoveMorgana&#39;s Blog</title>
  
  <subtitle>世上无难事,只怕有心人.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="luoyupiaoshang.club/"/>
  <updated>2018-04-30T05:58:17.658Z</updated>
  <id>luoyupiaoshang.club/</id>
  
  <author>
    <name>LiGang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vimeo动画赏析</title>
    <link href="luoyupiaoshang.club/2018/04/30/vimeo%E8%A7%86%E9%A2%91%E8%B5%8F%E6%9E%90/"/>
    <id>luoyupiaoshang.club/2018/04/30/vimeo视频赏析/</id>
    <published>2018-04-29T16:00:00.000Z</published>
    <updated>2018-04-30T05:58:17.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画赏析"><a href="#动画赏析" class="headerlink" title="动画赏析"></a>动画赏析</h2><p><img src="https://i.vimeocdn.com/video/693679142.jpg?mw=1200&amp;mh=563" alt=""></p><p>视频引用自<strong>vimeo平台 blue zoo团队</strong>，如有侵权，你可以跨越太平洋来找我，一顿麻辣烫。</p><h2 id="视频欣赏"><a href="#视频欣赏" class="headerlink" title="视频欣赏"></a>视频欣赏</h2><iframe height="400" width="600" src="http://player.youku.com/embed/XMzU3NDYxOTc4MA" frameborder="0" allowfullscreen></iframe><p>纵观一个人的一生，分为下面几个时间段。</p><h3 id="少年时期"><a href="#少年时期" class="headerlink" title="少年时期"></a>少年时期</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-7081e167f5279786.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="青年时期"><a href="#青年时期" class="headerlink" title="青年时期"></a>青年时期</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-b9a467ada28b28c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="恋爱时期"><a href="#恋爱时期" class="headerlink" title="恋爱时期"></a>恋爱时期</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-21c692e79fbbdda5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="困难时期"><a href="#困难时期" class="headerlink" title="困难时期"></a>困难时期</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-3cceeec7b2c1acf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/7505161-be9d0b835adbe6e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="幸福时刻"><a href="#幸福时刻" class="headerlink" title="幸福时刻"></a>幸福时刻</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-77b44c836510aec0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="有了儿子"><a href="#有了儿子" class="headerlink" title="有了儿子"></a>有了儿子</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-0225397c987765d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="儿子远游"><a href="#儿子远游" class="headerlink" title="儿子远游"></a>儿子远游</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-70676591b9038c1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/7505161-f80e17733090d508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="想念儿子"><a href="#想念儿子" class="headerlink" title="想念儿子"></a>想念儿子</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-1744a237fd8278e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="蓦然回首，昔人往矣"><a href="#蓦然回首，昔人往矣" class="headerlink" title="蓦然回首，昔人往矣"></a>蓦然回首，昔人往矣</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-63afd846adf6c7ca.gif?imageMogr2/auto-orient/strip" alt=""></p><h3 id="忆往昔"><a href="#忆往昔" class="headerlink" title="忆往昔"></a>忆往昔</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-219ef2e9013e571e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="回到与她遇见的地方"><a href="#回到与她遇见的地方" class="headerlink" title="回到与她遇见的地方"></a>回到与她遇见的地方</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-e1ae80c30303ceb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="重走自己年轻时候走过的道路"><a href="#重走自己年轻时候走过的道路" class="headerlink" title="重走自己年轻时候走过的道路"></a>重走自己年轻时候走过的道路</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-d5b41006e0b4ad5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="叶落归根"><a href="#叶落归根" class="headerlink" title="叶落归根"></a>叶落归根</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-054be7980c9af3b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="安享晚年"><a href="#安享晚年" class="headerlink" title="安享晚年"></a>安享晚年</h3><p><img src="https://upload-images.jianshu.io/upload_images/7505161-daf1f34194a77c6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>一个人的一生，很短暂，如果不做自己想做的事，才是最大的遗憾！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画赏析&quot;&gt;&lt;a href=&quot;#动画赏析&quot; class=&quot;headerlink&quot; title=&quot;动画赏析&quot;&gt;&lt;/a&gt;动画赏析&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.vimeocdn.com/video/693679142.jpg?mw=1200&amp;a
      
    
    </summary>
    
      <category term="blue zoo" scheme="luoyupiaoshang.club/categories/blue-zoo/"/>
    
    
      <category term="vimeo" scheme="luoyupiaoshang.club/tags/vimeo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript(5)之编程思想&amp;创建对象</title>
    <link href="luoyupiaoshang.club/2018/03/25/js_05/"/>
    <id>luoyupiaoshang.club/2018/03/25/js_05/</id>
    <published>2018-03-25T02:16:47.000Z</published>
    <updated>2018-06-02T11:02:11.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>输入一个数判断是否是质数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> content = prompt(<span class="string">'请输入口令'</span>);</span><br><span class="line">    <span class="comment">//用户如果没有输入内容</span></span><br><span class="line">    <span class="keyword">if</span> (content == <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'您输入有误!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//用户输入内容</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(content);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(num)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"您输入的是数字!下面校验是否是质数"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(f(num));</span><br><span class="line">            <span class="comment">//判断该函数是不是质数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'您输入的不是数字!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">编程思想: 经验</span><br><span class="line">面向过程: 具体过程</span><br><span class="line">面向对象: 根据需求找对象,所有的事都让对象做,注重结果.</span><br><span class="line"></span><br><span class="line">面向对象的特性: 封装.继承.多态(抽象性)</span><br><span class="line"></span><br><span class="line">js不是面向对象的语言,但是可以模拟面向对象的思想.</span><br><span class="line">js是一门基于对象的语言.</span><br><span class="line"></span><br><span class="line">分析对象: 特征和行为.</span><br><span class="line"></span><br><span class="line">对象:有特征和行为,具体指的某一事物.</span><br><span class="line"></span><br><span class="line">对象:有属性和方法,具体特指的某个事物.</span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>1.创建对象的三种方式.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>调用系统的构造函数创建对象.</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">Object</span>是系统的构造函数.</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>自定义构造函数创建对象(结合第一种和需求通过工厂模式创建对象)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>字面量的方式创建对象</span><br></pre></td></tr></table></figure></p><p>实例如下:</p><h3 id="中规中矩的一种"><a href="#中规中矩的一种" class="headerlink" title="中规中矩的一种"></a>中规中矩的一种</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象有特征---属性和行为---方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加属性---添加格式:对象.名字 = 值;</span></span><br><span class="line">obj.name = <span class="string">'hello'</span>;</span><br><span class="line">obj.age = <span class="number">35</span>;</span><br><span class="line">obj.sex = <span class="string">'女'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加方法--- 对象.名字 = 函数;</span></span><br><span class="line">obj.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'快乐风男!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">obj.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打羽毛球!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">obj.play();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断obj是否是Object类型 </span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="工厂模式创建对象"><a href="#工厂模式创建对象" class="headerlink" title="工厂模式创建对象"></a>工厂模式创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式创建</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factoryObject</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    <span class="comment">//添加方法</span></span><br><span class="line">    obj.say =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'今天晚上'</span>+age +<span class="string">'岁的'</span>+name +<span class="string">'要玩lol!'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象-实例化一个对象,并初始化.</span></span><br><span class="line"><span class="keyword">var</span> p1= factoryObject(<span class="string">'xiaoming'</span>,<span class="number">14</span>);</span><br><span class="line">p1.say();</span><br></pre></td></tr></table></figure><h3 id="自定义构造函数创建对象"><a href="#自定义构造函数创建对象" class="headerlink" title="自定义构造函数创建对象"></a>自定义构造函数创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数首字母大写.</span></span><br><span class="line"><span class="comment">//自定义构造函数创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name =name;</span><br><span class="line">    <span class="keyword">this</span>.age =age;</span><br><span class="line">    <span class="keyword">this</span>.say =<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'i am '</span>+name+<span class="string">',今年'</span>+age+<span class="string">'岁'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p= <span class="keyword">new</span> Person(<span class="string">'dongdong'</span>,<span class="number">12</span>);</span><br><span class="line">p.say();</span><br><span class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure><h3 id="自定义构造函数创建对象做的事"><a href="#自定义构造函数创建对象做的事" class="headerlink" title="自定义构造函数创建对象做的事"></a>自定义构造函数创建对象做的事</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.在内存中开辟(申请一块空间),存储创建的新的对象.</span><br><span class="line">2.把this设置为当前的对象.</span><br><span class="line">3.设置对象的属性和方法的值.</span><br><span class="line">4.把this这个对象返回.</span><br></pre></td></tr></table></figure><h2 id="字面量的方式创建对象"><a href="#字面量的方式创建对象" class="headerlink" title="字面量的方式创建对象"></a>字面量的方式创建对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ob = &#123;&#125;;<span class="comment">//空对象</span></span><br><span class="line">   ob.name = <span class="string">'xiaobai'</span>;</span><br><span class="line">   ob.age = <span class="number">18</span>;</span><br><span class="line">   ob.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'我是'</span> + <span class="keyword">this</span>.name + <span class="string">',今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁'</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   ob.say();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ajax 的常见方式.</span></span><br><span class="line">   <span class="keyword">var</span> ob2 = &#123;</span><br><span class="line">       name: <span class="string">"xiaoming"</span>,</span><br><span class="line">       age: <span class="number">20</span>,</span><br><span class="line">       say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'我是'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">       &#125;,</span><br><span class="line">       eat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'吃什么哪?'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   ob2.say();</span><br><span class="line">   ob2.eat();</span><br></pre></td></tr></table></figure><h3 id="对象小结"><a href="#对象小结" class="headerlink" title="对象小结"></a>对象小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">字面量创建对象的缺陷: 一次向的对象.</span><br><span class="line">var obj =&#123;</span><br><span class="line">    name : &apos;xiaoming&apos;,</span><br><span class="line">    age : 16,</span><br><span class="line">    sex : &apos;女&apos;</span><br><span class="line">&#125;;</span><br><span class="line">obj.name = &apos;xiaohua&apos;;</span><br><span class="line">console.log(obj.name); // 会覆盖之前的名字.</span><br><span class="line"></span><br><span class="line">js是一门解释性语言,是一门脚本语言.是一门弱类型语言,声明变量都用var.是一门基于对象的余元,是一门动态类型的语言.</span><br><span class="line"></span><br><span class="line">代码(变量)只有执行到相应位置的时候,才知道这个变量中到底存储的是什么,如果是对象,就有对象的属性和方法.</span><br></pre></td></tr></table></figure><h2 id="设置和获取属性的其他写法"><a href="#设置和获取属性的其他写法" class="headerlink" title="设置和获取属性的其他写法"></a>设置和获取属性的其他写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name=name;</span><br><span class="line">     <span class="keyword">this</span>.age=age;</span><br><span class="line">     <span class="keyword">this</span>.play=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"喜欢玩游戏"</span>);</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> obj=<span class="keyword">new</span> Person(<span class="string">"卡卡西"</span>,<span class="number">20</span>);</span><br><span class="line">   <span class="comment">//obj.name="佐助";</span></span><br><span class="line"></span><br><span class="line">   obj[<span class="string">"name"</span>]=<span class="string">"佐助"</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(obj[<span class="string">"name"</span>]);<span class="comment">//获取属性</span></span><br><span class="line">   obj.play();<span class="comment">//执行方法</span></span><br><span class="line">   obj[<span class="string">"play"</span>]();<span class="comment">//执行方法</span></span><br></pre></td></tr></table></figure><h2 id="JSON格式的数据"><a href="#JSON格式的数据" class="headerlink" title="JSON格式的数据"></a>JSON格式的数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象:有属性和方法,特指的某个事物.</span></span><br><span class="line"><span class="comment">//对象: 一组无序属性的集合的键值对,属性的值可以是任意的类型.</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name=name;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.age=age;</span><br><span class="line">         <span class="keyword">this</span>.name=name;</span><br><span class="line">         <span class="keyword">this</span>.sex=<span class="literal">true</span>;</span><br><span class="line">         <span class="keyword">this</span>.dog=&#123;&#125;;</span><br><span class="line">         <span class="keyword">this</span>.play=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"喜欢玩游戏"</span>);</span><br><span class="line">         &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">var</span> sex=<span class="literal">false</span>;<span class="comment">//男</span></span><br><span class="line">       <span class="built_in">console</span>.log(sex?<span class="string">"男"</span>:<span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//json格式的数据: 键值对</span></span><br><span class="line"><span class="comment">//json也是一个对象,数据都是成对的.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json =&#123;</span><br><span class="line">    name : <span class="string">'xiaoming'</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//key 是一个变量,这个变量中存储的是该对象的所有属性的名字.</span></span><br><span class="line"><span class="comment">//这个就是用for-in 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> json)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'key :'</span>+key +<span class="string">','</span>+<span class="string">'value: '</span>+json[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单类型和复杂类型"><a href="#简单类型和复杂类型" class="headerlink" title="简单类型和复杂类型"></a>简单类型和复杂类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">原始数据类型: number,string,boolean,undefined,null,object</span><br><span class="line">基本类型(简单类型),值类型: number,string,boolean</span><br><span class="line">复杂类型(引用类型):object.</span><br><span class="line"></span><br><span class="line">值类型的值在哪一块空间中存储?</span><br><span class="line">栈中存储.</span><br><span class="line"></span><br><span class="line">引用类型的值在哪一块空间中存储?</span><br><span class="line">对象在堆上存储,地址在栈上存储.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var num =10;//值传递,值在栈上.</span><br><span class="line"></span><br><span class="line">var obj =&#123;&#125;;//复杂类型,对象在堆,地址(引用)在栈.</span><br><span class="line"></span><br><span class="line">值类型之间传递的是值.</span><br><span class="line"></span><br><span class="line">引用类型之间传递的是地址(引用).</span><br><span class="line"></span><br><span class="line">值类型作为函数的参数,传递的是值.</span><br><span class="line"></span><br><span class="line">引用类型作为函数的参数,传递的是地址.</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">    person.name = <span class="string">"ls"</span>;</span><br><span class="line">    person = <span class="keyword">new</span> Person(<span class="string">"aa"</span>,<span class="number">18</span>,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"zs"</span>,<span class="number">18</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);<span class="comment">//zs</span></span><br><span class="line">f1(p);<span class="comment">//name会覆盖的.</span></span><br><span class="line"><span class="built_in">console</span>.log(p.name);<span class="comment">//ls</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">js里面有3中对象:</span><br><span class="line">1.内置对象: js系统自带的独享</span><br><span class="line">2.自定义对象: 自己定义的构造函数创建的对象.</span><br><span class="line">3.浏览器对象: BOM</span><br><span class="line"></span><br><span class="line">内置对象包括: Math,Date,String,Array,Object </span><br><span class="line">验证变阿玲不是对象: instanceof</span><br></pre></td></tr></table></figure><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">实例对象:通过构造函数创建出来,实例化的对象.</span><br><span class="line">静态对象:不需要创建,直接就是一个对象,方法(静态方法).</span><br><span class="line">直接通过这个对象名字调用.</span><br><span class="line"></span><br><span class="line">实例方法必须通过实例对象调用.</span><br><span class="line">静态方法必须通过大写的对象调用.</span><br><span class="line"></span><br><span class="line">Math.PI ----π</span><br><span class="line">Math.E---常数的底数</span><br><span class="line">Math.abs(值)---绝对值</span><br><span class="line">Math.cell(值)---向上取整</span><br><span class="line">Math.floor(值)---向下取整</span><br><span class="line">Math.max()---求最大值</span><br><span class="line">Math.min()---求最小值</span><br><span class="line">Math.pow(4,3)---求某个数的几次幂.</span><br><span class="line">&lt;ath.sqrt()---开平方</span><br><span class="line">console.log(Math.pow(4,3));//4的3次幂,也就是64.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;复习&quot;&gt;&lt;a href=&quot;#复习&quot; class=&quot;headerlink&quot; title=&quot;复习&quot;&gt;&lt;/a&gt;复习&lt;/h2&gt;&lt;p&gt;输入一个数判断是否是质数&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="js" scheme="luoyupiaoshang.club/categories/js/"/>
    
    
      <category term="js" scheme="luoyupiaoshang.club/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript(4)之函数练习&amp;作用域&amp;预解析</title>
    <link href="luoyupiaoshang.club/2018/03/25/js_04/"/>
    <id>luoyupiaoshang.club/2018/03/25/js_04/</id>
    <published>2018-03-25T02:16:47.000Z</published>
    <updated>2018-06-02T02:14:49.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数练习"><a href="#函数练习" class="headerlink" title="函数练习"></a>函数练习</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求2个数中的最大值:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参和实参</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">10</span>;</span><br><span class="line">num2 = <span class="number">20</span>;<span class="comment">//函数外边的num1 和 函数里面的形参num1不是同一个变量.</span></span><br><span class="line"><span class="built_in">console</span>.log(f2(num1, num2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//求3个数中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? (x &gt; z ? x : z) : (y &gt; z ? y : z);</span><br><span class="line">    <span class="comment">//如果 x &gt; y时,就要x 和 z比较.</span></span><br><span class="line">    <span class="comment">//相反的是此时如果是y大,那么y 就要和z 比较.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">1</span>, <span class="number">32</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个数是否是素数: 1和自身整除的数是整数.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> + <span class="string">'你不是素数!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> + <span class="string">' 你是素数啊!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f3(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求一组数字中的最大值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2222</span>, <span class="number">99</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    max = arr[<span class="number">0</span>];<span class="comment">// 假设这个变量存储的是最大值.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">            max = arr[i] <span class="comment">// 最大值都比它小,所以一直找最大值.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f4(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最小值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f5</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    min = arr[<span class="number">0</span>];<span class="comment">// 假设这个变量存储的是最小值.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) &#123;</span><br><span class="line">            max = arr[i] <span class="comment">// 最小值都比它大,所以一直找最小值.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f5(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求一组数字的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f6</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f6(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求一组数组的最大值和最小值还有总和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f7</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最大值是: '</span> + max);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最小值是: '</span> + min);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"总和是: "</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f7(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数实现数组反转</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f8</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'原来的数组是: '</span> + arr);</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 确定比较的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[arr.length - <span class="number">1</span> - i]; <span class="comment">// 确定锁定数组元素索引,确定对应交换的数组元素的索引.</span></span><br><span class="line">        arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'现在的数组是: '</span> + arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f8(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现冒泡排序,我们是大的数往后走.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f9</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//确定比较的轮数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 控制每一轮的比较次数.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f9(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求数字的阶乘</span></span><br><span class="line"><span class="comment">// 6! = 6 * 5 * 4 * 3 * 2 * 1;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f10</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 遍历的次数是n-1次.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        result *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    <span class="comment">//console.log(result);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//f10(5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f11</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        sum += f10(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f11(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="comment">//1,1,2,3,5,8,13,21,34,55,89,144...</span></span><br><span class="line"><span class="comment">// 1+1 1+2 2+3 3+5</span></span><br><span class="line"><span class="comment">// 2   3    5   8</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sum = num1 + num2; <span class="comment">// 计算和之后.</span></span><br><span class="line">        num1 = num2;<span class="comment">//  将第二个位置的数作为第一个数.</span></span><br><span class="line">        num2 = sum;<span class="comment">// 二者之和作为第二个位置的数.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'索引为'</span> + (n - <span class="number">1</span>) + <span class="string">'的斐波那契数列的值为 '</span> + sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getFib(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断年是不是闰年</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isLeapYear(<span class="built_in">parseInt</span>(<span class="number">2018</span>)));</span><br></pre></td></tr></table></figure><h2 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算n个数字的和</span></span><br><span class="line"><span class="comment">//定义一个函数,如果不确定用户是否传入了参数,或者说不知道用户传了几个参数,没办法计算,</span></span><br><span class="line"><span class="comment">//但是如果在函数中知道了参数的个数,也知道了，每个参数的值.可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取的是函数在调用的时候,传入了几个参数.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">    <span class="comment">//使用arguments对象可以获取传入的每个参数的值.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br></pre></td></tr></table></figure><h2 id="函数的其他定义方式"><a href="#函数的其他定义方式" class="headerlink" title="函数的其他定义方式"></a>函数的其他定义方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">常规的有:</span><br><span class="line"></span><br><span class="line">命名函数: 函数有名字.</span><br><span class="line"></span><br><span class="line">匿名函数: 函数没有名字.</span><br><span class="line"></span><br><span class="line">函数表达式:</span><br><span class="line"></span><br><span class="line">把一个函数给一个变量,此时形成了函数表达式.</span><br><span class="line"></span><br><span class="line">var 变量 = 匿名函数;</span><br><span class="line"></span><br><span class="line">eg: 跟java里面的函数一样.</span><br><span class="line"></span><br><span class="line">var f1 = function()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">如果是函数表达式,那么此时前面的变量中存储的就是一个函数.</span><br><span class="line">而这个变量就相当于是一个函数,就可以直接加小括号调用了.</span><br><span class="line"></span><br><span class="line">eg: f1();</span><br><span class="line"></span><br><span class="line">注意: 函数表达式后面,赋值结束,要加分号.</span><br><span class="line"></span><br><span class="line">函数定义:</span><br><span class="line"></span><br><span class="line">1.函数声明--函数定义</span><br><span class="line">function 函数名()&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.匿名函数</span><br><span class="line"></span><br><span class="line">var f1 = function()&#123;console.log(&apos;hello world!&apos;)&#125;;</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line">3. 函数的自调用,没有名字. 也就是声明的同时,直接调用.</span><br><span class="line">(function()&#123;console.log(&apos;hello world&apos;);&#125;)();</span><br><span class="line">或者</span><br><span class="line">(function()&#123;console.log(&apos;hello world&apos;)&#125;)();</span><br></pre></td></tr></table></figure><p>实例展示:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.函数声明</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"lpl"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br><span class="line"><span class="comment">//2.函数表达式</span></span><br><span class="line"> <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"皇族永不言弃!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    f2();</span><br><span class="line"><span class="comment">//3.函数自调用</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"EDG永不团灭!"</span>);</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="函数也是一种数据类型"><a href="#函数也是一种数据类型" class="headerlink" title="函数也是一种数据类型"></a>函数也是一种数据类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'RW'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f1);</span><br><span class="line"><span class="comment">//函数是有数据类型,数据类型:是function 类型的</span></span><br></pre></td></tr></table></figure><h3 id="函数也可以作为参数使用"><a href="#函数也可以作为参数使用" class="headerlink" title="函数也可以作为参数使用"></a>函数也可以作为参数使用</h3><p>函数可以作为参数使用,如果一个函数作为参数.那么我么说这个参数(函数)可以叫做<strong>回调函数</strong>.</p><p>只要是看到一个函数作为参数使用了,那么它就是回调函数,</p><p>eg:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'xiaohua,how are you?'</span>);</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i am fine,Thanks!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">f1(sayHello);<span class="comment">//此时sayHello()被当做参数使用,所以是一个回调函数.</span></span><br></pre></td></tr></table></figure></p><h3 id="函数当做返回值使用"><a href="#函数当做返回值使用" class="headerlink" title="函数当做返回值使用"></a>函数当做返回值使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'舍身薄凉客'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ff = f();<span class="comment">// 此时ff就相当于一个函数.</span></span><br><span class="line">ff();</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域: 使用范围.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">全局变量: 声明的变量是使用var声明的,那么这个变量就是全局变量.</span><br><span class="line">         全局变量可以在任何页面的任何位置使用.</span><br><span class="line"></span><br><span class="line">除了函数以外,其他的任何位置定义的变量都是全局变量.</span><br><span class="line"></span><br><span class="line">局部变量: 在函数内部定义的变量是局部变量,外面不能使用.</span><br><span class="line"></span><br><span class="line">全局变量: 如果页面不关闭,那么就不会释放.就会占空间,消耗内存.</span><br><span class="line"></span><br><span class="line">全局作用域: 全局变量的使用范围.</span><br><span class="line"></span><br><span class="line">局部作用域: 局部变量的使用范围.</span><br><span class="line"></span><br><span class="line">块级作用域: 一堆大括号就可以看成是一块,</span><br><span class="line">          在这块区域中定义的变量,只能在这个区域中使用,</span><br><span class="line">          但是在js中在这个块级作用域中定义的变量,外面也能使用;</span><br><span class="line"></span><br><span class="line">js没有块级作用域,只有函数除外.</span><br><span class="line"></span><br><span class="line">隐式全局变量: 声明的变量没有var,就叫做隐式全局变量.</span><br><span class="line"></span><br><span class="line">全局变量是不能被删除的,隐式全局变量是可以被删除的.</span><br><span class="line"></span><br><span class="line">定义变量使用var是不会被删除的,没有var是可以删除的.</span><br></pre></td></tr></table></figure><p>eg:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    number = <span class="number">1000</span>;<span class="comment">//这是隐式全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>; <span class="comment">// 全局变量不能删除</span></span><br><span class="line">num2 = <span class="number">20</span>; <span class="comment">//隐式全局变量可以删除</span></span><br><span class="line"><span class="keyword">delete</span> num1;</span><br><span class="line"><span class="keyword">delete</span> num2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num1); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(num1 + <span class="number">10</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num2); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num=<span class="number">30</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> num=<span class="number">50</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">        f3();</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line">f1();<span class="comment">// 一层的一层进入</span></span><br></pre></td></tr></table></figure><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">预解析: 提前解析代码.</span><br><span class="line"></span><br><span class="line">预解析: 就是在解析代码之前.</span><br><span class="line">把变量的声明提前了---也就是提前到当前所在的作用域的最上面.</span><br><span class="line">函数的声明也会被提前---会被提前到当前所在作用域的最上面.</span><br></pre></td></tr></table></figure><p>如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    f1();//先调用f1()函数,再往下执行</span></span><br><span class="line">    <span class="comment">// 把变量的声明提前了</span></span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'num: '</span>+num);</span><br><span class="line">    num=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"哈"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">f1(); <span class="comment">// 从上至下执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用的时候,把会函数的声明提升到作用域的上面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//f1();undefined</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;<span class="comment">//这个变量的声明会提升到变量使用之前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="comment">//var num=10;</span></span><br><span class="line">&#125;</span><br><span class="line">f1();<span class="comment">//20</span></span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在预解析中,变量的提升,只会在当前作用域中提升,提前到当前作用域的最上面.</span><br><span class="line">2.函数中的变量只会提前到函数的作用域的最前面.不会出去.</span><br><span class="line">3.预解析会分段(对对的script标签中函数重名,预解析的时候不会冲突.)</span><br></pre></td></tr></table></figure><p>对号入座<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">abc();</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'aaaaa'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//打印这个函数</span></span><br><span class="line"></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a = <span class="number">18</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b;</span><br><span class="line">        <span class="keyword">var</span> a;</span><br><span class="line">        b = <span class="number">9</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line">        <span class="built_in">console</span>.log(b);<span class="comment">//9</span></span><br><span class="line">        a = <span class="string">'123'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br></pre></td></tr></table></figure></p><p>下面这个要特别注意:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;<span class="comment">//局部变量</span></span><br><span class="line">    a=<span class="number">9</span>;</span><br><span class="line">    <span class="comment">//隐式全局变量</span></span><br><span class="line">    b=<span class="number">9</span>;</span><br><span class="line">    c=<span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//9</span></span><br><span class="line">    <span class="built_in">console</span>.log(b);<span class="comment">//9</span></span><br><span class="line">    <span class="built_in">console</span>.log(c);<span class="comment">//9</span></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//  9</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">57</span>+<span class="number">1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f1();<span class="comment">//-----报错,f1没有定义.</span></span><br><span class="line"><span class="keyword">var</span> f1=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a: '</span>+a);</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">f2();<span class="comment">//NULL函数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数练习&quot;&gt;&lt;a href=&quot;#函数练习&quot; class=&quot;headerlink&quot; title=&quot;函数练习&quot;&gt;&lt;/a&gt;函数练习&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="js" scheme="luoyupiaoshang.club/categories/js/"/>
    
    
      <category term="js" scheme="luoyupiaoshang.club/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript(3)之数组&amp;排序&amp;函数</title>
    <link href="luoyupiaoshang.club/2018/03/24/js_03/"/>
    <id>luoyupiaoshang.club/2018/03/24/js_03/</id>
    <published>2018-03-24T02:16:47.000Z</published>
    <updated>2018-06-01T03:23:28.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Break关键字"><a href="#Break关键字" class="headerlink" title="Break关键字"></a>Break关键字</h2><p>break关键字:如果在循环中使用,遇到了break,则立刻跳出当前所在的循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行完毕之后,跳出程序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">100</span>;i &lt;=<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">7</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Continue关键字"><a href="#Continue关键字" class="headerlink" title="Continue关键字"></a>Continue关键字</h2><p>continue:在循环中如果遇到continue关键字,直接开始下一次循环.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>( i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    console.log(<span class="string">'re:make'</span>)</span><br><span class="line">   <span class="regexp">//</span> <span class="keyword">continue</span>; <span class="regexp">//</span>这个会造成死循环</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例:求100-200之间所有的奇数的和（用continue）</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">    i ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i =<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">3</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//跳过个位是3的数字.</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum = sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">13</span> % <span class="number">10</span> == <span class="number">3</span>) <span class="comment">//测试个位为3的数字整除</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组:一组有序的数据.<br>数组的作用:可以一次性存储多个数据.</p><p>数组的定义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">1.通过构造函数创建数组.</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">var 数组名=new Array();</span><br><span class="line">var array = new Array();//定义了一个数组.</span><br><span class="line"></span><br><span class="line">数组的名字如果直接输出,那么直接就可以把数组中的数据显示出来,如果没有数据,就看不到数据.</span><br><span class="line"></span><br><span class="line">var 数组名 = new Array(长度);</span><br><span class="line"></span><br><span class="line">如果数组中没有数据,但是有长度,数组中的每个值都是undefined.</span><br><span class="line"></span><br><span class="line">构造函数的方式创建数组的时候,如果在Array(一个数字),数组的长度(也就是数元素的个数)</span><br><span class="line"></span><br><span class="line">如果在Array(多个值);这个数组中就有数据了,数组的长度就是这些数据的个数.</span><br><span class="line"></span><br><span class="line">2.通过字面量的方式创建数组.</span><br><span class="line"></span><br><span class="line">var 数组名= [];//空数组</span><br><span class="line"></span><br><span class="line">var array=[];</span><br><span class="line"></span><br><span class="line">无论是构造函数的方式还是字面量的方式,定义的数组,如果有长度,那么默认是undefined.</span><br><span class="line"></span><br><span class="line">数组:一组有序的数组.</span><br><span class="line"></span><br><span class="line">数组元素:数组中存储的每个数据.</span><br><span class="line"></span><br><span class="line">数组长度: 就是数组的元素的个数.</span><br><span class="line"></span><br><span class="line">数组索引: 存储或者访问数组中的数据.下标从0开始,直到array.length-1结束.</span><br><span class="line"></span><br><span class="line">字面上就是数组长度 = 数组索引 + 1</span><br><span class="line"></span><br><span class="line">设置数组中某个位置的值:</span><br><span class="line">数组名[下标] = 值;//会覆盖之前的值.</span><br><span class="line"></span><br><span class="line">如何获取数组中某个位置的值:</span><br><span class="line"></span><br><span class="line">var result=数组名[下标];</span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">通过构造函数的方式定义一个数组:</span><br><span class="line"></span><br><span class="line">var array = new Array(5); //没有数据,空数组</span><br><span class="line">console.log(array);</span><br><span class="line">alert(array);</span><br><span class="line"></span><br><span class="line">就是一个数组---字面量的方式</span><br><span class="line"></span><br><span class="line">var arr =[];</span><br><span class="line">console.log(arr);</span><br><span class="line"></span><br><span class="line">var arr = new Array();//定义一个空数组</span><br><span class="line">var arr = new Array(5);//定义了一个数组长度为5的数组,数组中的每个元素是undefined.</span><br><span class="line"></span><br><span class="line">var arr = [10,20,30,40,50]</span><br><span class="line">console.log(arr[4]);//对应索引是4的元素的值:50</span><br></pre></td></tr></table></figure></p><h3 id="数组的注意事项"><a href="#数组的注意事项" class="headerlink" title="数组的注意事项"></a>数组的注意事项</h3><p>数组中存储的数据类型可以不一样的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的长度是不是可以改变呢?</span></span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="comment">//通过索引来设置数组中的元素的值</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);<span class="comment">//2</span></span><br><span class="line"><span class="comment">//获取元素的值,通过索引的方式</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * 数组:存储一组有序的数据</span></span><br><span class="line"><span class="comment">  * 数组的作用:一次性存储多个数据</span></span><br><span class="line"><span class="comment">  * 数组的定义方式:</span></span><br><span class="line"><span class="comment">  * 1.构造函数定义数组: var 数组名=new Array();</span></span><br><span class="line"><span class="comment">  * 2.字面量方式定义数组: var 数组名=[];</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * var 数组名=new Array();空数组</span></span><br><span class="line"><span class="comment">  * var 数组名=new Array(值);数组定义了,有长度</span></span><br><span class="line"><span class="comment">  * var 数组名=new Array(值1,值2,值3....);定义数组并且有多个数据</span></span><br><span class="line"><span class="comment">  * var 数组名=[];空数组</span></span><br><span class="line"><span class="comment">  * var 数组名=[值1,值2,值3];有三个数据</span></span><br><span class="line"><span class="comment">  * 数组元素:就是数组中存储的数据</span></span><br><span class="line"><span class="comment">  * 数组长度:就是数组中元素的个数</span></span><br><span class="line"><span class="comment">  * 数组索引(下标):从0开始,到数组的长度减1结束</span></span><br><span class="line"><span class="comment">  * 通过下标设置数组的元素值: 数组名[索引]=值</span></span><br><span class="line"><span class="comment">  * 通过下标访问数组的元素值: 数组名[索引]</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//空数组</span></span><br><span class="line">  <span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);<span class="comment">//长度为5的数组,每个数据的值是undefined</span></span><br><span class="line">  <span class="keyword">var</span> arr3=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//长度为5分数组,</span></span><br><span class="line">  <span class="keyword">var</span> arr4=[];<span class="comment">//空数组</span></span><br><span class="line">  <span class="keyword">var</span> arr5=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//长度为3的数组</span></span><br><span class="line">  <span class="keyword">var</span> arr6=[<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>,<span class="number">1</span>,<span class="literal">true</span>];<span class="comment">//数组中元素的值的类型可以不一样</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr7=[];</span><br><span class="line">  <span class="comment">//设置数组的元素的值</span></span><br><span class="line">  arr7[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">  arr7[<span class="number">1</span>]=<span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="for循环遍历数组"><a href="#for循环遍历数组" class="headerlink" title="for循环遍历数组"></a>for循环遍历数组</h2><p>把握住索引index = arr.length - 1就可以了.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">31</span>,<span class="number">21</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求数组中所有的值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">31</span>,<span class="number">21</span>];</span><br><span class="line"><span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    sum+= arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组中所有元素的平均值.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">31</span>,<span class="number">21</span>];</span><br><span class="line"><span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    sum+= arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum / arr.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组中所有元素中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">31</span>,<span class="number">21</span>];</span><br><span class="line"><span class="keyword">var</span> max =arr[<span class="number">0</span>];<span class="comment">//假设这个数是最大值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="comment">//判断这个变量中的值和数组中的每个元素的值是不是最大值</span></span><br><span class="line">    <span class="keyword">if</span>(max &lt; arr[i])&#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>];</span><br><span class="line"><span class="comment">//假设max变量中存储的是最大值</span></span><br><span class="line"><span class="keyword">var</span> max=<span class="built_in">Number</span>.MIN_VALUE;<span class="comment">//假设变量是最大的,但是实际上存储的是最小的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr3.length;i++)&#123;</span><br><span class="line"> <span class="comment">//判断这个变量的值和数组中每个元素的值是不是最大值</span></span><br><span class="line"> <span class="keyword">if</span>(max&lt;arr3[i])&#123;</span><br><span class="line">   max=arr3[i];</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"最大值:"</span>+max);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3=[<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=arr3.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr3[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组中每个元素用|拼接到一起产生一个字符串并输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 思想就像计算总和一样,用个空串将其连接起来.</span></span><br><span class="line"><span class="keyword">var</span> names=[<span class="string">"卡卡西"</span>,<span class="string">"佐助"</span>,<span class="string">"鸣人"</span>,<span class="string">"大蛇丸"</span>,<span class="string">"雏田"</span>,<span class="string">"小苏"</span>,<span class="string">"凤姐"</span>,<span class="string">"黑崎一护"</span>];</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; names.length ; i++) &#123;</span><br><span class="line">    <span class="comment">//str+=names[i]+"|";</span></span><br><span class="line">    str+=<span class="string">"|"</span>+names[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console.log(str+names[names.length-1])</span></span><br><span class="line"><span class="built_in">console</span>.log(names[<span class="number">0</span>]+str)</span><br><span class="line"></span><br><span class="line"><span class="comment">//去掉数组中重复的0，把其他的数据放在一个新的数组中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">40</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> arr2=[]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 将剩下的值赋值给新数组</span></span><br><span class="line">        arr2[arr2.length] = arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转数组---把数组中的数据的位置调换</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>]</span><br><span class="line"><span class="comment">//循环就是为了控制交换的次数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    temp = array[i];<span class="comment">//首位</span></span><br><span class="line">    array[i] = array[array.length - <span class="number">1</span> - i];<span class="comment">//末位</span></span><br><span class="line">    array[array.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒序排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = array.length <span class="number">-1</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(array[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(array)</span><br><span class="line"></span><br><span class="line"><span class="comment">//提示用户输入班级人数,求总成绩,平均值,最高分,最低分</span></span><br><span class="line"><span class="comment">// var classNum = parseInt(prompt('输入你们班级的人数'));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> classScore =[<span class="number">10</span>,<span class="number">23</span>,<span class="number">21</span>,<span class="number">31</span>,<span class="number">6</span>,<span class="number">66</span>,<span class="number">77</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> min = classScore[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classScore.length; i++) &#123;</span><br><span class="line">      sum += classScore[i];</span><br><span class="line">      <span class="keyword">if</span>(min &gt; classScore[i])&#123;</span><br><span class="line">          min = classScore[i]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'总分是: '</span>+ sum)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'平均分是: '</span>+ <span class="built_in">parseInt</span>(sum / classScore.length))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'最低分是: '</span>+min +<span class="string">'分'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序思想: 前面的数小于后面的数,往后挪.时间复杂度为2.</span><br><span class="line"></span><br><span class="line">var arr = [10, 0, 100, 20, 60, 30];</span><br><span class="line"></span><br><span class="line">挑两个数比较.</span><br><span class="line"></span><br><span class="line">第一层就是已经锁定了 10 这个数字,让它和其余剩下的数做比较.这样算起来还剩下 arr.length -1个数.他们以后都要这样做.</span><br><span class="line"></span><br><span class="line">第二层就是交换数据的过程,比较的次数随着i变化而变化.</span><br><span class="line">也就是arr.length - 1 -i.推算一下,第一次判断,10 要这后面的数据比5回.也就是arr.length - 1 -i 回.(i=0)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">30</span>];</span><br><span class="line"><span class="comment">//循环控制比较的轮数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//控制每一轮的比较的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数的格式:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名字(<span class="params"></span>)</span>&#123;</span><br><span class="line">      函数体-----一坨重复的代码</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">函数参数:</span><br><span class="line"></span><br><span class="line">在函数定义的时候,函数名字后面的小括号里的变量就是参数,目的是函数在调用的时候,用户传进来的值操作</span><br><span class="line"></span><br><span class="line">此时函数定义的时候后面的小括号里的变量叫参数;写了两个变量,就有两个参数,</span><br><span class="line"></span><br><span class="line">在函数调用的时候,按照提示的方式,给变量赋值---&gt;就叫传值,把这个值就传到了变量(参数)中</span><br><span class="line"></span><br><span class="line">形参:函数在定义的时候小括号里的变量叫形参.</span><br><span class="line"></span><br><span class="line">实参:函数在调用的时候小括号里传入的值叫实参,实参可以是变量也可以是值.</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">consoleSum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> sum = x + y;<span class="comment">//计算和----功能</span></span><br><span class="line">      <span class="built_in">console</span>.log(sum);<span class="comment">//输出和---第二个功能</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//函数调用</span></span><br><span class="line">   <span class="keyword">var</span> num1=<span class="built_in">parseInt</span>(prompt(<span class="string">"输入第一个数字"</span>));</span><br><span class="line">   <span class="keyword">var</span> num2=<span class="built_in">parseInt</span>(prompt(<span class="string">"输入第二个数字"</span>));</span><br><span class="line">   consoleSum(num1, num2);</span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set:设置   get:获取</span><br><span class="line"></span><br><span class="line">函数的返回值:在函数内部有return关键字,并且在关键字后面有内容,这个内容被返回了.</span><br><span class="line"></span><br><span class="line">当函数调用之后,需要这个返回值,那么就定义变量接收,即可</span><br><span class="line"></span><br><span class="line">如果第一个函数中有return,那么这个函数就有返回值.</span><br><span class="line"></span><br><span class="line">如果一个函数中没有return,那么这个函数就没有返回值.</span><br><span class="line"></span><br><span class="line">如果一个函数中没有明显的返回值,那么调用接收了,结果就是undefined.</span><br><span class="line"></span><br><span class="line">变量声明了,没有赋值,结果还是undefined.</span><br><span class="line"></span><br><span class="line">形参的个数和实参的个数可以不一致.</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参数,有返回值的函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> x+y;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//有参数,无返回值的函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'x'</span>+x);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//f2(2)</span></span><br><span class="line">   <span class="comment">//console.log(f1(2,3));</span></span><br><span class="line">   <span class="comment">//无参数,有返回值的函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//无参数无返回值的函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"萨瓦迪卡"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//求两个数字的和:获取任何两个数字的和.</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> x + y;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 求1-100之间所有的数字的和</span></span><br><span class="line">   <span class="comment">// n-m</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt;= m; i++) &#123;</span><br><span class="line">           sum += i;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'i= '</span> + i)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(f1(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// S = pai * r^2</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">       S = <span class="built_in">Math</span>.PI * r *r;</span><br><span class="line">       <span class="keyword">return</span> S;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(getS(<span class="number">3</span>))</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"考尼奇瓦"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//f1函数调用,把函数的返回值输出了</span></span><br><span class="line">   <span class="built_in">console</span>.log(f1());</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"考尼奇瓦"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(f1);<span class="comment">//输出的f1函数名字-----是f1函数的代码</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 判断是否是质数:能被1 和自身整除.</span></span><br><span class="line">   <span class="comment">// 被1 整除,都可以.所以计数器从2开始</span></span><br><span class="line">   <span class="comment">// 自身整除,需要一个一个试试: n % i (i &lt; n)</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (n &lt;<span class="number">2</span> )&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">2</span>;i &lt; n;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (n % i ==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(f3(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Break关键字&quot;&gt;&lt;a href=&quot;#Break关键字&quot; class=&quot;headerlink&quot; title=&quot;Break关键字&quot;&gt;&lt;/a&gt;Break关键字&lt;/h2&gt;&lt;p&gt;break关键字:如果在循环中使用,遇到了break,则立刻跳出当前所在的循环&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="js" scheme="luoyupiaoshang.club/categories/js/"/>
    
    
      <category term="js" scheme="luoyupiaoshang.club/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript(2)运算&amp;流程控制&amp;分支语句&amp;循环&amp;乘法</title>
    <link href="luoyupiaoshang.club/2018/03/23/js_02/"/>
    <id>luoyupiaoshang.club/2018/03/23/js_02/</id>
    <published>2018-03-23T02:16:47.000Z</published>
    <updated>2018-06-01T03:23:14.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *    ++  -- 都是运算符</span></span><br><span class="line"><span class="comment">    *    ++ 和 --  可以分为:前+ 和后+  and   前- 和后-</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *  如果++在后面:如: num++ +10参与运算</span></span><br><span class="line"><span class="comment">    *  先参与运算,运算结束后自身再加1</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *  如果++在前面:如: ++num+10参与运算</span></span><br><span class="line"><span class="comment">    *  先自身加1,然后再参与运算</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *  Ctrl+/可以把选中的代码全部注释掉</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num =<span class="number">10</span>;</span><br><span class="line">num++;<span class="comment">//先参加运算,运算结束后再加一.</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num =<span class="number">10</span>;</span><br><span class="line">++num;<span class="comment">//先加一,再参加运算.</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=++num +<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//21</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//num + 1之后,再参加运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=num++ +<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//num先参加运算,运算结束后,num再+1.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=--num +<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum: '</span>+sum);<span class="comment">//19</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result: '</span>+num);<span class="comment">//num -1之后,再参加运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=num-- +<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum: '</span>+sum);<span class="comment">//20,</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result: '</span>+num);<span class="comment">// num先参加运算,运算结束后,num再减一.</span></span><br></pre></td></tr></table></figure><pre><code>11112111sum: 19result: 9sum: 20result: 9</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程控制:代码的执行过程</p><p>流程控制:三种方式.<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>顺序结构:从上到下,从左到右的执行顺序.</span><br><span class="line"><span class="number">2.</span>分支结构:<span class="keyword">if</span>语句,<span class="keyword">if</span>-<span class="keyword">else</span>语句,<span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>...语句,<span class="keyword">switch</span>-<span class="keyword">case</span>语句,三元表达式语句.(很像java是不是)</span><br><span class="line"><span class="number">3.</span>循环结构: <span class="keyword">while</span>循环,<span class="keyword">do</span>-<span class="keyword">while</span>循环,<span class="keyword">for</span>循环,还有一个<span class="keyword">for</span>-<span class="keyword">in</span>循环.</span><br></pre></td></tr></table></figure></p><h2 id="分支循环"><a href="#分支循环" class="headerlink" title="分支循环"></a>分支循环</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><h6 id="if语句主要是判断"><a href="#if语句主要是判断" class="headerlink" title="if语句主要是判断."></a>if语句主要是判断.</h6><p>语法:</p><p>if(表达式){<br>    代码块<br>}</p><p>执行过程:</p><p>先判断表达式的结果是<code>true</code>还是<code>false</code>,如果是true执行代码块,如果是false,大括号中的代码不执行.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果8 &gt; 6,请输出8 .如果一个数字大于另一个数字,则输出大的数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">    consoleoleoleoleole.log(num1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我已经执行了判断'</span>)<span class="comment">//尽管不成立,但是判断还是要执行的.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'小明'</span></span><br><span class="line"><span class="keyword">if</span>(str == <span class="string">'小明'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'没错就是你,那个象征着自由的男人!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>我已经执行了判断没错就是你,那个象征着自由的男人!</code></pre><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * if-else 语句</span></span><br><span class="line"><span class="comment">     * 两个分支,只能执行一个分支</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * if-else语句的语法:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * if(表达式)&#123;</span></span><br><span class="line"><span class="comment">     *   代码1</span></span><br><span class="line"><span class="comment">     * &#125;else&#123;</span></span><br><span class="line"><span class="comment">     *   代码2</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * 执行过程:</span></span><br><span class="line"><span class="comment">     * 如果表达式的结果是true则执行代码1,如果表达式的结果是false,则执行代码2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你满18岁就是adult,可以出国玩耍.不满18岁就是Unadult.只能在家里写作业.</span></span><br><span class="line"><span class="keyword">var</span> yourAge =<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (yourAge &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'出国玩耍啦!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'回家乖乖写作业!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里面的输入框是prompt,默认是字符换类型,需要转换成整数</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="built_in">parseInt</span>(prompt(<span class="string">"请您输入年龄"</span>));</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"可以看电影了,嘎嘎..."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"看什么看,回家写作业去"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>出国玩耍啦!evalmachine.&lt;anonymous&gt;:26var age = parseInt(prompt(&quot;请您输入年龄&quot;));          ^ReferenceError: prompt is not defined    at evalmachine.&lt;anonymous&gt;:26:11    at ContextifyScript.Script.runInThisContext (vm.js:50:33)    at Object.runInThisContext (vm.js:139:38)    at run ([eval]:1002:15)    at onRunRequest ([eval]:829:18)    at onMessage ([eval]:789:13)    at emitTwo (events.js:126:13)    at process.emit (events.js:214:7)    at emit (internal/child_process.js:772:12)    at _combinedTickCallback (internal/process/next_tick.js:141:11)</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是奇数还是偶数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> number =<span class="built_in">parseInt</span>(prompt(<span class="string">'请输入一个数字'</span>));</span><br><span class="line"><span class="keyword">if</span>(number % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是偶数'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(;我是奇数)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><h6 id="java里面也有这种情况"><a href="#java里面也有这种情况" class="headerlink" title="java里面也有这种情况:"></a>java里面也有这种情况:</h6><p>一般格式就是: var 变量 = 表达式1?表达式2: 表达式3;</p><p>执行过程:</p><pre><code>*  就看表达式1的结果是true还是false了.*  如果是true则执行表达式2,然后把结果给变量*  如果表达式1的结果是false,则执行表达式3,把结果给变量</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 考察两个数中的最大值</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = x &gt; y ? x : y</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示成年还是未成年</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result2 = age &gt;= <span class="number">18</span> ? <span class="string">"成年了"</span> : <span class="string">"未成年"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br></pre></td></tr></table></figure><pre><code>20未成年</code></pre><h3 id="if-else-if语句"><a href="#if-else-if语句" class="headerlink" title="if-else-if语句"></a>if-else-if语句</h3><h6 id="if-else-if语句…"><a href="#if-else-if语句…" class="headerlink" title="if-else if语句…"></a>if-else if语句…</h6><p>语法:<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;</span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>)&#123;</span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">3</span>)&#123;</span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    代码<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>else if—这种结构可以写多个,具体多少个看需求,</p><p>else–结构是可以不用写的,具体也是看需求</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行过程:</span><br><span class="line">先判断表达式<span class="number">1</span>的结果,</span><br><span class="line">如果为<span class="literal">true</span>则执行代码<span class="number">1</span></span><br><span class="line">如果为<span class="literal">false</span>,则判断表达式<span class="number">2</span></span><br><span class="line">如果表达式<span class="number">2</span>为<span class="literal">true</span>则执行代码<span class="number">2</span></span><br><span class="line">如果为<span class="literal">false</span>,则判断表达式<span class="number">3</span></span><br><span class="line">如果表达式<span class="number">3</span>为<span class="literal">true</span>则执行代码<span class="number">3</span></span><br><span class="line">否则执行代码<span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例子: 成绩的结果是在<span class="number">90</span>到<span class="number">100</span><span class="comment">(包含)</span>之间则 显示A级</span><br><span class="line">如果成绩是在<span class="number">80</span>到<span class="number">90</span><span class="comment">(包含)</span>之间,则显示B级</span><br><span class="line">如果成绩是在<span class="number">70</span>到<span class="number">80</span><span class="comment">(包含)</span>之间,则显示C级</span><br><span class="line">如果成绩是在<span class="number">60</span><span class="comment">(包含)</span>到<span class="number">70</span><span class="comment">(包含)</span>之间,则显示D级</span><br><span class="line">如果成绩在<span class="number">0</span>到<span class="number">60</span><span class="comment">(不包含)</span>之间,则显示E级</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="built_in">Number</span>(prompt(<span class="string">'请输入您的成绩'</span>))</span><br><span class="line"><span class="comment">//确保输入的是数字</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isNaN</span>(score))</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(score)) &#123;<span class="comment">//如果为true就说明 不是数字</span></span><br><span class="line">      <span class="keyword">if</span> (score &gt; <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"A级"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"B级"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">70</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"C级"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"D级"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"E级"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"您输入有误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>evalmachine.&lt;anonymous&gt;:1var score = Number(prompt(&apos;请输入您的成绩&apos;))            ^ReferenceError: prompt is not defined    at evalmachine.&lt;anonymous&gt;:1:13    at ContextifyScript.Script.runInThisContext (vm.js:50:33)    at Object.runInThisContext (vm.js:139:38)    at run ([eval]:1002:15)    at onRunRequest ([eval]:829:18)    at onMessage ([eval]:789:13)    at emitTwo (events.js:126:13)    at process.emit (events.js:214:7)    at emit (internal/child_process.js:772:12)    at _combinedTickCallback (internal/process/next_tick.js:141:11)</code></pre><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h3><h6 id="switch-case语句—分支语句—多分支语句"><a href="#switch-case语句—分支语句—多分支语句" class="headerlink" title="switch-case语句—分支语句—多分支语句"></a>switch-case语句—分支语句—多分支语句</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:代码<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:代码<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">3</span>:代码<span class="number">3</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">4</span>:代码<span class="number">4</span>;<span class="keyword">break</span>;</span><br><span class="line">...多个<span class="keyword">case</span></span><br><span class="line"><span class="keyword">default</span>:代码<span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>default: 后面的break是可以省略的.<br>default也可以省略.</p><p>switch-case语句中和case后面的值比较的时候使用的是严格的模式.break 是可以省略的.<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行过程:</span><br><span class="line">     * 获取表达式的值,和值<span class="number">1</span>比较,如果一样,则执行代码<span class="number">1</span>,遇到<span class="keyword">break</span>则跳出整个的语句,后面代码不执行</span><br><span class="line">     * 如果表达式的值和值<span class="number">1</span>不一样,则和值<span class="number">2</span>比较,如果相同则执行代码<span class="number">2</span>,遇到<span class="keyword">break</span>则跳出</span><br><span class="line">     * 否则和值<span class="number">3</span>比较,相同则执行代码<span class="number">3</span>,遇到<span class="keyword">break</span>,跳出,否则和值<span class="number">4</span>比较,相同则执行代码<span class="number">4</span>,遇到<span class="keyword">break</span>则跳出,否则直接执行代码<span class="number">5</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jibie =<span class="string">"E"</span></span><br><span class="line"><span class="keyword">switch</span>(jibie)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        consoleole.log(<span class="string">'90到100之间.'</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'80到90之间.'</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'70到80之间.'</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'60到70之间.'</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"E"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'0到59之间.'</span>)</span><br><span class="line">        <span class="comment">//default: 后面的break是可以省略的. default也可以省略.</span></span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'0到59之间.'</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num =<span class="string">'10'</span></span><br><span class="line"><span class="comment">//switch-case语句中和case后面的值比较的时候使用的是严格的模式.break 是可以省略的.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"10"</span> === <span class="number">10</span>) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'数字的10'</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'10'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'字符串的10'</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据月份显示对应的天数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1,3,5,78,10,12 --- 31天</span></span><br><span class="line"><span class="comment">//2----28天</span></span><br><span class="line"><span class="comment">//4,6,7,9,11---30天</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> month = <span class="built_in">parseInt</span>(prompt(<span class="string">'请输入月份'</span>))</span><br><span class="line"><span class="comment">//笨法</span></span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'31 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'28 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'31 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'30 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'31 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'30 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'31 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'31 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'30 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'31 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'30 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'31 days'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简易方法</span></span><br><span class="line">   <span class="keyword">var</span> month=<span class="built_in">parseInt</span>(prompt(<span class="string">"请输入月份"</span>));</span><br><span class="line">   <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">12</span>:<span class="built_in">console</span>.log(<span class="string">"31天"</span>);<span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">     <span class="keyword">case</span> <span class="number">11</span>:<span class="built_in">console</span>.log(<span class="string">"30天"</span>);<span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">console</span>.log(<span class="string">"28天"</span>);<span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><pre><code>0到59之间.0到59之间.false字符串的10evalmachine.&lt;anonymous&gt;:40var month = parseInt(prompt(&apos;请输入月份&apos;))            ^ReferenceError: prompt is not defined    at evalmachine.&lt;anonymous&gt;:40:13    at ContextifyScript.Script.runInThisContext (vm.js:50:33)    at Object.runInThisContext (vm.js:139:38)    at run ([eval]:1002:15)    at onRunRequest ([eval]:829:18)    at onMessage ([eval]:789:13)    at emitTwo (events.js:126:13)    at process.emit (events.js:214:7)    at emit (internal/child_process.js:772:12)    at _combinedTickCallback (internal/process/next_tick.js:141:11)</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">分支语句:</span><br><span class="line"><span class="keyword">if</span>语句:一个分支</span><br><span class="line"><span class="keyword">if</span>-<span class="keyword">else</span>语句:两个分支,最终只执行一个分支</span><br><span class="line"><span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>...语句: 多个分支,也是只会执行一个</span><br><span class="line"><span class="keyword">switch</span>-<span class="keyword">case</span>语句:多分支语句,最终也会一个(必须要有<span class="keyword">break</span>)</span><br><span class="line">三元表达式:和<span class="keyword">if</span>-<span class="keyword">else</span>语句是一样的</span><br><span class="line">什么时候使用<span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>...: 一般是对范围的判断</span><br><span class="line">什么时候使用<span class="keyword">switch</span>-<span class="keyword">case</span>语句:一般是对具体的值的判断</span><br><span class="line">如果有多个分支,是针对范围的判断一般选择<span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>的语句</span><br><span class="line">如果有多个分支,是针对具体的值判断,一般选择用<span class="keyword">switch</span>-<span class="keyword">case</span>语句</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>循环: 一件事不停的或者是重复的做.</p><p>循环要有结束的条件,循环还应该有计数器.(也就是记录循环的次数)</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>循环语法:</span><br><span class="line"></span><br><span class="line">计数器</span><br><span class="line"><span class="keyword">var</span> 变量 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(循环的条件)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">    计数器++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程:</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.先判断条件是否成立(条件的结果是<span class="literal">true</span>还是<span class="literal">false</span>),如果是<span class="literal">false</span>.那么循环的代码(while的大括号里面的代码都不执行)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.如果是<span class="literal">true</span>,那么先执行循环体,然后执行计数器,</span><br><span class="line">  然后,直接去执行循环的条件.再次判断是否成立,成立则继续执行循环体.</span><br><span class="line">     执行完循环体之后,计数器加<span class="number">1</span>,</span><br><span class="line">     然后再去循环的条件,判断,成立则循环,否则跳出循环.</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log('第'+i+'次循环'+'\t'+'你好啊...我是灿烂的黑虎阿福!')</span></span><br><span class="line">    i ++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第'</span>+i+<span class="string">'次循环'</span>+<span class="string">'\t'</span>+<span class="string">'你好啊...我是灿烂的黑虎阿福!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>第1次循环    你好啊...我是灿烂的黑虎阿福!第2次循环    你好啊...我是灿烂的黑虎阿福!第3次循环    你好啊...我是灿烂的黑虎阿福!第4次循环    你好啊...我是灿烂的黑虎阿福!第5次循环    你好啊...我是灿烂的黑虎阿福!第6次循环    你好啊...我是灿烂的黑虎阿福!第7次循环    你好啊...我是灿烂的黑虎阿福!第8次循环    你好啊...我是灿烂的黑虎阿福!第9次循环    你好啊...我是灿烂的黑虎阿福!第10次循环    你好啊...我是灿烂的黑虎阿福!</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  计算1-10之间的和</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    sum =sum +i;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i= '</span>+ i +<span class="string">' sum = '</span> + sum)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>i= 2 sum = 1i= 3 sum = 3i= 4 sum = 6i= 5 sum = 10i= 6 sum = 15i= 7 sum = 21i= 8 sum = 28i= 9 sum = 36i= 10 sum = 45</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">    <span class="comment">//console.log('里面的i: '+i)</span></span><br><span class="line">    <span class="comment">//sum = sum + i;//不停的计算数字的和.</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'和为: '</span>+sum);</span><br></pre></td></tr></table></figure><pre><code>和为: 5050</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求6 的阶乘:</span></span><br><span class="line"><span class="comment">// 6! = 6*5*4*3*2*1</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//存储最终的阶乘的结果</span></span><br><span class="line"><span class="keyword">var</span> j = <span class="number">1</span>;<span class="comment">//开始的数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">6</span>)&#123;</span><br><span class="line">    j = i * j;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//求1-100 之间所有的偶数的和.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;<span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//总和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//范围</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">100</span> )&#123;</span><br><span class="line">    <span class="comment">//判断是否是偶数</span></span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        sum = sum +i;</span><br><span class="line">        <span class="built_in">console</span>.log(i+ <span class="string">' 是偶数'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出1-100之间所有能够被7整除的数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="comment">//判断这个数字是否能够被7整除</span></span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">7</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断账号和密码是否一致,登录的效果实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提示用户输入账号</span></span><br><span class="line"><span class="comment">//提示用户输入密码</span></span><br><span class="line"><span class="comment">//提示用户再次输入密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果账号或者密码不对,则一直提示用户输入账号和密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认张傲admin,密码:123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userName = prompt(<span class="string">'请您输入账号!'</span>)</span><br><span class="line"><span class="keyword">var</span> userPwd = prompt(<span class="string">'请您输入密码!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(userName != <span class="string">'admin'</span>|| userPwd !=<span class="string">'123'</span>)&#123;</span><br><span class="line">    userName = prompt(<span class="string">'请您输入账号'</span>);</span><br><span class="line">    userPwd = prompt(<span class="string">'请您输入密码'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'登录成功!'</span>)</span><br></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i =<span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line">   <span class="keyword">do</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"哈哈,第一次没了!"</span>);</span><br><span class="line">       i++;</span><br><span class="line">   &#125;<span class="keyword">while</span>(i &lt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//求100 以内所有3的倍数的和</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> i =<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>( i %<span class="number">3</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">           sum = sum + i;</span><br><span class="line">       &#125;</span><br><span class="line">       i++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> i =<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">do</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(i % <span class="number">3</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">           sum = sum + i;</span><br><span class="line">       &#125;</span><br><span class="line">       i++;</span><br><span class="line">   &#125;<span class="keyword">while</span>( i &lt;=<span class="number">100</span>)</span><br><span class="line">   <span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">       sum = sum + i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//画星星</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i &lt;=<span class="number">5</span> ;i++)&#123;</span><br><span class="line">       <span class="comment">//控制每一行有几个星星</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> j =<span class="number">0</span>;j &lt;=i ;j++)&#123;</span><br><span class="line">           <span class="built_in">document</span>.write(<span class="string">"★"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//链接</span></span><br><span class="line">   <span class="built_in">document</span>.write(<span class="string">"&lt;a href='http://www.baidu.com'&gt;百度&lt;/a&gt;"</span>);</span><br></pre></td></tr></table></figure><pre><code>哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!哈哈,第一次没了!168316835050evalmachine.&lt;anonymous&gt;:40            document.write(&quot;★&quot;);            ^ReferenceError: document is not defined    at evalmachine.&lt;anonymous&gt;:40:13    at ContextifyScript.Script.runInThisContext (vm.js:50:33)    at Object.runInThisContext (vm.js:139:38)    at run ([eval]:1002:15)    at onRunRequest ([eval]:829:18)    at onMessage ([eval]:789:13)    at emitTwo (events.js:126:13)    at process.emit (events.js:214:7)    at emit (internal/child_process.js:772:12)    at _combinedTickCallback (internal/process/next_tick.js:141:11)</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><pre><code>* while循环特点:先判断,后循环,有可能一次循环体都不执行** do-while循环特点:先循环,后判断,至少执行一次循环体</code></pre><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//三角形的---五角星----随着行数的增加,每一行都会比上一行多一个五角星</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">//控制每一行有几个星星</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"★"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>evalmachine.&lt;anonymous&gt;:6        document.write(&quot;★&quot;);        ^ReferenceError: document is not defined    at evalmachine.&lt;anonymous&gt;:6:9    at ContextifyScript.Script.runInThisContext (vm.js:50:33)    at Object.runInThisContext (vm.js:139:38)    at run ([eval]:1002:15)    at onRunRequest ([eval]:829:18)    at onMessage ([eval]:789:13)    at emitTwo (events.js:126:13)    at process.emit (events.js:214:7)    at emit (internal/child_process.js:772:12)    at _combinedTickCallback (internal/process/next_tick.js:141:11)</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i =<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//控制每一行有多个表达式,这个一行有9个</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>;j &lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(j+<span class="string">'*'</span>+i+<span class="string">'i='</span>+i*j)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 9^9 乘法表</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i =<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//控制每一行有多个表达式,这个一行有9个</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>;j &lt;=i;j++)&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(j+<span class="string">'*'</span>+i+<span class="string">'='</span>+i*j+<span class="string">'\n'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带表格的</span></span><br><span class="line"> <span class="built_in">document</span>.write(<span class="string">"&lt;table border='1' cellpadding='0' cellspacing='0'&gt;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;<span class="comment">//控制的行数</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;td&gt;"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + i * j);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/table&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  测试代码 </span></span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">        sum+=i;<span class="comment">//观察一下这个变量的值是多少,或者这行代码执行后的效果如何</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p>根据以往的经验,我们可以使用jetbrain的chrome插件来集成测试环境.</p><p><a href="https://www.cnblogs.com/tzdy/p/7930462.html" target="_blank" rel="noopener">chrome版本集成JSdebug</a></p><p><a href="http://www.codes51.com/itwd/1576090.html" target="_blank" rel="noopener">未授权的问题</a></p><p><a href="https://my.oschina.net/soarwilldo/blog/402976" target="_blank" rel="noopener">Firefox的版本集成JSDebug</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一元运算符&quot;&gt;&lt;a href=&quot;#一元运算符&quot; class=&quot;headerlink&quot; title=&quot;一元运算符&quot;&gt;&lt;/a&gt;一元运算符&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="js" scheme="luoyupiaoshang.club/categories/js/"/>
    
    
      <category term="js" scheme="luoyupiaoshang.club/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript(1)之基本知识</title>
    <link href="luoyupiaoshang.club/2018/03/22/js_01/"/>
    <id>luoyupiaoshang.club/2018/03/22/js_01/</id>
    <published>2018-03-22T02:16:47.000Z</published>
    <updated>2018-06-01T02:48:39.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js简介"><a href="#js简介" class="headerlink" title="js简介"></a>js简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">JavaScript是什么?</span><br><span class="line"></span><br><span class="line">是一门脚本语言.</span><br><span class="line">是一门解释性语言.</span><br><span class="line">是一门动态类型的语言.</span><br><span class="line">是一门基于对象的语言.</span><br><span class="line">是一门运行在客户端的脚本语言.</span><br><span class="line"></span><br><span class="line">二进制:  计算机只认识0 ,1.</span><br><span class="line"></span><br><span class="line">编译语言: 需要把代码翻译成计算机所认知的二进制语言,才能够执行.</span><br><span class="line"></span><br><span class="line">脚本语言:不需要编译,直接执行就可以了.</span><br><span class="line"></span><br><span class="line">常见的脚本语言: t-sql,cmd.</span><br><span class="line"></span><br><span class="line">电脑的硬件--系统--浏览器--js代码</span><br><span class="line"></span><br><span class="line">js原名不是javasc,而是LiveScript.</span><br></pre></td></tr></table></figure><h2 id="创始人"><a href="#创始人" class="headerlink" title="创始人"></a>创始人</h2><p>布兰登.艾奇,他是被逼的,10天就研究出来了JavaScript.</p><p>交互产品:C &amp; Self 产生的语言.</p><h2 id="JS的作用"><a href="#JS的作用" class="headerlink" title="JS的作用"></a>JS的作用</h2><p>之前是解决用户和浏览器之间的交互的问题.</p><p>html: 标记语言,展示数据.</p><p>css: 美化页面.</p><p>JavaScript: 用户和浏览器交互.</p><p>程序运行的过程:</p><p><img src="https://upload-images.jianshu.io/upload_images/7505161-60363948639b279a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>win系统下,下载下来一个target目标程序,安装,安装到电脑的硬盘中去.</p><p>插上网线,运行这个程序.电脑里面有CPU(相当于人的大脑.).CPU将QQ从硬盘里面放到内存面去运行,运行过程中需要数据交互,数据也在内存.</p><p>JS代码写完了就可以在浏览器中运行,是因为浏览器中有JavaScript引擎.</p><h2 id="js代码的位置"><a href="#js代码的位置" class="headerlink" title="js代码的位置"></a>js代码的位置</h2><p>1.在HTML的文件中,script的标签中写js代码.<br>2.js代码可以在HTML的标签中书写<br>3.在js文件中可以写js代码,但是需要在HTML的页面中引入.</p><h2 id="写js代码的问题"><a href="#写js代码的问题" class="headerlink" title="写js代码的问题"></a>写js代码的问题</h2><p>1.在一对script的标签中有错误的js代码,后面的js代码都不会执行.</p><p>2.第一对js出错后,不影响后面的第二对js代码.</p><p>3.script的标签中的标准写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>落雨飘殇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"JS/demo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--标准写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这种写法也可以--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span> = <span class="string">'JavaScript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'hi dalao'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为了不出错,都写都行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"hello ll"</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--也能放在这,但是浏览器会自动的为你调整位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'asas'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>4.如果script标签是引入外部js文件的作用,那么这对标签中不要写任何的js代码,如果要写,<br>重新写一对script标签. <strong>不能让原来的代码污染</strong> </p><h2 id="变量的引入和声明和初始化"><a href="#变量的引入和声明和初始化" class="headerlink" title="变量的引入和声明和初始化"></a>变量的引入和声明和初始化</h2><p>变量,CPU,内存,硬盘.</p><p>双击QQ,CPU调度QQ 在内存当中运行,数据在内存里面.</p><p>操作的数据都是在内存中操作.</p><p>内存空间分为很多个小空间,每个小空间都有很多编号,编号在C语言中称为指针.如下:</p><p>内存里面存着content,用它的时候,就需要先找到编号.也就是我们说的指针.</p><p><img src="https://upload-images.jianshu.io/upload_images/7505161-dd06a5a45d90c0c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>比如: 一个人出差,住宾馆.单间.2个人出差,住宾馆,双人床.</p><p>数据-内存空间-存放的问题. </p><p>房间(相当于内存空间)有编号,只要拿着钥匙打开房间.人(相当于数据)住进入去了.</p><h3 id="js存储数据的方式"><a href="#js存储数据的方式" class="headerlink" title="js存储数据的方式"></a>js存储数据的方式</h3><p>1.JS里面存储数据使用变量的方式,相当于(key,value).</p><p>2.JS声明变量需要 var来定义.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量的声明及赋值</span></span><br><span class="line"><span class="keyword">var</span> num =<span class="number">10</span>;</span><br><span class="line"><span class="comment">//存储一个名字</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"小黑"</span>;</span><br></pre></td></tr></table></figure><p>3.变量声明(有 var,有变量名字,没有值)</p><p>4.变量初始化(有 var,有变量名字,有值)</p><p>5.声明变量的方式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量的声明,此时是没有赋值的,</span></span><br><span class="line"><span class="keyword">var</span> 变量名字;</span><br><span class="line"><span class="comment">//一次性声明5个变量.</span></span><br><span class="line"><span class="keyword">var</span> x,y,z,k,j;<span class="comment">//变量的声明,此时是没有赋值的,</span></span><br></pre></td></tr></table></figure></p><p>6.变量的初始化:</p><p>= 的作用就是赋值的意思.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量并同时赋值</span></span><br><span class="line"><span class="comment">//存储一个数字10</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> name =<span class="string">"xiaohei"</span>;</span><br><span class="line"><span class="keyword">var</span> falg = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个null--就是空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nll= <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></p><p>7.变量的作用</p><p>变量的产生就是为了操作数据,使其可以方便的进行数据的存储和读取.</p><p>变量的初始化,存在赋值,</p><p>变量的声明:没有赋值.</p><p>JS里面区分大小写.和python里面.</p><p>‘’,””,都可以用.</p><h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><p>1.变量名要有意义.</p><p>2.变量名有一定的规范:一般以字母,$符号,_下划线开头,中间或者后面可以有$符号,字母,数字组成.</p><p>3.变量名一般都是小写的.</p><p>4.驼峰命名法.你懂得. eg: parse_one_page</p><h2 id="变量的初始化和命名"><a href="#变量的初始化和命名" class="headerlink" title="变量的初始化和命名"></a>变量的初始化和命名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量并初始化 --- 变量的初始化 --- 声明变量赋值</span></span><br><span class="line"><span class="comment">//声明了一个num变量存储了一个数字10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num =<span class="number">10</span>;</span><br><span class="line">alert(num);</span><br><span class="line"><span class="comment">//输出在浏览器的控制台上</span></span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7505161-2523c831e92b4fd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明多个变量然后一个个赋值</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">var</span> num1,num2,num3;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">num1 = <span class="number">10</span>;</span><br><span class="line">num2 = <span class="number">20</span>;</span><br><span class="line">num3 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> num1,num2,num3 = <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>JavaScript里面的注释和java里面的一样.不必纠结.</p><h2 id="获取变量的数据类型和typeof"><a href="#获取变量的数据类型和typeof" class="headerlink" title="获取变量的数据类型和typeof"></a>获取变量的数据类型和typeof</h2><p>1.js中的数据类型有哪些?</p><p>2.js中的原始数据类型:</p><p><code>number,string,boolean,null,undefined,object</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number:数字类型(证书和小数)</span><br><span class="line">string:字符串类型(值一般都是用单引号或者双引号括起来)</span><br><span class="line">boolean: 布尔类型(值只有2个,True(真,1);False(假,0))</span><br><span class="line">null: 空类型,一个对象指向为空了,此时可以赋值为null.</span><br><span class="line">undefined: 未定义,值只有一个:undefined</span><br><span class="line">object: 对象</span><br></pre></td></tr></table></figure></p><p>比如声明性别:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex = <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">var</span> sex =trie;<span class="comment">//代表男</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">'女'</span>;</span><br><span class="line"><span class="keyword">var</span> sex = <span class="literal">false</span>;<span class="comment">//代表女</span></span><br><span class="line"></span><br><span class="line">像下面的情况:</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line">console.log(num); #此时打印的就是undefined</span><br><span class="line">一般来说,变量声明了,没有赋值,结果是<span class="literal">undefined</span>.</span><br><span class="line">函数没有明确返回值,如果接收了,结果也是<span class="literal">undefined</span>.</span><br><span class="line"></span><br><span class="line">关于<span class="literal">undefined</span> + number 的结果:</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="number">10</span>) <span class="comment">//NaN ,拿一个undefined + number类型的结果就是: NaN ,也就是说不是一个数字.</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.如何获取这个变量的数据类型是什么?</p><p>利用typeof就可以测试出来.<br><code>语法: typeof(content)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得这个变量的数据类型.</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'flag'</span>;</span><br><span class="line"><span class="keyword">var</span> nll = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> undef;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'type:'</span>+ <span class="keyword">typeof</span> (undef))</span><br></pre></td></tr></table></figure></p><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">数字类型: 整数和小数</span><br><span class="line">num = <span class="number">20</span>; <span class="comment">//整数</span></span><br><span class="line">num = <span class="number">98.76</span>;<span class="comment">//小数(java中叫浮点型,单精度浮点型:float,双精度浮点型:double)</span></span><br><span class="line"></span><br><span class="line">二进制:遇到<span class="number">2</span>进一</span><br><span class="line">    *</span><br><span class="line">    *   <span class="number">00000001</span>----<span class="number">-1</span></span><br><span class="line">    *   <span class="number">00000010</span>----<span class="number">-2</span></span><br><span class="line">    *   <span class="number">00000011</span>----<span class="number">-3</span></span><br><span class="line">    *   <span class="number">00000100</span>----<span class="number">-4</span></span><br><span class="line">    *   <span class="number">00000101</span>---<span class="number">-5</span></span><br><span class="line">    *   <span class="number">00000110</span>---<span class="number">-6</span></span><br><span class="line">    *   <span class="number">00000111</span>----<span class="number">-7</span></span><br><span class="line">    *   <span class="number">00001000</span>----<span class="number">-8</span></span><br><span class="line">    *   <span class="number">00001001</span>---<span class="number">-9</span></span><br><span class="line">    * 八进制:遇到<span class="number">8</span>进一</span><br><span class="line">    *   <span class="number">00000001</span></span><br><span class="line">    *   <span class="number">00000002</span></span><br><span class="line">    *   <span class="number">00000003</span></span><br><span class="line">    *   <span class="number">00000004</span></span><br><span class="line">    *   <span class="number">00000005</span></span><br><span class="line">    *   <span class="number">00000006</span></span><br><span class="line">    *   <span class="number">00000007</span></span><br><span class="line">    *   <span class="number">00000010</span>----<span class="number">-8</span></span><br><span class="line">    *   <span class="number">00000011</span>----<span class="number">-9</span></span><br><span class="line">    *   <span class="number">00000012</span>----<span class="number">-10</span></span><br><span class="line">    * 十进制:遇到<span class="number">10</span>进一</span><br><span class="line">    *   <span class="number">0</span></span><br><span class="line">    *   <span class="number">1</span></span><br><span class="line">    *   <span class="number">2</span></span><br><span class="line">    *   <span class="number">3</span></span><br><span class="line">    *   <span class="number">4</span></span><br><span class="line">    *   <span class="number">5</span></span><br><span class="line">    *   <span class="number">6</span></span><br><span class="line">    *   <span class="number">7</span></span><br><span class="line">    *   <span class="number">8</span></span><br><span class="line">    *   <span class="number">9</span></span><br><span class="line">    *   <span class="number">10</span></span><br><span class="line">    * 十六进制:遇到f进一</span><br><span class="line">    * <span class="number">00000001</span></span><br><span class="line">    * <span class="number">00000002</span></span><br><span class="line">    * <span class="number">00000003</span></span><br><span class="line">    * <span class="number">00000004</span></span><br><span class="line">    * <span class="number">00000005</span></span><br><span class="line">    * <span class="number">00000006</span></span><br><span class="line">    * <span class="number">00000007</span></span><br><span class="line">    * <span class="number">00000008</span></span><br><span class="line">    * <span class="number">00000009</span></span><br><span class="line">    * <span class="number">0000000</span>a---<span class="number">-10</span></span><br><span class="line">    * <span class="number">0000000</span>b--<span class="number">-11</span></span><br><span class="line">    * <span class="number">0000000</span>c---<span class="number">-12</span></span><br><span class="line">    * <span class="number">0000000</span>d--<span class="number">-13</span></span><br><span class="line">    * <span class="number">0000000</span>e--<span class="number">-14</span></span><br><span class="line">    * <span class="number">0000000</span>f--<span class="number">-15</span></span><br><span class="line">    * <span class="number">00000010</span>--<span class="number">-16</span></span><br><span class="line">    * <span class="number">00000011</span>--<span class="number">-17</span></span><br><span class="line">    * <span class="number">00000012</span>--<span class="number">-18</span></span><br><span class="line">    * <span class="number">0</span>f12a</span><br></pre></td></tr></table></figure><h3 id="js中表示进制"><a href="#js中表示进制" class="headerlink" title="js中表示进制"></a>js中表示进制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">12</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="keyword">var</span> num2=<span class="number">012</span>;<span class="comment">//八进制</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0</span> <span class="number">007</span> <span class="number">-7</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0</span> <span class="number">010</span> <span class="number">-8</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);<span class="comment">//10</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="number">0x1a</span>;<span class="comment">//十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x1a计算方法就是</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//16进制满f进1,此时也就是010 - 16,a对应的是10 ,10+16 =26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0x1f 代表 15 + 16 =31</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num3);</span><br></pre></td></tr></table></figure><h2 id="number特性"><a href="#number特性" class="headerlink" title="number特性"></a>number特性</h2><ol><li>数字的最大值和最小值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE);<span class="comment">//数字的最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE);<span class="comment">//数字的最小值</span></span><br></pre></td></tr></table></figure><p>2.不要用NaN验证是不是NaN<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">var</span> y=<span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> sum=x+y;</span><br><span class="line"><span class="built_in">console</span>.log(sum==<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure></p><p>3.不要用NaN去验证是不是NaN<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num+<span class="number">10</span>==<span class="literal">NaN</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"您好"</span>==<span class="string">"我好"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>));</span><br><span class="line"> <span class="comment">//判断结果不是一个数字可以使用isNaN(变量名)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"您好"</span>;</span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="keyword">var</span> sum=num+<span class="number">10</span>;<span class="comment">//NaN,不是数字.</span></span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(sum));<span class="comment">//不是数字为true,是数字结果为false</span></span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数字类型:number类型</span><br><span class="line">    * 无论是整数还是小数都是数字类型</span><br><span class="line">    * 不要用小数验证小数</span><br><span class="line">    * 不要使用NaN判断是不是NaN，应该使用isNaN(值或者是变量)</span><br><span class="line">    * 想要表示十进制:就是正常的数字</span><br><span class="line">    * 想要表示八进制:以0开头</span><br><span class="line">    * 想要表示十六进制:0x开头</span><br></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"10"</span>;<span class="comment">//字符串</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">'20'</span>;<span class="comment">//字符串</span></span><br><span class="line"></span><br><span class="line">字符串可以使用单引号,也可以使用双引号</span><br><span class="line"></span><br><span class="line">字符串的长度如何获取? 变量名.length</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str=<span class="string">"what are you no sha lei"</span>;</span><br><span class="line">   <span class="comment">//字符串的个数有多少个?这个字符串的长度是多少</span></span><br><span class="line">   <span class="built_in">console</span>.log(str.length);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str1=<span class="string">"fdshfjworwoijpfskj;akjfpojfiwnmoiwajdoiwajiwaewowj"</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(str1.length);</span><br><span class="line"></span><br><span class="line">html中的转义符: <span class="xml"><span class="tag">&lt;  &amp;<span class="attr">lt</span>; &gt;</span> &amp;gt; </span></span><br><span class="line"><span class="xml">空格: &amp;nbsp;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">js中的字符串里也有转义符</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">tab键----水平制表符</span></span><br><span class="line"><span class="xml">   console.log("哈哈\\嘎嘎");</span></span><br><span class="line"><span class="xml">   console.log("哈哈\t嘎嘎");</span></span><br><span class="line"><span class="xml">   console.log("哈哈\"嘎嘎");</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">   console.log('哈哈\'嘎嘎');</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7505161-72d767854bdbc092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">字符串的拼接: 使用+可以把多个字符串放在一起形成一个字符串</span><br><span class="line">只要有一个是字符串,其他的是数字,那么结果也是拼接,不是相加</span><br><span class="line">如果有一个是字符串,另一个不是字符串,使用- 号,此时会发生计算</span><br><span class="line">   <span class="keyword">var</span> str1=<span class="string">"您好"</span>;</span><br><span class="line">   <span class="keyword">var</span> str2=<span class="string">"我好"</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"哈哈"</span>+<span class="string">"嘎嘎"</span>+<span class="string">"嘿嘿"</span>);</span><br><span class="line">   <span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line">   <span class="keyword">var</span> str2=<span class="string">"20"</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line">   <span class="keyword">var</span> str2=<span class="number">20</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(str1+str2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str1 = <span class="string">"10"</span>;</span><br><span class="line">   <span class="keyword">var</span> str2 = <span class="number">5</span>;</span><br><span class="line">   <span class="comment">//浏览器帮助我们自动的把字符串类型转成了数字类型,这种方式叫:隐式转换</span></span><br><span class="line">   <span class="built_in">console</span>.log(str1-str2);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str1=<span class="string">"10"</span>;</span><br><span class="line">   <span class="keyword">var</span> str2=<span class="number">5</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(str1*str2);</span><br></pre></td></tr></table></figure></p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔类型:的值有两个,一个是true(真),一个是false(假)</span></span><br><span class="line">   <span class="keyword">var</span> flag=<span class="number">1</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(flag);</span><br><span class="line">   <span class="keyword">var</span> fdf=<span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">var</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类型转布尔类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1  Boolean(值);</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">1</span>));<span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">11</span>));<span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">-10</span>));<span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"哈哈"</span>));<span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">""</span>));<span class="comment">//false</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>));<span class="comment">//false</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str=<span class="number">10</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(+str);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类型转数字类型:三种方式:</span></span><br><span class="line"><span class="comment">//1.parseInt();//转整数</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//10</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"1fds0"</span>));<span class="comment">//1</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10.98"</span>));<span class="comment">//10</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.parseFloat()//转小数</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//10</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"1fds0"</span>));<span class="comment">//1</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.98"</span>));<span class="comment">//10.98</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//10.98</span></span><br><span class="line"><span class="comment">//3.Number();//转数字</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10"</span>));<span class="comment">//10</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10afrswfdsf"</span>));<span class="comment">//NaN</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"g10"</span>));<span class="comment">//NaN</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"1fds0"</span>));<span class="comment">//NaN</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10.98"</span>));<span class="comment">//10.98</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"10.98fdsfd"</span>));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>想要转整数用parseInt(),想要转小数用parseFloat()</p><p>想要转数字:Number();要比上面的两种方式严格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他类型转字符串类型</span></span><br><span class="line"><span class="comment">//1    .toString()</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(num.toString());<span class="comment">//字符串类型</span></span><br><span class="line">   <span class="comment">//2  String();</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num1=<span class="number">20</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">String</span>(num1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果变量有意义调用.toString()使用转换</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 如果变量没有意义使用String()转换</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num2;</span><br><span class="line">   <span class="built_in">console</span>.log(num2.toString());<span class="comment">//undefined类型的变量没有意义,没办法进行字符串转换</span></span><br><span class="line">   <span class="keyword">var</span> num3=<span class="literal">null</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(num3.toString());</span><br><span class="line">   </span><br><span class="line"><span class="comment">//这个可以</span></span><br><span class="line">   <span class="keyword">var</span> num2;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">String</span>(num2));</span><br><span class="line">   <span class="keyword">var</span> num3=<span class="literal">null</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">String</span>(num3));</span><br></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">操作符:一些符号-----用来计算</span><br><span class="line"></span><br><span class="line">      算数运算符:  +  -  * / %</span><br><span class="line">      算数运算表达式: 由算数运算符连接起来的表达式</span><br><span class="line">      一元运算符: 这个操作符只需要一个操作数就可以运算的符号  ++  --</span><br><span class="line">      二元运算符: 这个操作符需要两个操作数就可以运算,</span><br><span class="line">      三元运算符: -----</span><br><span class="line">      复合运算符: +=  -=  *= /= %=</span><br><span class="line">      复合运算表达式:由复合运算符连接起来的表达式</span><br><span class="line">     </span><br><span class="line">      var num=10;</span><br><span class="line">      num+=10;------&gt;就是:num=num+10;</span><br><span class="line">      console.log(num);20</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">      关系运算符: &gt;  &lt;  &gt;=  &lt;=  ==不严格的 ===严格的 !=不严格的不等 !==严格的不等</span><br><span class="line">      关系运算表达式:由关系运算符连接起来的表达式</span><br><span class="line">      关系运算表达式的结果是布尔类型</span><br><span class="line">      </span><br><span class="line">      逻辑运算符:</span><br><span class="line">      &amp;&amp;---逻辑与--并且</span><br><span class="line">      ||---逻辑或---或者</span><br><span class="line">      !---逻辑非---取反--取非</span><br><span class="line">      逻辑运算表达式:由逻辑运算符连接起来的表达式</span><br><span class="line">      </span><br><span class="line">      表达式1 &amp;&amp; 表达式2</span><br><span class="line">      如果有一个为false,整个的结果就是false</span><br><span class="line">      </span><br><span class="line">      表达式1||表达式2</span><br><span class="line">      如果有一个为true,整个的结果为true</span><br><span class="line">      </span><br><span class="line">      !表达式1</span><br><span class="line">      表达式1的结果是true,整个结果为false</span><br><span class="line">      表达式1的结果是false,整个结果为true</span><br><span class="line">     </span><br><span class="line">      赋值运算符:  =</span><br></pre></td></tr></table></figure><p>实际演练:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1==num2&amp;&amp;<span class="number">5</span>&gt;<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num&gt;<span class="number">10</span>||<span class="number">5</span>&lt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> sum=(num+<span class="number">10</span>)*<span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// == 是不严格的</span></span><br><span class="line"><span class="keyword">var</span> result = (<span class="number">4</span> &gt;= <span class="number">6</span> || <span class="string">'人'</span> != <span class="string">'狗'</span> &amp;&amp; !(<span class="number">12</span> * <span class="number">2</span> == <span class="number">144</span>) &amp;&amp; <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// === 是严格的</span></span><br><span class="line"><span class="keyword">var</span> result2 =( <span class="number">5</span> == num / <span class="number">2</span> &amp;&amp; (<span class="number">2</span> + <span class="number">2</span> * num).toString() === <span class="string">'22'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result=num/<span class="number">3</span>;<span class="comment">//num变量与3取余---&gt;10/3的余数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(result));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result=num%<span class="number">3</span>;<span class="comment">//num变量与3取余---&gt;10/3的余数</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">   <span class="keyword">var</span> sum=(num+<span class="number">10</span>)+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">   num %= <span class="number">5</span>;</span><br><span class="line">   <span class="comment">//    num=num % 5;</span></span><br><span class="line">   <span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str=<span class="string">"5"</span>;</span><br><span class="line">   <span class="keyword">var</span> num=<span class="number">5</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(str===num);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">5</span>&gt;<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">5</span>&gt;=<span class="number">5</span>);<span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">5</span>&gt;<span class="number">3</span>);<span class="comment">//true</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">5</span>==<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量: 把一个值直接赋值给一个变量</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 声明变量并初始化</span></span><br><span class="line">   <span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> str=<span class="string">"哈哈哈"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> y=<span class="number">10</span>;</span><br><span class="line">   <span class="keyword">var</span> n=y;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js简介&quot;&gt;&lt;a href=&quot;#js简介&quot; class=&quot;headerlink&quot; title=&quot;js简介&quot;&gt;&lt;/a&gt;js简介&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="js" scheme="luoyupiaoshang.club/categories/js/"/>
    
    
      <category term="js01-基本数据类型" scheme="luoyupiaoshang.club/tags/js01-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>mysql设计以及架构优化</title>
    <link href="luoyupiaoshang.club/2018/02/28/mysql%E8%AE%BE%E8%AE%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/"/>
    <id>luoyupiaoshang.club/2018/02/28/mysql设计以及架构优化/</id>
    <published>2018-02-28T02:16:47.000Z</published>
    <updated>2018-04-05T02:25:54.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电商常用功能模块的数据库设计"><a href="#电商常用功能模块的数据库设计" class="headerlink" title="电商常用功能模块的数据库设计"></a>电商常用功能模块的数据库设计</h2><p>模块的划分:</p><p>注册会员–展示商品–加入购物车–生成订单</p><h2 id="使用的工具和需要掌握的内容"><a href="#使用的工具和需要掌握的内容" class="headerlink" title="使用的工具和需要掌握的内容"></a>使用的工具和需要掌握的内容</h2><ol><li><p>使用MySQL5.7版本.</p></li><li><p>Mysql的图形客户端程序,Mysqlworkbench.</p></li><li><p>Linux下命令和Shell脚本的基础知识.</p></li></ol><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>常见的购物流程:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">用户登录</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">选购商品</span><span class="literal">-</span><span class="literal">-</span><span class="comment">加购物车</span><span class="literal">-</span><span class="literal">-</span><span class="comment">检查库存</span><span class="literal">-</span><span class="literal">-</span><span class="comment">提交订单</span>            <span class="comment">YES</span></span><br><span class="line"><span class="comment"></span>                                            <span class="literal">-</span><span class="literal">-</span>  <span class="comment">在线支付</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">订单付款</span></span><br><span class="line"><span class="comment"></span>                                                          <span class="comment">YES</span></span><br><span class="line"><span class="comment"></span>                                            <span class="literal">-</span><span class="literal">-</span>  <span class="comment">货到付款</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">订单付款</span></span><br></pre></td></tr></table></figure><p>需要以下几个模块的设计</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户模块: 完成用户注册和登录验证.</span><br><span class="line"></span><br><span class="line">商品模块: 前后台商品管理和浏览.</span><br><span class="line"></span><br><span class="line">订单模块: 订单及购物车的生成和管理.</span><br><span class="line"></span><br><span class="line">仓配模块: 仓库库存和物流管理功能.</span><br></pre></td></tr></table></figure><h2 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h2><p>1.数据库结构设计</p><p>逻辑设计 —&gt; 物理设计</p><p>2.实际工作中</p><p>逻辑设计 + 物理设计</p><p>3.物理设计<br>一般就是<code>表名</code>,<code>字段名</code>,<code>字段类型</code>的设计.</p><p><strong>数据库规范概述</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>数据库命名规范</span><br><span class="line"><span class="bullet">2. </span>数据库基本设计规范</span><br><span class="line"><span class="bullet">3. </span>数据库索引命名和优化</span><br><span class="line"><span class="bullet">4. </span>数据库字段设计规范</span><br><span class="line"><span class="bullet">5. </span>数据库SQL开发规范</span><br><span class="line"><span class="bullet">6. </span>数据库操作行为规范</span><br></pre></td></tr></table></figure></p><h3 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h3><h4 id="所有数据库对象名称必须使用小写字母并用下划线分割"><a href="#所有数据库对象名称必须使用小写字母并用下划线分割" class="headerlink" title="所有数据库对象名称必须使用小写字母并用下划线分割."></a>所有数据库对象名称必须使用小写字母并用下划线分割.</h4><p>原因就是Mysql数据库对大小写敏感.</p><p>不同的数据库名    eg: DBName  dbname</p><p>不同的表名        eg :Table   table     tabLe</p><h4 id="所有数据库对象名称禁止使用Mysql保留关键字"><a href="#所有数据库对象名称禁止使用Mysql保留关键字" class="headerlink" title="所有数据库对象名称禁止使用Mysql保留关键字"></a>所有数据库对象名称禁止使用Mysql保留关键字</h4><p>比如说你给列名起了个名字叫<code>form</code></p><p>那么查询的时候就可能出现<code>select id,username,from,age from tb_user;</code>这种情况.</p><p>执行SQL的时候,mysql不清楚这2个form有什么区别.</p><p>要非解决这种问题哪,就用`from``来区分关键字.</p><h4 id="数据库对象的命名要能做到见名识义-并且不能超过32个字符"><a href="#数据库对象的命名要能做到见名识义-并且不能超过32个字符" class="headerlink" title="数据库对象的命名要能做到见名识义,并且不能超过32个字符"></a>数据库对象的命名要能做到见名识义,并且不能超过32个字符</h4><p>eg: 数据库命名示例: mc_userdb</p><p>eg: 用户账号表: user_count</p><p><strong>一般的临时表的命名规范:</strong></p><p>像导入导出数据表,临时统计所使用的表,用完马上清理掉,最好.</p><p>但是大部分情况下都不允许,所以我们<code>建立临时表时,必须要以tmp为前缀并以日期为后缀.</code></p><p>eg : tmp_export_data_2018_01_28</p><p><strong>备份表</strong></p><p>备份表必须以bak为前缀并以日期为后缀.</p><p>eg : bak_copy_data_2018_01_28</p><p><strong>所有存储相同数据的列名和列类型必须一致</strong></p><p>观察下面的的示例.</p><p><strong>用户信息表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customer_inf(</span><br><span class="line">  customer_inf_id <span class="built_in">int</span> <span class="keyword">unsigned</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'自增'</span>,</span><br><span class="line">  customer_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'customer login 表的自增'</span>,</span><br><span class="line">  customer_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'用户真实姓名'</span>,</span><br><span class="line">  identity_card_type tinyint <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'证件类型: 1 身份证, 2 微信网证'</span>,</span><br><span class="line">  identify_card_no <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">comment</span> <span class="string">'证件号码'</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p><strong>订单表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_master(</span><br><span class="line">  order_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'订单ID'</span>,</span><br><span class="line">  order_sn <span class="built_in">bigint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'订单编号 yyyymmddnnnnnnn'</span>,</span><br><span class="line">  customer_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'下单人ID'</span>,</span><br><span class="line">  shipping_user <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'收货人姓名'</span>,</span><br><span class="line">  province <span class="built_in">SMALLINT</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'收获人所在省'</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p>我们可以观察到用户信息表中的<code>customer_id</code>字段和订单表中<code>customer_id</code>字段类型和大小相同:都是无符号的int类型.</p><p>这对于数据库的查询性能是非常重要的.一般都是关联列,对于查询的效率很有影响.</p><h2 id="数据库命名规范总结"><a href="#数据库命名规范总结" class="headerlink" title="数据库命名规范总结"></a>数据库命名规范总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有数据库对象名称必须小写.</span><br><span class="line"><span class="bullet">2. </span>命名要见名识意,禁止使用Mysql的保留关键字.</span><br><span class="line"><span class="bullet">3. </span>临时表要以tmp<span class="emphasis">_开头,备份表以bak_</span>开头,并且以时间戳结尾.</span><br><span class="line"><span class="bullet">4. </span>所有存储相同数据的列名和列类型必须保持一致.</span><br></pre></td></tr></table></figure><h2 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h2><p>现在可能还存在着Mysql5.5使用之前MyISAM(默认存储引擎)情况.</p><p>如今的Mysql5.7没有其他需求的话,默认是是使用<code>Innodb存储引擎</code>.</p><h3 id="所有的表都要使用Innodb存储引擎"><a href="#所有的表都要使用Innodb存储引擎" class="headerlink" title="所有的表都要使用Innodb存储引擎"></a>所有的表都要使用Innodb存储引擎</h3><p>原因就是Innodb存储引擎支持事务,行级锁,更好的恢复性,高并发下性能更好.与Oracle很相似.</p><p>MyISAM在高并发的情况下,锁表是一种很常见的性能问题.Innodb存存储引擎解决了很多问题.</p><h3 id="数据库和表的字符集统一使用UTF-8"><a href="#数据库和表的字符集统一使用UTF-8" class="headerlink" title="数据库和表的字符集统一使用UTF-8"></a>数据库和表的字符集统一使用UTF-8</h3><p>如果之存储中文字符的话,用GBK/GB2312字符集都可以.</p><p><strong>统一的字符集可以避免由于字符集准换成的乱码.</strong></p><p>Mysql中的UTF8字符集汉字点3个字节,ASCII码占用1个字节.</p><p>eg : 如果定义了varchar(255)的列使用UTF8存储中文字符,255个字符实际占用755个字节.</p><h3 id="所有表和字段都要添加注释"><a href="#所有表和字段都要添加注释" class="headerlink" title="所有表和字段都要添加注释"></a>所有表和字段都要添加注释</h3><p>使用comment从句添加表这列的备注,这些我们基本都知道.</p><p>目的: 从一开始就进行数据字典的维护.</p><h3 id="尽量控制单表数据量的大小-建议控制在500万行以内"><a href="#尽量控制单表数据量的大小-建议控制在500万行以内" class="headerlink" title="尽量控制单表数据量的大小,建议控制在500万行以内"></a>尽量控制单表数据量的大小,建议控制在500万行以内</h3><p>但是500万行数据量并不是Mysql数据库的限制</p><p><strong>Mysql存储数据量的大小,取决于存储设置和文件系统,Mysql并没有对其进行了限制.</strong></p><p>比如所: 32位操作系统单个文件不能超过2个G.所以32位操作系统限制了Mysql数据库的存储容量大小.</p><p>但是我们都使用64为的操作系统了,所以不必考虑存储容量的限制了.</p><p><strong>可以使用历史数据归档,分库分表等手段来控制数据量大小.</strong></p><p>这主要用在业务复杂的方面:比如订单表</p><h3 id="谨慎的使用Mysql分区表"><a href="#谨慎的使用Mysql分区表" class="headerlink" title="谨慎的使用Mysql分区表"></a>谨慎的使用Mysql分区表</h3><p>分区表在物理上表现为多个文件,在逻辑上表现为一个表.</p><p>谨慎选择分区主键,跨分区查询效率可能更低.</p><p>建议采用物理分表的方式管理大数据.</p><h3 id="尽量做到冷热数据分离-减少表的宽度"><a href="#尽量做到冷热数据分离-减少表的宽度" class="headerlink" title="尽量做到冷热数据分离,减少表的宽度"></a>尽量做到冷热数据分离,减少表的宽度</h3><p>除了注意表中的行,我们还要注意表中的宽度,Mysql对表中的数据行没有限制,但是一个表中所能包含的列却有限制.</p><p>Mysql限制一个表中最多存放4096列,并且每一行的大小不能超过65535个字节.</p><p><strong>减少磁盘IO,保证热数据的内存缓存命中率</strong></p><p><strong>利用更有效的利用缓存,避免读入无用的冷数据</strong></p><p><strong>为了保证表的宽度,要使用垂直拆分:经常一起使用的列放到一个表中,可以避免过多的冗关联操作,从另一方面可以提高查询的性能</strong></p><h3 id="禁止在表中建立预留字段"><a href="#禁止在表中建立预留字段" class="headerlink" title="禁止在表中建立预留字段"></a>禁止在表中建立预留字段</h3><p>一般是采用varchar类型,但是这种类型占用空间比较大.</p><p>预留字段的命名很难做到见名识义</p><p>预留字段无法确认存储的数据类型,所以无法选择合适的类型.</p><p>对预留字段类型的修改,会对表进行锁定.</p><h3 id="禁止在数据库中存储图片-文件等二进制数据"><a href="#禁止在数据库中存储图片-文件等二进制数据" class="headerlink" title="禁止在数据库中存储图片,文件等二进制数据"></a>禁止在数据库中存储图片,文件等二进制数据</h3><p>之前搭建了FastDFS服务器.可以解决这个问题.</p><h3 id="禁止在线上做数据库压力测试"><a href="#禁止在线上做数据库压力测试" class="headerlink" title="禁止在线上做数据库压力测试"></a>禁止在线上做数据库压力测试</h3><p>要在专门的测试环境下测试.如果业务环境没上线,就不要再管理测试了.</p><h3 id="禁止从开发环境-测试环境直接连接生产环境数据库"><a href="#禁止从开发环境-测试环境直接连接生产环境数据库" class="headerlink" title="禁止从开发环境,测试环境直接连接生产环境数据库"></a>禁止从开发环境,测试环境直接连接生产环境数据库</h3><h2 id="数据库基本设计规范总结"><a href="#数据库基本设计规范总结" class="headerlink" title="数据库基本设计规范总结"></a>数据库基本设计规范总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有表必须使用Innodb存储引擎.</span><br><span class="line"><span class="bullet">2. </span>所有表及字段都要有备注信息,并使用UTF8字符集.</span><br><span class="line"><span class="bullet">3. </span>要尽量做到控制单表大小,并把冷热数据分离.</span><br><span class="line"><span class="bullet">4. </span>禁止使用预留字段及在表中存储大的二进制数据.</span><br></pre></td></tr></table></figure><h2 id="数据库索引规范"><a href="#数据库索引规范" class="headerlink" title="数据库索引规范"></a>数据库索引规范</h2><p>索引对数据库的查询性能来说是非常重要的.</p><h3 id="不要滥用索引"><a href="#不要滥用索引" class="headerlink" title="不要滥用索引"></a>不要滥用索引</h3><p>限制每张表上的索引数量,单张表索引不超过5个.</p><p>索引并不是越多越好!索引可以提高效率同样也可以降低效率.</p><p>原因是索引可以提高查询的效率,但同样也会降低插入和更新的效率.</p><p><strong>禁止给表中的每一列都建立单独的索引.</strong></p><p>Innodb是一种索引组织表.所谓的索引组织表就是,数据存储的逻辑顺序和索引的顺序是相同的.表的存储顺序只能有一种.</p><p><strong>Innodb是按照主键索引来组织表的.</strong></p><p>固定的要求就是,<strong>每个innodb表必须有一个主键.</strong></p><p>如果你没建立.Mysql就会选择第一个非空唯一索引作为主键.</p><p>如果没有非空唯一索引,Mysql就会自动生成一个占6个字节的主键.但性能不好.</p><p>表中主键的选择:<strong>不能使用更新频繁的列作为主键,不使用多列主键.</strong></p><p>多列主键指的是<code>联合索引</code>作为主键.</p><p>Innodb是索引组织表,如果使用上面的2个索引作为主键,不断频繁的改变顺序,不但会使服务器IO增加,同时会占用大量的CPU资源.</p><p><strong>不要使用UUID,MD5,哈希,这种字符串数组的数据来作为主键.</strong></p><p>这类数据无法保证数据的顺序更改.</p><p>拿UUID来说,我们无法保证下面插入的UUID的值是否大于前面的值,要是后插入的UUID的值比前面的小.</p><p>那么Innodb为了保证表的顺序性,要把这个小的UUID的值插入到前面.</p><p>这样就会造成大于这个新值的数据往后移动,这样就会造成大量的IO操作,还会占用大量的CPU资源.降低整体服务器的类型.</p><p><strong>最好选中顺序自动增长的ID值,也就是数据库为我们提供的auto_increment 这种自增ID作为主键</strong></p><h3 id="在哪些上建立索引"><a href="#在哪些上建立索引" class="headerlink" title="在哪些上建立索引?"></a>在哪些上建立索引?</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 一般在<span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>语句的<span class="keyword">WHERE</span>从句的列建立索引.</span><br><span class="line"><span class="number">2.</span> 包含在<span class="keyword">ORDER</span> <span class="keyword">BY</span>,<span class="keyword">GROUP</span> <span class="keyword">BY</span>,<span class="keyword">DISTINCT</span>中的字段建立索引.</span><br><span class="line"><span class="number">3.</span> 通常情况下,我们会选择建立联合索引,因为这样性能会更好.</span><br><span class="line"><span class="number">4.</span> 多表<span class="keyword">JOIN</span>的关联列上建立索引.</span><br><span class="line"></span><br><span class="line">如果<span class="keyword">Join</span>的关联列上没有索引,在进行During操作的时候,性能会很差.</span><br></pre></td></tr></table></figure><h3 id="建立索引目的"><a href="#建立索引目的" class="headerlink" title="建立索引目的"></a>建立索引目的</h3><p>我们希望查询时通过索引来进行数据查找,从而减少磁盘的随机IO.增加查询的性能.所以我们的索引可以过滤出越少的数据,则我们需要从磁盘读入的数据越少.</p><h3 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序?"></a>如何选择索引列的顺序?</h3><p>我们是从左到右的顺序来使用的.</p><p><strong>我们要把区分度最高的列放在联合索引的最左侧.</strong></p><p><strong>尽量把字段长度小的列放在联合索引的最左侧.</strong></p><p><strong>使用最频繁的列放在联合索引的左侧,</strong></p><h3 id="避免建立冗余索引和重复索引"><a href="#避免建立冗余索引和重复索引" class="headerlink" title="避免建立冗余索引和重复索引"></a>避免建立冗余索引和重复索引</h3><p>1.重复索引: 索引列完全重复.</p><p>eg: primary key(id) index(id)  unique index(id)</p><p>我们一旦指定了id作为主键,就相当于在id列上建立了一个非空的唯一索引.</p><p><strong>Mysql中的主键就是一个非空的唯一索引.</strong></p><p>2.冗余索引: 部分索引列是冗余的.</p><p>eg: index(a,b,c) index(a,b) index(a)</p><p>列存储</p><p>存储空间数据</p><p>create table user (id int unsigned auto_increment primary key,name varchar(32) not null,age int(2) not null,f varchar(32) not null);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;电商常用功能模块的数据库设计&quot;&gt;&lt;a href=&quot;#电商常用功能模块的数据库设计&quot; class=&quot;headerlink&quot; title=&quot;电商常用功能模块的数据库设计&quot;&gt;&lt;/a&gt;电商常用功能模块的数据库设计&lt;/h2&gt;&lt;p&gt;模块的划分:&lt;/p&gt;
&lt;p&gt;注册会员–展示商
      
    
    </summary>
    
      <category term="mysql" scheme="luoyupiaoshang.club/categories/mysql/"/>
    
    
      <category term="mysql设计" scheme="luoyupiaoshang.club/tags/mysql%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="架构优化" scheme="luoyupiaoshang.club/tags/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Redis-cluster搭建</title>
    <link href="luoyupiaoshang.club/2018/02/25/Redis%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>luoyupiaoshang.club/2018/02/25/Redis集群的搭建/</id>
    <published>2018-02-25T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis集群搭建使用的包"><a href="#Redis集群搭建使用的包" class="headerlink" title="Redis集群搭建使用的包"></a>Redis集群搭建使用的包</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e81ad3dab8dbd9fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Redis-集群的原理"><a href="#Redis-集群的原理" class="headerlink" title="Redis 集群的原理"></a>Redis 集群的原理</h2><p><a href="https://www.jianshu.com/p/2177874695c4" target="_blank" rel="noopener">redis单机版的操作</a></p><h3 id="Redis-cluster的架构"><a href="#Redis-cluster的架构" class="headerlink" title="Redis-cluster的架构"></a>Redis-cluster的架构</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-35c6a3e1a08a08a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>redis-cluster有一个投票:容错机制,用来确定是哪个节点挂了.少数服从多数.</p><p>比如下面这张图:</p><p>有5个节点,黄色的节点认为红色的节点挂了,只要剩下的3个节点有2个认为它挂了,那么红色的就认为挂了.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7568ca9150bc5eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>架构的细节</strong></p><p>1.所有的redis节点彼此互联(PING-PONG机制),内部使用2进制协议优化传输速度和带宽.</p><p>2.节点的fail是通过集群中超过半数的节点监测失效时才生效.</p><p>3.客户端与redis节点直连,不需要中间proxy层,客户端不需要连接集群所有节点,连接集群中任何一个节点即可.</p><p>4.redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster负责维护node-slot–value</p><blockquote><p>redis集群中内置了16384个哈希槽,当需要在redis集群中放置一个key-value的时候,redis先对key使用crc16算法算出一个结果.<br>然后把结果对16384取余,这样每个key都会对应一个编号在0-16383之间的哈希槽,redis会根据节点数量大致均等的将哈希槽映射到不同的节点.</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/7505161-91fffabab7103de4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>极限情况下,允许有16384个节点.</p><h2 id="redis集群的搭建步骤"><a href="#redis集群的搭建步骤" class="headerlink" title="redis集群的搭建步骤"></a>redis集群的搭建步骤</h2><p>1.一台虚拟机运行6个redis实例.端口从7001-7006.</p><p>2.复制redis实例,复制目录需要<code>-r</code></p><p><code>cp redis/bin redis-cluster/redis01 -r</code></p><p>进入<code>cd redis-cluster/redis01</code>中将持久化文件<code>dump</code>删除,不删除会对我们的集群造成影响.</p><p>接下来,修改<code>bin</code>目录下的<code>redis.conf</code>文件.主要修改<code>端口号</code>和<code>打开注释</code>.</p><p><strong>修改端口号</strong>:<code>port 7001</code></p><p><strong>打开注释</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-94046664c79fd963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>接下来修改剩余的5个.</p><p>3.写脚本启动<code>start-all.sh</code><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> redis01</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis02</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis03</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis04</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis05</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis06</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br></pre></td></tr></table></figure></p><p>无法启动,是因为需要授权的.</p><p><code>chmod u+x start-all.sh</code></p><p>4.查看是否启动</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0064e1761e1535c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.进入redis源代码里面找一个文件</p><p>也就是在<code>`/root/redis-4.0.8/src目录下去寻找.使用</code>ll *.rb<code>会找到</code>redis-trib.rb`这个文件.</p><p>将这个文件复制到<code>/usr/local/redis-cluster</code>这个目录中.</p><p>现在的目录结构:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5dbfaea302e681c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>6.安装ruby环境<br><code>yum install ruby</code><br><br><code>yum install rubygems</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-225c22e64e190848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>输入你失败提示的那个的地址,去浏览器下载<code>specs.4.8.gz</code>这个文件,,输入<code>gem install redis</code>就能成功了.</p><p>7.ruby脚本</p><p><code>./redis-trib.rb create --replicas 1 192.168.25.133:7001 192.168.25.133:7002 192.168.25.133:7003 192.168.25.133:7004 192.168.25.133:7005 192.168.25.133:7006</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b08fbbac48ee56c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>8.查看分配的主从服务器,以及槽的分配</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-cluster]# ./redis-trib.rb create --replicas <span class="number">1</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on <span class="number">6</span> nodes...</span><br><span class="line">Using <span class="number">3</span> masters:</span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line"><span class="symbol">M:</span> f525a4b2a3ff6cc32a36f276b17460910ac6334f <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="symbol">M:</span> f865949d32a241285032a900ea0911859f83c44e <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line"><span class="symbol">M:</span> db89b6f29ffa891ab166a39fb6101be99b763859 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="symbol">S:</span> b53df7de4aeb85751e64ec95743628a8387acf2c <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span></span><br><span class="line">   replicates db89b6f29ffa891ab166a39fb6101be99b763859</span><br><span class="line"><span class="symbol">S:</span> af12ed12992d8c15057a356d299edac4a4b630fc <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span></span><br><span class="line">   replicates f525a4b2a3ff6cc32a36f276b17460910ac6334f</span><br><span class="line"><span class="symbol">S:</span> 10189b284f51732b5a64aea3f9c8e7f545db9059 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line">   replicates f865949d32a241285032a900ea0911859f83c44e</span><br><span class="line">Can I set the above configuration? (type <span class="string">'yes'</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to <span class="number">each</span> node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span>)</span><br><span class="line"><span class="symbol">M:</span> f525a4b2a3ff6cc32a36f276b17460910ac6334f <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">M:</span> f865949d32a241285032a900ea0911859f83c44e <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">M:</span> db89b6f29ffa891ab166a39fb6101be99b763859 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">S:</span> af12ed12992d8c15057a356d299edac4a4b630fc <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates f525a4b2a3ff6cc32a36f276b17460910ac6334f</span><br><span class="line"><span class="symbol">S:</span> 10189b284f51732b5a64aea3f9c8e7f545db9059 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates f865949d32a241285032a900ea0911859f83c44e</span><br><span class="line"><span class="symbol">S:</span> b53df7de4aeb85751e64ec95743628a8387acf2c <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates db89b6f29ffa891ab166a39fb6101be99b763859</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All <span class="number">16384</span> slots covered.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis集群搭建使用的包&quot;&gt;&lt;a href=&quot;#Redis集群搭建使用的包&quot; class=&quot;headerlink&quot; title=&quot;Redis集群搭建使用的包&quot;&gt;&lt;/a&gt;Redis集群搭建使用的包&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-im
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>Spring与Redis整合</title>
    <link href="luoyupiaoshang.club/2018/02/24/%7Fspring%E5%92%8Credis%E6%95%B4%E5%90%88/"/>
    <id>luoyupiaoshang.club/2018/02/24/spring和redis整合/</id>
    <published>2018-02-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="application-redix-xml"><a href="#application-redix-xml" class="headerlink" title="application-redix.xml"></a>application-redix.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接redis单机版 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;bean id="jedisClientPool" class="lups.org.common.jedis.impl.JedisClientPool"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jedisPool" ref="jedisPool"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id="jedisPool" class="redis.clients.jedis.JedisPool"&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg name="host" value="192.168.25.133"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg name="port" value="6379"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接redis集群 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClientCluster"</span> <span class="attr">class</span>=<span class="string">"lups.org.common.jedis.impl.JedisClientCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jedisCluster"</span> <span class="attr">ref</span>=<span class="string">"jedisCluster"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisCluster"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7003"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7004"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7005"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7006"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClientTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> void TestJedisClient()&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//初始化Spring容器</span></span><br><span class="line">            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext-redis.xml"</span>);</span><br><span class="line">            <span class="comment">//通过反射来获取bean对象</span></span><br><span class="line">            JedisClient jedisClient = context.getBean(JedisClientCluster.<span class="keyword">class</span>);</span><br><span class="line">             <span class="comment">//来进行redis的操作</span></span><br><span class="line">            jedisClient.<span class="keyword">set</span>(<span class="string">"aa"</span>,<span class="string">"1234"</span>);</span><br><span class="line">            String a = jedisClient.<span class="keyword">get</span>(<span class="string">"aa"</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.println(a);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存的添加"><a href="#缓存的添加" class="headerlink" title="缓存的添加"></a>缓存的添加</h2><p>一般就在服务层里面添加.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一般显示查询缓存</span><br><span class="line"></span><br><span class="line">如果缓存中有直接响应数据</span><br><span class="line"></span><br><span class="line">缓存中没有,查询数据库.</span><br><span class="line"></span><br><span class="line">返回结果之前,把结果添加到缓存就可以了.</span><br><span class="line"></span><br><span class="line">注意的一点就是不管是添加缓存和查询缓存,都不应该影响正常的逻辑.</span><br><span class="line"></span><br><span class="line">所以把`查询/添加缓存逻辑`放在<span class="keyword">try</span>块里面.</span><br></pre></td></tr></table></figure><h2 id="缓存同步"><a href="#缓存同步" class="headerlink" title="缓存同步"></a>缓存同步</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">更新完数据库,必须要更新缓存.也就是要一致.我们要求增改操作的时候,都应该同步缓存.</span><br><span class="line"></span><br><span class="line">所以在添加/更新的时候,删除缓存中对应的数据就可以实现自动更新了.这样就可以实现缓存同步了.</span><br><span class="line"></span><br><span class="line">如果采用的是hash类型,千万不要直接删除key,否则再次查询的时候,会对服务器造成很大的压力.</span><br><span class="line"></span><br><span class="line">修改那个field,就删那个field的缓存就可以了.<span class="string">`hdel key field1`</span>.此时缓存,没有了,去查数据库,从而实现了缓存同步.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;application-redix-xml&quot;&gt;&lt;a href=&quot;#application-redix-xml&quot; class=&quot;headerlink&quot; title=&quot;application-redix.xml&quot;&gt;&lt;/a&gt;application-redix.xml&lt;/
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>Redis基本操作</title>
    <link href="luoyupiaoshang.club/2018/02/24/redis/"/>
    <id>luoyupiaoshang.club/2018/02/24/redis/</id>
    <published>2018-02-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>判断redis服务的健康状态.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2e65d5efd03b0e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">存储key-value,把key计算为一个hash值,把它放在一个位置.</span><br><span class="line"></span><br><span class="line">取得时候,先计算是哪个位置,直接去那个位置去取,</span><br><span class="line"></span><br><span class="line">是直接存取这个值,而不是遍历.</span><br><span class="line"></span><br><span class="line">Redis之所以快,是因为所有数据都是保存在内存当中的.</span><br></pre></td></tr></table></figure></p><p>5种数据类型<br>key-value类型.</p><p>string<br>hash<br>list<br>set<br>sorted set</p><h3 id="1-string类型"><a href="#1-string类型" class="headerlink" title="1.string类型"></a>1.string类型</h3><p>1.写入键值对<br><code>set str1 abc</code><br>2.取得键值对<br><code>get str1</code><br>3.显示所有的key<br><code>keys *</code><br>4.增加一个键<br><code>incr key1</code><br>5.删除操作<br><code>del key4</code><br>6.加1的操作</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b6ecd303f63c61fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>7.减1的操作</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0d6c6ab0999aae50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><code>Redis中所有的字段都是字符串,他们是先转换成整型,在加减1的.</code></p><p><code>我们观察下面的操作,就可以了.key2的键值是字符串,你给它加1,自然会出错,</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-5de49e5b35d18107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><code>要是像下面这样做就对了</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-fbaa5d14a4d9bc7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="2-hash类型"><a href="#2-hash类型" class="headerlink" title="2.hash类型"></a>2.hash类型</h3><p>1.创建一个hash<br><code>hset hash1 field1 1</code><br>2.查询一个hash的值<br><code>hget hash1 field1</code><br>3.删除一个hash<br><code>hdel hash1 field1</code><br>4.查询所有hash的field值<br><code>hkeys hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ac7d1421e7eaf530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.查询所有的hash的value值<br><code>hvals hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2c692c0e17613d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>6.查询hash所有的key-value值<br><code>hgetall hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e44ea5663b444d91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h3><p>list的元素可以重复,有序.<br>1.从左往右存储数据<br><code>rpush a b c d e f</code><br>2.从右往左储存数据<br><code>lpush 1 2 3 4 5 6</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e27713e2bb8e7749.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.查看数据范围<br><code>lrange list1 0 -1</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-544ce80889e2d2ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.取出元素<br><code>lpop list1</code><br><code>rpop list1</code><br><code>取出元素之后,就不能看到之前的全部了.</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-46681b59cb0d0f20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h3><p>set 无序,且输入的数据不能重复<br>1.添加元素<br><code>sadd set1 a b c d a b</code><br>2.删除元素<br><code>srem set1 a</code><br>3.查看元素<br><code>smembers set1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f08045c0049e09a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.seta与setb的比较</p><p><code>类似于左连接和右连接那种形式,剔除共有的部分</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-272878a72f49c3d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.取交集<br><code>sinter seta setb</code><br>6.取并集<br><code>sunion seta setb</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-00495d5eb1a723a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h3><p>元素是有序的,耗费的性能会很高. </p><p>1.升序排列<br><code>zrange zset1 0 -1 withscores</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-b083f143961a1e89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-71de8f1e4cd5f97f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.降序排列<br><code>zrevrange zset1 0 -1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ad833f1ec1f6bf20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>3.带分数倒序排序</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-217194b867712373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="设置key的过期时间"><a href="#设置key的过期时间" class="headerlink" title="设置key的过期时间"></a>设置key的过期时间</h3><p><code>expire key1 20</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7bba03ea71cf76f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>1.看看过期时间和倒计时</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ce26d0a4e5fd10b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2.永久保存和不存在的标识</p><p><code>-1是永久保存的数据(持久化),-2是不存在的数据</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-d255b5319743bf4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="redis的持久化"><a href="#redis的持久化" class="headerlink" title="redis的持久化"></a>redis的持久化</h3><p>1.重新设置过期时间</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2d673484a9d4d0e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.持久化数据<br><code>persist key3</code>,-1就代表数据持久化了.<br><img src="http://upload-images.jianshu.io/upload_images/7505161-3a7a49d54a2d4d5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.redis的持久化.<br>redis总的所有数据都是保存在内存当中的.</p><p>持久化方案有2种:</p><pre><code>1.Rdb:快照形式.定期把内存中当前时刻的数据保存到磁盘.这是Redis默认支持的持久化方案.2.aof形式:把所有对redis数据库操作的命令,增删改操作的命令,保存到文件当中,数据库恢复时把所有的命令执行一遍就可以了.</code></pre><p>redis.conf的配置里面有描述.</p><p>1.第一种:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-7d3bcac61425b092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>15分钟之内有1个key发生变化,他就保存一个快照文件.<br>5分钟之内有10个key发生变化,他就保存一个快照文件.<br>1分钟之呢有1W个key发生变化,他就保存一个快照文件.</p><p><code>快照模式有丢失文件的可能性,但是我们一般就做缓存.没多大影响.</code></p><p>2.第二种<code>把增删改操作用文件保存</code></p><p>默认是不开启的.对磁盘的IO比较频繁.<br><img src="http://upload-images.jianshu.io/upload_images/7505161-4600ea0113d356eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;p&gt;判断redis服务的健康状态.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>Redis接口的编写</title>
    <link href="luoyupiaoshang.club/2018/02/24/Redis%E9%9B%86%E7%BE%A4%E6%8E%A5%E5%8F%A3/"/>
    <id>luoyupiaoshang.club/2018/02/24/Redis集群接口/</id>
    <published>2018-02-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.382Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.linuxidc.com/Linux/2016-12/138979.htm" target="_blank" rel="noopener">防火墙关闭,也可能对搭建有影响</a></p><h2 id="使用redis-cli连接redis集群"><a href="#使用redis-cli连接redis集群" class="headerlink" title="使用redis-cli连接redis集群"></a>使用redis-cli连接redis集群</h2><p><code>redis01/redis-cli -h 192.168.25.133 -p 7001 -c</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-254223ec35185426.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>输入一个key=a,value=123.经过crc16算法对key进行hash化出来一个值,再对16384取余,就可以得到一个值,用这个值匹配对应的槽就可以了.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-53e387300cfb2977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这样就可以证明我搭建成功了.不变红就是没连接上.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5f2e680c60d95c5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="测试单机版连接"><a href="#测试单机版连接" class="headerlink" title="测试单机版连接"></a>测试单机版连接</h2><p><a href="https://www.cnblogs.com/MyMaster-zf/p/5718625.html" target="_blank" rel="noopener">防火墙检查了都没连接上的办法.</a></p><p>只能设置密码了.在<code>redis.conf</code>中设置<code>requirepass wsys</code>,其中<code>wsys</code>就是你设置的密码.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-84dc8a7f488a1b23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>测试代码</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class JedisTest &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> jedisTest() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.25.133"</span>, <span class="number">6379</span>);</span><br><span class="line">            jedis.auth(<span class="string">"wsys"</span>);</span><br><span class="line">            <span class="keyword">String</span> a = jedis.<span class="built_in">set</span>(<span class="string">"a"</span>, <span class="string">"123"</span>);</span><br><span class="line">            <span class="keyword">String</span> a1 = jedis.<span class="built_in">get</span>(<span class="string">"a"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(a1);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>JedisPool测试代码</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> jedisPoolTest() throws Exception&#123;</span><br><span class="line">       <span class="built_in">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建一个连接池对象,两个参数host,port</span></span><br><span class="line">           JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"192.168.25.133"</span>, <span class="number">6379</span>);</span><br><span class="line">           Jedis jedis= jedisPool.getResource();</span><br><span class="line">           jedis.auth(<span class="string">"wsys"</span>);</span><br><span class="line">           <span class="keyword">String</span> a = jedis.<span class="built_in">get</span>(<span class="string">"a"</span>);</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"jedisPool中取: "</span>+a);</span><br><span class="line">           jedis.<span class="built_in">close</span>();</span><br><span class="line">           jedisPool.<span class="built_in">close</span>();</span><br><span class="line">       &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>jedisCluster测试</strong></p><p>如果出现<code>java.lang.NumberFormatException</code>这个错误,需要把jedis的maven依赖版本调高点,<code>2.9.0</code>就可以了<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> jedisClusterTest() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建一个JedisCluster对象,有一个参数nodes是一个set类型,set中包含若干个HostAndPort对象.</span></span><br><span class="line">           Set&lt;HostAndPort&gt; nodes =<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7001</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7002</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7003</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7004</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7005</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7006</span>));</span><br><span class="line">           JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodes);</span><br><span class="line">           jedisCluster.<span class="built_in">set</span>(<span class="string">"b"</span>, <span class="string">"12"</span>);</span><br><span class="line">           <span class="keyword">String</span> b = jedisCluster.<span class="built_in">get</span>(<span class="string">"b"</span>);</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"jedisCluster: "</span>+b);</span><br><span class="line">           jedisCluster.close();</span><br><span class="line">           <span class="comment">//java.lang.NumberFormatException</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>总结</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.单机版用jedispool来操作jedis.</span><br><span class="line"><span class="number">2</span>.集群版直接使用jedisCluster就可以了.</span><br></pre></td></tr></table></figure><h2 id="编写jedisclient的接口以及单机版-amp-amp-集群版的实现类"><a href="#编写jedisclient的接口以及单机版-amp-amp-集群版的实现类" class="headerlink" title="编写jedisclient的接口以及单机版&amp;&amp;集群版的实现类"></a>编写jedisclient的接口以及单机版&amp;&amp;集群版的实现类</h2><p>1.jedisClient<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface JedisClient &#123;</span><br><span class="line">    <span class="comment">//字符串的操作</span></span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> value);</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//判断字符串的键值是否存在</span></span><br><span class="line">    Boolean exists(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//过期时间的设置</span></span><br><span class="line">    Long expire(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="built_in">int</span> seconds);</span><br><span class="line">    <span class="comment">//剩余过期时间</span></span><br><span class="line">    Long ttl(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//hash类型的操作</span></span><br><span class="line">    Long hset(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field,<span class="keyword">String</span> value);</span><br><span class="line">    <span class="comment">//增加1</span></span><br><span class="line">    Long incr(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//查询hash类型</span></span><br><span class="line">    <span class="keyword">String</span> hget(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field);</span><br><span class="line">    <span class="comment">//删除hash类型</span></span><br><span class="line">    Long hdel(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span>... field);</span><br><span class="line">    <span class="comment">//判断hash类型是否存在</span></span><br><span class="line">    Boolean hexists(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field);</span><br><span class="line">    <span class="comment">//查询所有hash的值</span></span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; hvals(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//删除一个键值对</span></span><br><span class="line">    Long del(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.jedisClientPool<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">package lups.<span class="keyword">org.common.jedis.impl;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">import </span><span class="keyword">java.util.List;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">import </span>lups.<span class="keyword">org.common.jedis.JedisClient;</span></span><br><span class="line"><span class="keyword">import </span>redis.clients.<span class="keyword">jedis.Jedis;</span></span><br><span class="line"><span class="keyword">import </span>redis.clients.<span class="keyword">jedis.JedisPool;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">public </span>class <span class="keyword">JedisClientPool </span>implements <span class="keyword">JedisClient </span>&#123;</span><br><span class="line"></span><br><span class="line">private <span class="keyword">JedisPool </span><span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"></span>public <span class="keyword">JedisPool </span>getJedisPool() &#123;</span><br><span class="line">return <span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"></span><br><span class="line">public void setJedisPool(<span class="keyword">JedisPool </span><span class="keyword">jedisPool) </span>&#123;</span><br><span class="line">this.<span class="keyword">jedisPool </span>= <span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String set(String key, String value) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.set(key, </span>value)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String get(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.get(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">Boolean </span>exists(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Boolean </span>result = <span class="keyword">jedis.exists(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long expire(String key, int seconds) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.expire(key, </span>seconds)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long ttl(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.ttl(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long incr(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.incr(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long hset(String key, String field, String value) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.hset(key, </span>field, value)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String hget(String key, String field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.hget(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long hdel(String key, String... field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.hdel(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">Boolean </span>hexists(String key, String field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Boolean </span>result = <span class="keyword">jedis.hexists(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;String&gt; hvals(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>List&lt;String&gt; result = <span class="keyword">jedis.hvals(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long del(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.del(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.jedisClientCluster<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lups.org.common.jedis.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lups.org.common.jedis.JedisClient;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class JedisClientCluster implements JedisClient &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> JedisCluster getJedisCluster() &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setJedisCluster(JedisCluster jedisCluster) &#123;</span><br><span class="line"><span class="keyword">this</span>.jedisCluster = jedisCluster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.<span class="built_in">set</span>(<span class="built_in">key</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Boolean exists(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.exists(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long expire(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> seconds) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.expire(<span class="built_in">key</span>, seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long ttl(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.ttl(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long incr(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.incr(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long hset(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field, <span class="keyword">String</span> value) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hset(<span class="built_in">key</span>, field, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> hget(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hget(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long hdel(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span>... field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hdel(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Boolean hexists(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hexists(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; hvals(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hvals(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long del(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.del(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.linuxidc.com/Linux/2016-12/138979.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;防火墙关闭,也可能对搭建有影响&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用redis-cli连接r
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Redis-cluster" scheme="luoyupiaoshang.club/tags/Redis-cluster/"/>
    
  </entry>
  
  <entry>
    <title>DB02-数据库字段设计规范</title>
    <link href="luoyupiaoshang.club/2018/02/22/DB02-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>luoyupiaoshang.club/2018/02/22/DB02-数据库字段设计规范/</id>
    <published>2018-02-22T02:16:47.000Z</published>
    <updated>2018-04-05T02:25:54.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>每个innodb表都要有一个主键</span><br><span class="line"><span class="number">2.</span>限制表上索引的数量,避免建立重复和冗余索引</span><br><span class="line"><span class="number">3.</span>注意合理选择符合索引键值的顺序</span><br></pre></td></tr></table></figure><h2 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h2><p>字段类型的选择,会直接影响数据库的建立.</p><p>列的字段越大,建立索引时所需要的空间就会越大.</p><h3 id="优先选择符合存储需要的最小数据类型"><a href="#优先选择符合存储需要的最小数据类型" class="headerlink" title="优先选择符合存储需要的最小数据类型."></a>优先选择符合存储需要的最小数据类型.</h3><p>1.我们一般是将字符串转为数字类型存储.</p><p>下面的函数的转换:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INET_ATON('<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span>') = <span class="number">4294967295</span></span><br><span class="line">把字符串的IP地址转换成整型.</span><br><span class="line"></span><br><span class="line">反之,把整型转换成字符串的IP地址</span><br><span class="line">INET_NTOA('<span class="number">4294967295</span>') = <span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span></span><br></pre></td></tr></table></figure></p><p>2.对于非负型的数据来说,要优先使用无符号整型来存储</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;复习&quot;&gt;&lt;a href=&quot;#复习&quot; class=&quot;headerlink&quot; title=&quot;复习&quot;&gt;&lt;/a&gt;复习&lt;/h2&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="mysql" scheme="luoyupiaoshang.club/categories/mysql/"/>
    
    
      <category term="mysql设计" scheme="luoyupiaoshang.club/tags/mysql%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>mysql服务器日志</title>
    <link href="luoyupiaoshang.club/2018/02/01/mysql%E6%97%A5%E5%BF%97%E5%88%92%E5%88%86/"/>
    <id>luoyupiaoshang.club/2018/02/01/mysql日志划分/</id>
    <published>2018-02-01T08:25:37.000Z</published>
    <updated>2018-04-05T02:25:53.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mysql的使用情景"><a href="#Mysql的使用情景" class="headerlink" title="Mysql的使用情景"></a>Mysql的使用情景</h2><h3 id="日志记录系统"><a href="#日志记录系统" class="headerlink" title="日志记录系统"></a>日志记录系统</h3><p>MySQL 数据库的插入和查询性能都非常的高效，如果设计地较好，在使用 MyISAM 存储引擎的时候，两者可以做到互不锁定，达到很高的并发性能。</p><p>所以，对需要大量的插入和查询日志记录的系统来说，MySQL 是非常不错的选择。</p><p>比如处理用户的登录日志，操作日志 等 ，都是非常适合的应用场景。</p><h3 id="数据仓库系统"><a href="#数据仓库系统" class="headerlink" title="数据仓库系统"></a>数据仓库系统</h3><p>随着现在数据仓库数据量的飞速增长，我们需要的存储空间越来越大。数据量的不断增长，使数据的统计分析变得越来越低效，也越来越困难。</p><p>解决方式如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 采用昂贵的高性能主机以提高计算性能，用高端存储设备提高 I/O 性能，效果理想，但是成本非常高；</span><br><span class="line">2. 通过将数据复制到多台使用大容量硬盘的廉价 pc server上，以提高整体计算性能和 I/O 能力，效果尚可，存储空间有一定限制，成本低廉.</span><br><span class="line">3. 通过将数据水平拆分，使用多台廉价的 pc<span class="built_in"> server </span>和本地磁盘来存放数据，每台机器上面都只有所有数据的一部分，解决了数据量的问题，</span><br><span class="line">   所有 pc<span class="built_in"> server </span>一起并行计算，也解决了计算能力问题，通过中间代理程序调配各台机器的运算任务，</span><br><span class="line">   既可以解决计算性能问题又可以解决 I/O 性能问题，成本也很低廉.</span><br></pre></td></tr></table></figure><p>这是基本解决方法.对于Mysql来讲,实现2,3步骤很容易,通过读写分离,主从复制就可以实现.</p><p>通过 MySQL 的简单复制功能，可以很好的将数据从一台主机复制到另外一台 ，不仅仅在局域网内可以复制，在广域网同样可以。优点在于Mysql是免费的.</p><h2 id="Mysql的架构组成"><a href="#Mysql的架构组成" class="headerlink" title="Mysql的架构组成"></a>Mysql的架构组成</h2><h3 id="Mysql的物理文件组成"><a href="#Mysql的物理文件组成" class="headerlink" title="Mysql的物理文件组成"></a>Mysql的物理文件组成</h3><h4 id="Mysql5-7服务器日志"><a href="#Mysql5-7服务器日志" class="headerlink" title="Mysql5.7服务器日志"></a>Mysql5.7服务器日志</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>选择常规查询和慢查询日志输出目的地</span><br><span class="line"><span class="bullet">2. </span>错误日志</span><br><span class="line"><span class="bullet">3. </span>一般查询日志</span><br><span class="line"><span class="bullet">4. </span>二进制日志(Binlog)</span><br><span class="line"><span class="bullet">5. </span>manchaxun rizhi</span><br><span class="line"><span class="bullet">6. </span>DDL 日志</span><br><span class="line"><span class="bullet">7. </span>服务器日志维护</span><br></pre></td></tr></table></figure><h2 id="MySQL服务器有几个日志可以帮助你找出正在发生的活动"><a href="#MySQL服务器有几个日志可以帮助你找出正在发生的活动" class="headerlink" title="MySQL服务器有几个日志可以帮助你找出正在发生的活动."></a>MySQL服务器有几个日志可以帮助你找出正在发生的活动.</h2><p>日志类型:</p><ul><li>错误日志</li><li>一般查询日志</li><li>二进制日志</li><li>中继日志</li><li>慢查询日志</li><li>DDL日志(元数据日志)<br>-<br>写入日志的信息:</li><li>在启动,运行或者停止mysqld时遇到的问题</li><li>建立了客户的客户关系和声明</li><li>改变数据的语句(也可用于复制)</li><li>从复制主服务器接收的数据更改</li><li>查询花费了超过 long_query_time几秒的时间执行</li><li>元数据操作由DDL语句执行</li></ul><hr><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，除Windows上的错误日志之外，不会启用任何日志。</span><br><span class="line"></span><br><span class="line">DDL日志始终在需要时创建，并且没有用户可配置选项;</span><br><span class="line"></span><br><span class="line">默认情况下，服务器为数据目录中的所有启用日志写入文件。</span><br><span class="line"></span><br><span class="line">您可以通过刷新日志来强制服务器关闭并重新打开日志文件（或在某些情况下切换到新的日志文件）。</span><br><span class="line"></span><br><span class="line">发出FLUSH LOGS语句时发生日志刷新 ; 用a 或者参数执行 mysqladmin ; 或使用 或 选项执行 mysqldump。</span><br><span class="line"></span><br><span class="line">例如<span class="symbol">:flush-logsrefresh--flush-logs--master-data</span></span><br><span class="line"></span><br><span class="line">另外，二进制日志在其大小达到max_binlog_size系统变量的值时被刷新 。</span><br><span class="line"></span><br><span class="line">可以在运行时控制常规查询和慢查询日志.可以启动或者禁用日志记,或者更改日志文件名称.</span><br><span class="line"></span><br><span class="line">也可以告诉服务器编写通用查询和慢查询条目来记录表或者日志文件.</span><br><span class="line"></span><br><span class="line">日志维护操作(比如<span class="symbol">:</span>旧日志文件到期)的信息</span><br><span class="line"></span><br><span class="line">有关保持日志安全的信息</span><br><span class="line"></span><br><span class="line">以上都可以查看下列链接.</span><br></pre></td></tr></table></figure><p>TODO:</p><p><a href="">DDL日志</a></p><p><a href="">FLUSH语法</a></p><p><a href="">mysqladmin - 管理MySQL服务器的客户端</a></p><p><a href="">mysqldump–数据库备份程序</a></p><p><a href="">从服务器中继日志</a></p><p><a href="">服务器日志维护</a></p><p><a href="">密码和日志记录</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mysql的使用情景&quot;&gt;&lt;a href=&quot;#Mysql的使用情景&quot; class=&quot;headerlink&quot; title=&quot;Mysql的使用情景&quot;&gt;&lt;/a&gt;Mysql的使用情景&lt;/h2&gt;&lt;h3 id=&quot;日志记录系统&quot;&gt;&lt;a href=&quot;#日志记录系统&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="ServiceLog" scheme="luoyupiaoshang.club/tags/ServiceLog/"/>
    
  </entry>
  
  <entry>
    <title>选择常规查询和慢速查询日志的输出目的地</title>
    <link href="luoyupiaoshang.club/2018/01/27/%E9%80%89%E6%8B%A9%E5%B8%B8%E8%A7%84%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%85%A2%E9%80%9F%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E7%9A%84%E8%BE%93%E5%87%BA%E7%9B%AE%E7%9A%84%E5%9C%B0/"/>
    <id>luoyupiaoshang.club/2018/01/27/选择常规查询和慢速查询日志的输出目的地/</id>
    <published>2018-01-27T08:25:37.000Z</published>
    <updated>2018-04-05T02:25:55.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果启用了这些日志，则MySQL服务器可以灵活地控制输出目标到常规查询日志和慢速查询日志。</p><p>日志条目的可能目标是日志文件或 数据库中的general_log和 slow_log表mysql。</p><p>可以选择任一个或两个目的地。</p><h2 id="服务器启动时的日志控制。"><a href="#服务器启动时的日志控制。" class="headerlink" title="服务器启动时的日志控制。"></a>服务器启动时的日志控制。</h2><p>该–log-output选项指定日志输出的目的地.</p><p>该选项本身不会启用日志。它的语法是 ： –log-output[=value,…]</p><blockquote><p>如果–log-output给定值，则该值应该是一个或多个单词TABLE（记录到表）， FILE（记录到文件）或 NONE（不记录到表或文件）的以逗号分隔的列表。 NONE如果存在的话，优先于任何其他说明符。</p><p>如果–log-output省略，则默认日志记录目标为FILE。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果启用了这些日志，则MySQL服务器可以灵活地控制输出目标到常规查询日志和慢速查询日志。&lt;/p&gt;
&lt;p&gt;日志条目的可能目标是日志文件或 数
      
    
    </summary>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="ServiceLog" scheme="luoyupiaoshang.club/tags/ServiceLog/"/>
    
  </entry>
  
  <entry>
    <title>集群环境中解决Session共享问题</title>
    <link href="luoyupiaoshang.club/2018/01/25/%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%A7%A3%E5%86%B3Session%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98/"/>
    <id>luoyupiaoshang.club/2018/01/25/集群环境中解决Session共享问题/</id>
    <published>2018-01-25T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:53.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="具体业务"><a href="#具体业务" class="headerlink" title="具体业务"></a>具体业务</h2><p>1.登录需要校验用户名和密码,然后把用户信息保存在session里面。最终返回用户登录成功。</p><p>2.用户访问用户中心，必须要登录。我们使用拦截器来实现。判断用户当前是否登录。</p><p>3.在拦截器里面判断有没有Session信息，再看session中有没有用户信息。如果有Session里面有用户信息，用户就登陆了。</p><p>但是要实现高并发，高可用。用需要前端搭建nginx服务器.</p><h2 id="session共享发生的位置"><a href="#session共享发生的位置" class="headerlink" title="session共享发生的位置"></a>session共享发生的位置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过<span class="selector-tag">nginx</span>负载均衡服务器，如果用户登录，如果用户登录成功了，就会把用户信息保存到当前的<span class="selector-tag">tomcat1</span>的<span class="selector-tag">Session</span>里面。</span><br><span class="line"></span><br><span class="line">用户成功后，刷新页面，他就会去访问用户中心。</span><br><span class="line"></span><br><span class="line">判断用户是否登录，恰巧轮到<span class="selector-tag">tomcat2</span>来提供服务了。发现没有用户的登录信息。要求用户登录。</span><br><span class="line"></span><br><span class="line">接下来，又提示登录，登录成功后，<span class="selector-tag">session</span>保存在<span class="selector-tag">Tomcat1</span>里面，刷新页面，再次访问用户中心，又会访问<span class="selector-tag">Tomcat2</span><span class="selector-class">.tomcat2</span>里面没有存储用户信息的<span class="selector-tag">session</span>，所以提示再次登录。</span><br></pre></td></tr></table></figure><h2 id="一般的解决方案"><a href="#一般的解决方案" class="headerlink" title="一般的解决方案"></a>一般的解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">配置tomcat，tomcat1会广播自己的节点信息，其他的tomcat节点接收到消息，会把那一个tomcat的session复制到其他的tomcat里面来。</span><br><span class="line"></span><br><span class="line">tomcat广播形式配合session共享，会有一个节点的上限。如果不听的往集群中加tomcat的时候，会形成内网的，网络固化，会占满内网的带宽，服务器的会变慢。</span><br><span class="line"></span><br><span class="line">所有节点共享session，需要解决高并发问题。</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有一个服务器，专门存储管理session信息。（Session里面都是<span class="built_in">key</span>-<span class="built_in">value</span>的形式，并且有过期时间的设置。）</span><br><span class="line"></span><br><span class="line">需要我们来模拟Session。redis有list的存储模型，有序，且是<span class="built_in">key</span>-<span class="built_in">value</span>的形式。</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>配置tomcat集群，配置tomcatsession复制。节点不要超过<span class="number">5</span>个。</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>可以使用session服务器，保存Session信息，使每个节点是无状态，需要模拟session。</span><br><span class="line"></span><br><span class="line">单点登录系统是使用Redis模拟Session，实现session的统一管理。</span><br></pre></td></tr></table></figure><h2 id="分布式事务的理解"><a href="#分布式事务的理解" class="headerlink" title="分布式事务的理解"></a>分布式事务的理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提交订单，订单提交，提醒库房系统发货。MQ，系统发消息。</span><br><span class="line"></span><br><span class="line">出异常，就说明事情没做完，导致数据不一致，还有手动应答，把消息处理完毕，正常结束了。</span><br><span class="line"></span><br><span class="line">给服务器一个回馈，我已经成功了。 此时，服务器吧这个消息删除掉。</span><br><span class="line"></span><br><span class="line">如果没有正常消费这个消息，服务器就会不停的重发，直到这个消息处理完，就能保证这个事不停的做。最终保证数据的一致性。</span><br><span class="line"></span><br><span class="line">我们使用ActiveMQ来实现事务的最终一致性。这个就可以解决分布式事务这样的问题。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;具体业务&quot;&gt;&lt;a href=&quot;#具体业务&quot; class=&quot;headerlink&quot; title=&quot;具体业务&quot;&gt;&lt;/a&gt;具体业务&lt;/h2&gt;&lt;p&gt;1.登录需要校验用户名和密码,然后把用户信息保存在session里面。最终返回用户登录成功。&lt;/p&gt;
&lt;p&gt;2.用户访问用户
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Session共享" scheme="luoyupiaoshang.club/tags/Session%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>ajax跨域问题</title>
    <link href="luoyupiaoshang.club/2018/01/24/ajax%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>luoyupiaoshang.club/2018/01/24/ajax跨域问题/</id>
    <published>2018-01-24T08:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模拟ajax跨域问题"><a href="#模拟ajax跨域问题" class="headerlink" title="模拟ajax跨域问题"></a>模拟ajax跨域问题</h2><p>建立2个工程,一个客户端,一个服务端.</p><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-4a04cbedae7ea614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="服务端的代码"><a href="#服务端的代码" class="headerlink" title="服务端的代码"></a>服务端的代码</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-949db7dccc96f168.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/7505161-aeea368f4bee676c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="写一个get请求的测试"></p><p>虽然调用成功,但是却有问题<br><img src="http://upload-images.jianshu.io/upload_images/7505161-79ea920fd6d539ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>console栏报出错误:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-b1103ae784cc7c6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>发生ajax跨域的原因:</strong></p><p>一开始我以为是服务器后台不允许前台调用,但实际上并不是这样.</p><p>它是由于下面的原因决定的:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>浏览器限制</span><br><span class="line">这是出于浏览器安全的考虑,当他发现你的请求是跨域的时候,浏览器本身会做一些校验,如果检验不通过,就会报出跨域安全问题.</span><br><span class="line"></span><br><span class="line">服务器后台没有问题,而是浏览器校验出了问题.</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>跨域</span><br><span class="line">发出的请求不是本域的,请求协议域名,端口,任何一个不一样,浏览器都视为跨域问题.我们后台的端口是<span class="number">8080</span>,前台的端口是<span class="number">9901.</span>域名即使一样也不可以.</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="symbol">XHR</span>(<span class="symbol">XMLHTTPRequest</span>)请求</span><br><span class="line">也就是发送的不是<span class="symbol">XHR</span>请求,就算是跨域,浏览器也不会报错.</span><br><span class="line"></span><br><span class="line">如果是json的请求,就不会报出这个错误,如果是xhr类型的请求,就会出现这样的错误.</span><br><span class="line"></span><br><span class="line">普通的ajax请求返回的是json对象.</span><br><span class="line"></span><br><span class="line">jsonp请求返回的是一个json脚本.</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/<span class="number">7505161</span><span class="number">-61</span>cf20ca7baa8e64.png?imageMogr2/auto-orient/strip<span class="comment">%7CimageView2/2/w/1240)</span></span><br></pre></td></tr></table></figure></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.浏览器限制:每个人都做改动,就是客户端的改动.</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.XHR:只要发出的数据类型不是这个类型,我们就可以跨域,所以我们使用jsonp.</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.跨域</span><br><span class="line">一.被调用方(),基于HHTP协议关于跨域方面的要求做出的修改,也就是说<span class="keyword">A</span>域名调用B域名的时候,在B域名返回数据中加入一些字段允许<span class="keyword">A</span>域名调用.浏览器通过校验,就不会发生浏览器校验问题,</span><br><span class="line"></span><br><span class="line">别的公司的,调用方(隐藏跨域:通过代理,浏览器发出的都是<span class="keyword">A</span>域名的请求,把代理的URL都转到B域名里面,这样看起来就是同一个域名.)</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.浏览器禁止检查:</span><br><span class="line"></span><br><span class="line">命令行禁止启动: --<span class="keyword">disable-web-security</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">2.jsonp如何解决跨域</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">jsonp是json的一种补充使用.</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">使用jsonp后台也需要改动.</span></span><br></pre></td></tr></table></figure><h3 id="jsonp类型展示"><a href="#jsonp类型展示" class="headerlink" title="jsonp类型展示:"></a>jsonp类型展示:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url  : cartHostUrl+<span class="string">'/ajax/getproduct/'</span>,</span><br><span class="line">    type : <span class="string">'GET'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">//返回json格式的数据   </span></span><br><span class="line">    jsonp: <span class="string">'callback'</span>,</span><br><span class="line">    cache:<span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       result =json;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后台修改:</p><p><img src="https://upload-images.jianshu.io/upload_images/7505161-1f5e01e70c1cb8c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模拟ajax跨域问题&quot;&gt;&lt;a href=&quot;#模拟ajax跨域问题&quot; class=&quot;headerlink&quot; title=&quot;模拟ajax跨域问题&quot;&gt;&lt;/a&gt;模拟ajax跨域问题&lt;/h2&gt;&lt;p&gt;建立2个工程,一个客户端,一个服务端.&lt;/p&gt;
&lt;h3 id=&quot;客户端代码&quot;
      
    
    </summary>
    
      <category term="Redis" scheme="luoyupiaoshang.club/categories/Redis/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="Session共享" scheme="luoyupiaoshang.club/tags/Session%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>WebCrawler-网络爬虫01</title>
    <link href="luoyupiaoshang.club/2018/01/09/WebCrawler/"/>
    <id>luoyupiaoshang.club/2018/01/09/WebCrawler/</id>
    <published>2018-01-09T07:49:06.000Z</published>
    <updated>2018-04-05T02:25:54.750Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="大虫子"><a href="#大虫子" class="headerlink" title="大虫子"></a>大虫子</h1><p><img src="https://luoyu-1255840357.cos.ap-shanghai.myqcloud.com/skystar/51de3afb518f0.jpg" alt=""></p><h2 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h2><p>我们人做的事:<br><br>访问一个网页,输入URL,按回车,该网站的服务器就会返回一个HTML文件<br>浏览器解析返回的数据,展示在UI上.</p><p>爬虫做的事:<br><br>爬虫模仿人的操作,给网站发送一个请求,网站会给爬虫程序返回一个HTML文件,爬虫程序在根据返回的数据进行抓取分析.</p><h3 id="爬虫概论"><a href="#爬虫概论" class="headerlink" title="爬虫概论"></a>爬虫概论</h3><p>网络爬虫是一种自动化浏览网络的程序,或者叫网络机器人.<br><br>爬虫被广泛用于互联网搜索引擎或其他类似网站，以获取或更新这些网站的内容和检索方式。<br>它们可以自动采集所有其能够访问到的页面内容，以供搜索引擎做进一步处理（分检整理下载的页面），而使得用户能更快的检索到他们需要的信息。</p><p>白话:你手动打开窗口，输入数据等等操作用程序代替。用程序替你获取你想要的信息，这就是网络爬虫.</p><h3 id="爬虫应用"><a href="#爬虫应用" class="headerlink" title="爬虫应用"></a>爬虫应用</h3><p>通常搜索引擎处理的对象是互联网网页。<br><br>首先面临的问题是：如何能够设计出高效的下载系统，以将如此海量的网页数据传送到本地，在本地形成互联网网页的镜像备份。网络爬虫即起此作用，它是搜索引擎系统中很关键也很基础的构件。</p><p>爬虫：实际上就是通过相应的技术，抓取页面上特定的信息。</p><p>这种程序实际是利用html文档之间的链接关系，在Web上一个网页一个网页的爬取(crawl)，</p><p>将这些网页抓到系统来进行分析，并放入数据库中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;大虫子&quot;&gt;&lt;a href=&quot;#大虫子&quot; class=&quot;headerlink&quot; title=&quot;大虫子&quot;&gt;&lt;/a&gt;大虫子&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://luoyu-1255840357.cos.ap-shangh
      
    
    </summary>
    
    
      <category term="爬虫的原理" scheme="luoyupiaoshang.club/tags/%E7%88%AC%E8%99%AB%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    
      <category term="爬虫架构" scheme="luoyupiaoshang.club/tags/%E7%88%AC%E8%99%AB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>区块链(Blockchain)</title>
    <link href="luoyupiaoshang.club/2018/01/08/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>luoyupiaoshang.club/2018/01/08/区块链/</id>
    <published>2018-01-08T12:45:39.000Z</published>
    <updated>2018-04-05T02:25:53.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><ul><li>区块链技术起源于<code>比特币</code>,是比特币的底层技术.</li></ul><blockquote><p>区块链本身是一串使用密码学方法相关联产生的数据块,<br>  每一个数据块中包含了一次比特币网络交易的信息,并由世界各地所有的比特币用户共同维护.</p></blockquote><h2 id="区块链的本质"><a href="#区块链的本质" class="headerlink" title="区块链的本质"></a>区块链的本质</h2><ul><li>区块链的本质是<code>电子账簿</code>.<blockquote><p>通俗讲,区块链就是利用计算机程序在全网记录所有交易信息的<strong>公开大账本</strong>.<br>人们只需要加入一个公开透明的数据库,通过点对点的记账,数据传输,认证或合约<br>来达成信用共识,而不再借助任何中间方.</p></blockquote></li></ul><h2 id="区块链的特点"><a href="#区块链的特点" class="headerlink" title="区块链的特点"></a>区块链的特点</h2><ul><li>区块链特点是受第三方控制的.</li></ul><blockquote><p>区块链中每个节点和矿工必须遵循同一记账交易规则,而这个规则是基于<strong>密码算法</strong>而不是信用.<br>  同时每笔交易需要网络内其他用户的批准,所以不需要一套第三方中介结构或信任机构背锅.</p></blockquote><h2 id="区块链的安全性"><a href="#区块链的安全性" class="headerlink" title="区块链的安全性"></a>区块链的安全性</h2><p>区块链的技术采取保障其安全性的算法是<code>单向哈希算法</code>.</p><blockquote><p>区块链采取单向哈希算法,哈希(hash)算法是一种单向密码体制,即它是一个从明文到密文的不可逆的映射,只有加密过程,没有解密过程.<br>  每当有加密交易产生时,网络中有强大运算能力的矿工(Miner)就开始利用算法解密验证交易,创造出新的区块来记录最新的交易.<br>  像石榴算法,绿萝算法,企鹅算法都是常见的搜索引擎算法.</p></blockquote><h2 id="区块链的分类"><a href="#区块链的分类" class="headerlink" title="区块链的分类"></a>区块链的分类</h2><p>目前已知的区块链技术大致可分成三类:</p><ul><li><p>公开区块链(public blockchain): 像比特币,公开区块链上的数据所有人都可以访问,所有人都可以发出交易等待被写入区块链.</p></li><li><p>协作区块链(federated blockchain): 德勤等会计所尝试的<strong>审计系统</strong>,参与区款连的节点是事先选择好的,节点间很可能是有很好的网络连接.</p></li><li><p>私有区域链(private blockchain): 参与的节点只有用户自己,数据的访问和使用有严格的权限管理.</p></li></ul><h2 id="区款连的运行"><a href="#区款连的运行" class="headerlink" title="区款连的运行"></a>区款连的运行</h2><blockquote><p>区块链这个公开透明的数据库包括了过去所有的交易记录,历史数据以及其他相关信息,这些信息安全地<strong>分布式存储</strong>在一串使用密码学方法产生的数据块中,即为一个区块,每个区块都包含了一个区块的索引,即区块的哈希值(hash),而从创始区块连接当前区块,就形成了区块链.<br>    区块链自动地降低了支付成本.</p></blockquote><h2 id="15年12月重金投资区块链的初创公司"><a href="#15年12月重金投资区块链的初创公司" class="headerlink" title="15年12月重金投资区块链的初创公司"></a>15年12月重金投资区块链的初创公司</h2><blockquote><p>华尔街的金融公司正在投资区块链,抢滩布局.Visa,纳斯达克,花旗风投投资了一家旧金山区块链初创公司chain,设计融资金额达到3000万美元.</p></blockquote><h2 id="类比特币数据货币RSCoin"><a href="#类比特币数据货币RSCoin" class="headerlink" title="类比特币数据货币RSCoin"></a>类比特币数据货币RSCoin</h2><blockquote><p>英国央行计划发布由中央机构控制的类比特币数据货币RSCoin.<br>    这是一款完全基于央行的需求来设计的基于区块链技术的数字货币,该技术将依赖于一系列权威机构,如商业机构,防止货币重复消费.<br>    目前,RSCoin由伦敦大学学院(UCL)研发,已进入了初步测试阶段.</p></blockquote><h2 id="区块链的结算应用"><a href="#区块链的结算应用" class="headerlink" title="区块链的结算应用"></a>区块链的结算应用</h2><blockquote><p>瑞穗银行声明中表示:”连续地生成包含交易信息的区块按照时间顺序链接成了区块链,编程不能被篡改的信息.而且,因为信息可以在多个公司之间共享,所以合作伙伴证实它可以缩短交易后的程序所需要的时间.”<br>    区块链技术在试验过程中,也确实缩短了交易后程序的时间,达到接近即时结算的效果.</p></blockquote><h2 id="中国资本在区块链的作为"><a href="#中国资本在区块链的作为" class="headerlink" title="中国资本在区块链的作为"></a>中国资本在区块链的作为</h2><blockquote><p>作为比特币及区块链的忠实拥护者.万向集团出资5000万美元成立了区块链基金,用于在全球范围内投资区块链商业应用相关的各类项目.<br>    全球十大区块链投资中我国占据三席,分别为数贝投资,IDG,万向区块链基金.    </p></blockquote><h2 id="测试代码高亮"><a href="#测试代码高亮" class="headerlink" title="测试代码高亮"></a>测试代码高亮</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] ages</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你好啊!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    代码高亮测试</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;区块链技术起源于&lt;code&gt;比特币&lt;/code&gt;,是比特币的底层技术.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;区
      
    
    </summary>
    
      <category term="区块链(Blockchain)" scheme="luoyupiaoshang.club/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-Blockchain/"/>
    
    
      <category term="FT中文网" scheme="luoyupiaoshang.club/tags/FT%E4%B8%AD%E6%96%87%E7%BD%91/"/>
    
      <category term="区块链" scheme="luoyupiaoshang.club/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>秒杀高并发优化</title>
    <link href="luoyupiaoshang.club/2018/01/02/%E7%A7%92%E6%9D%80%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/"/>
    <id>luoyupiaoshang.club/2018/01/02/秒杀高并发优化/</id>
    <published>2018-01-02T11:59:06.000Z</published>
    <updated>2018-04-05T02:25:53.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高并发发生的位置"><a href="#高并发发生的位置" class="headerlink" title="高并发发生的位置"></a>高并发发生的位置</h2><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-85e9859248fa7aea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>红色: 可能出现高并发.</p><p>绿色: 忽略不计</p><h3 id="详情页的分析"><a href="#详情页的分析" class="headerlink" title="详情页的分析"></a>详情页的分析</h3><p>秒杀时间要到的时候,用户会自然而然的刷新秒杀页面.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-66a70a1083881608.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="CDN的理解"><a href="#CDN的理解" class="headerlink" title="CDN的理解"></a>CDN的理解</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>CDN(内部分发网络)加速用户获取数据的系统</span><br><span class="line"><span class="bullet">2. </span>部署在里用户最近的网络节点上</span><br><span class="line"><span class="bullet">3. </span>命中CDN不需要访问后端服务器</span><br><span class="line"><span class="bullet">4. </span>互联网公司有自己搭建或者租用</span><br></pre></td></tr></table></figure><h3 id="系统时间优不优化"><a href="#系统时间优不优化" class="headerlink" title="系统时间优不优化?"></a>系统时间优不优化?</h3><p>运行一次内存(Cacheline)大约10ns(可忽略不计)</p><p>我们单独获取系统时间,在Controller里面做了一个接口.</p><h3 id="秒杀地址接口分析"><a href="#秒杀地址接口分析" class="headerlink" title="秒杀地址接口分析"></a>秒杀地址接口分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 无法使用CDN缓存</span><br><span class="line">2. 适合服务器端缓存:Redis等</span><br><span class="line">3. 一致性维护成本低</span><br></pre></td></tr></table></figure><h3 id="秒杀地址接口优化"><a href="#秒杀地址接口优化" class="headerlink" title="秒杀地址接口优化"></a>秒杀地址接口优化</h3><p>存在的问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 无法使用CDN缓存(用的别人的)</span><br><span class="line">2. 后端缓存困难:库存问题</span><br><span class="line">3. 一行数据竞争:热点商品</span><br></pre></td></tr></table></figure></p><p>解决方式:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-64ea52ab89b2a6fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><h3 id="其他方案分析"><a href="#其他方案分析" class="headerlink" title="其他方案分析"></a>其他方案分析</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-6071abed5a124f26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="成本分析"><a href="#成本分析" class="headerlink" title="成本分析"></a>成本分析</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a47c7fe04bb002d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="mysqlUpdate测试"><a href="#mysqlUpdate测试" class="headerlink" title="mysqlUpdate测试"></a>mysqlUpdate测试</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-d2460fc0b5c35b4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>mysqlUpdate压力测试:同一个商品1S钟可以被卖4W次<br>但是我们并不使用mysql来解决高并发的问题,一般认为mysql比较低效.</p><h3 id="java控制事务行为的分析"><a href="#java控制事务行为的分析" class="headerlink" title="java控制事务行为的分析"></a>java控制事务行为的分析</h3><p>以一条更新语句为例:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-583d887d4ab61903.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>当所有人都去购买同一个商品的时候,都执行update操作,这样会造成用户阻塞,当排队排在最前的用户commit的时候,后面的用户才能执行update,会存在串行化的问题.</p><p>只有上一条更新操作commit的时候,下一条update SQL语句,获得行锁,才能执行更新操作.</p><p>行级锁是在Commit之后释放.</p><h3 id="高并发的难点所在"><a href="#高并发的难点所在" class="headerlink" title="高并发的难点所在"></a>高并发的难点所在</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f50b353a03de31d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>行级锁在Commit提交之后释放,要想办法减少行级锁持有的时间.</p><p>但是大部分的MySQL数据库都是云服务,部署在异地机房,就有有传播延迟,实际约20ms.</p><p>所以<strong>延迟问题</strong>也会造成行锁释放需要的时间更加长.</p><p>比如下图:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-aa7ef35e2860cb2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="判断Update更新库存成功"><a href="#判断Update更新库存成功" class="headerlink" title="判断Update更新库存成功"></a>判断Update更新库存成功</h3><p>有两个条件:<br>– update自身运行没出错<br>– 客户端确认Update影响记录数</p><p>– 优化方法:</p><pre><code>把客户端逻辑放到Mysql服务端.避免网络延迟和GC影响.</code></pre><p>将客户端逻辑放到Mysql服务端的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 定制Mysql方案:update/*+[auto_commit]*/,需要修改mysql的源码</span><br><span class="line">2. 使用存储过程:整个事务在Mysql端完成.</span><br><span class="line">````   </span><br><span class="line">### 总结</span><br><span class="line">* 前端控制暴露接口,按钮防止重复.</span><br><span class="line">* 动静态数据分离:CDN缓存,后端缓存.</span><br><span class="line">* 事务竞争优化:减少事务锁时间.</span><br><span class="line"></span><br><span class="line">## Redis的使用</span><br><span class="line">```androiddatabinding</span><br><span class="line">使用redis优化地址暴露接口</span><br><span class="line">make</span><br><span class="line">make install </span><br><span class="line">-- 需要GCC的环境</span><br><span class="line">redis-server</span><br><span class="line">集群环境下的查看监控日志:</span><br><span class="line">redis-sentinel sentinel.conf</span><br><span class="line"></span><br><span class="line">加入pom.xml依赖</span><br><span class="line">&lt;!--Redis客户端的支持--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Redis后端缓存优化"><a href="#Redis后端缓存优化" class="headerlink" title="Redis后端缓存优化"></a>Redis后端缓存优化</h2><p>我们知道在<strong>暴露接口</strong>的实现发过程中,我们是使用主键查询的方式来工作的,这样访问速度很快.<br>但是频繁的访问数据库,给我们的服务器造成了很大的压力.</p><p>我们希望Redis来做缓存,来降低访问数据库的压力.</p><h2 id="优化编码"><a href="#优化编码" class="headerlink" title="优化编码"></a>优化编码</h2><p>优化的是秒杀暴露接口,就是通过Id去查询商品的那个方法.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>传输的就是二进制的数据,所以需要将对象序列化.</p><p>一般在实体上implements serializable,这是jdk自带的序列话机制.</p><p><a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="noopener">JVM 性能比对.</a></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">采用自定义序列化<span class="comment">(protostuff)</span></span><br><span class="line"></span><br><span class="line">把我们的对象转换为二进制的数组<span class="comment">(字节数组)</span>存到Redis当中.</span><br></pre></td></tr></table></figure><h3 id="protostuff序列化的依赖"><a href="#protostuff序列化的依赖" class="headerlink" title="protostuff序列化的依赖"></a>protostuff序列化的依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--ProtoStuff的序列化依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="添加Redis服务"><a href="#添加Redis服务" class="headerlink" title="添加Redis服务"></a>添加Redis服务</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存优化</span></span><br><span class="line"><span class="comment"> * get from cache</span></span><br><span class="line"><span class="comment"> * if null</span></span><br><span class="line"><span class="comment"> * getdb</span></span><br><span class="line"><span class="comment"> * else</span></span><br><span class="line"><span class="comment"> * put cache</span></span><br><span class="line"><span class="comment"> * locgoin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class RedisDao &#123;</span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入地址&amp;&amp;端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param ip</span></span><br><span class="line"><span class="comment">     * @param port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> RedisDao(<span class="keyword">String</span> ip, <span class="built_in">int</span> port) &#123;</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(ip, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过类的字节码对象创建,</span></span><br><span class="line"><span class="comment">     * 通过类的反射可以拿到类有什么属性,哪些方法.</span></span><br><span class="line"><span class="comment">     * RunTimeSchema就是基于类的属性去做一个模式.</span></span><br><span class="line"><span class="comment">     * 创建对象的时候,会根据模式赋予相应的值.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出Seckill</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param seckillId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Seckill getSeckill(<span class="keyword">long</span> seckillId) &#123;</span><br><span class="line">        <span class="comment">//Redis缓存的逻辑:先拿到对象,判断对象是否存在,将其反序列化成对象.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jedis jedis = jedisPool.getResource();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//前缀+值的模式</span></span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">key</span> = <span class="string">"seckill:"</span> + seckillId;</span><br><span class="line">                <span class="comment">//但并没有实现内部序列化操作</span></span><br><span class="line">                <span class="comment">//get--&gt;byte[]--&gt;反序列化--&gt;Object[Seckill]</span></span><br><span class="line">                <span class="built_in">byte</span>[] bytes = jedis.<span class="built_in">get</span>(<span class="built_in">key</span>.getBytes());</span><br><span class="line">                <span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//就将这个字节数组利用protostuff序列化</span></span><br><span class="line">                    <span class="comment">//创建一个空对象</span></span><br><span class="line">                    Seckill seckill = schema.newMessage();</span><br><span class="line">                    <span class="comment">//按照schema把数据传输到空对象里面去</span></span><br><span class="line">                    ProtostuffIOUtil.mergeFrom(bytes,seckill,schema);</span><br><span class="line">                    <span class="comment">//seckill被反序列化,空间压缩到原生jdk处理的十分之一,压缩速度快,节省了CPU.</span></span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往里面防止Seckill对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param seckill</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> putSeckill(Seckill seckill) &#123;</span><br><span class="line">        <span class="comment">//set Object[Seckill] --&gt; 序列化--&gt;byte[] </span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">key</span>=<span class="string">"seckill:"</span>+seckill.getseckillId();</span><br><span class="line">                <span class="comment">//将其转为字节数组,里面内置了一个缓存器,如果当前对象特别大,会有一个缓冲的过程.</span></span><br><span class="line">                <span class="built_in">byte</span>[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));</span><br><span class="line">                <span class="comment">//经测试,这个字节数组的大小为51</span></span><br><span class="line">                <span class="comment">//超时缓存</span></span><br><span class="line">                <span class="built_in">int</span> timeout =<span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">                <span class="keyword">String</span> result = jedis.setex(<span class="built_in">key</span>.getBytes(), timeout, bytes);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span><br><span class="line">public class BaseTest &#123;</span><br><span class="line">    private long id = 1001;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisDao redisDao;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testRedisDao() &#123;</span><br><span class="line">        Seckill seckill = redisDao.getSeckill(id);</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            seckill = secKillDao.queryById(id);</span><br><span class="line">            if (seckill != null) &#123;</span><br><span class="line">                String result = redisDao.putSeckill(seckill);</span><br><span class="line">                System.out.println(&quot;存入是否成功:&quot; + result);</span><br><span class="line">                seckill = redisDao.getSeckill(id);</span><br><span class="line">                System.out.println(&quot;取出的SeckillShop是:&quot; + seckill);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发优化"><a href="#并发优化" class="headerlink" title="并发优化"></a>并发优化</h2><p>事务的发生:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-bddd21602d02c09e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>目的就是要缩短update 减库存的时候使用行级锁,到commit事务的时候释放行级锁的时间.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们把insert语句放在update语句的前面,因为他会做一个判断.</span><br><span class="line"></span><br><span class="line">insert ignore 插入成功,返回1,代表插入一行.插入失败,返回0.</span><br><span class="line"></span><br><span class="line">根据返回值来确定是否执行Update,update就是减少库存,返回1执行成功,返回0执行失败.</span><br><span class="line"></span><br><span class="line">主要目的就是降低mysql-rowLock的持有时间.</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a28f0f1e8d2c1894.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>找到SeckillService</p><p>改造SeckillServiceImpl中的代码:</p><p><code>将先执行update操作&amp;&amp;insert明细  改造成  insert操作在前然后update在后的样子</code></p><p>这样做的好处是缩短了获得行级锁的时间.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">update insert update insert </span><br><span class="line"></span><br><span class="line">2个事务</span><br><span class="line">前面先占用行级锁,然后再插入明细      后面等待行级锁,再执行插入操作,这样等待行级锁的时间会更长.</span><br><span class="line"></span><br><span class="line">insert update insert update </span><br><span class="line"></span><br><span class="line">前面插入完毕后,执行update才占用行级锁         后面先插入,然后等待行级锁.</span><br><span class="line"></span><br><span class="line">也就是两个事务同时insert的情况下,没有锁竞争,执行速度会快.</span><br></pre></td></tr></table></figure></p><p>改造代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//写明细</span><br><span class="line">           int insertState = successKilledDao.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">           //唯一的验证标准就是验证 秒杀商品的ID和用户手机号.</span><br><span class="line">           //之前秒杀成功,state=1.再次秒杀同一seckillId的商品,他就会秒杀不成功了,因为我们设置的是insert ignore,插入就会忽略,insertState返回的就是0.</span><br><span class="line">           if (insertState &lt;= 0) &#123;</span><br><span class="line">               //重复秒杀</span><br><span class="line">               throw new RepatKillException(&quot;Seckill repeted!&quot;);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               //减库存,热点商品竞争发生在这个地方</span><br><span class="line">               int updateCount = secKillDao.reduceNumber(seckillId, killTime);</span><br><span class="line">               //更新数&lt;0,说明减库存失败,没有更新到记录</span><br><span class="line">               if (updateCount &lt;= 0) &#123;</span><br><span class="line">                   //没有更新到记录,秒杀结束,rollback</span><br><span class="line">                   throw new SeckillClosedException(&quot;Seckill is closed!&quot;);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   //秒杀成功,commit</span><br><span class="line">                   SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                   return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><h2 id="事务SQL在Mysql客户端执行"><a href="#事务SQL在Mysql客户端执行" class="headerlink" title="事务SQL在Mysql客户端执行."></a>事务SQL在Mysql客户端执行.</h2><p>存储过程做优化.</p><p>目的:降低行级锁到commit的持续时间,同时让mysql获得更高的QPS.</p><p>编写mysql的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$ --console   默认的分隔符是; 现在将 ; 转换为 $$,这样看着舒服    </span><br><span class="line">--定义存储过程    </span><br><span class="line">--参数:in 输入参数; out 输入参数    </span><br><span class="line">--row_count():返回上一条修改类型sql的影响行数    </span><br><span class="line">--row_count :0;未修改数据; &gt;0;表示修改的行数;&lt;0:sql错误或者未执行sql    </span><br><span class="line">CREATE PROCEDURE `seckill`.`execute_seckill`    </span><br><span class="line">(in v_seckill_id bigint,in v_phone bigint,    </span><br><span class="line">in v_kill_time timestamp,out r_result int)    </span><br><span class="line">BEGIN    </span><br><span class="line">    DECLARE insert_count int default 0;    </span><br><span class="line">    START TRANSACTION;    </span><br><span class="line">    insert ignore into success_killed    </span><br><span class="line">    (seckill_id,user_phone,create_time)    </span><br><span class="line">    values (v_seckill_id,v_phone,v_kill_time);    </span><br><span class="line">    select row_count() into insert_count;    </span><br><span class="line">    IF (insert_count = 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -1;    </span><br><span class="line">    ELSEIF (insert_count &lt; 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -2;    </span><br><span class="line">    ELSE    </span><br><span class="line">    update seckill    </span><br><span class="line">    set number = number -1    </span><br><span class="line">    where seckill_id = v_seckill_id    </span><br><span class="line">    and start_time &lt; v_kill_time    </span><br><span class="line">    and end_time &gt; v_kill_time    </span><br><span class="line">    and number &gt; 0;    </span><br><span class="line">    select row_count() into insert_count;    </span><br><span class="line">    IF (insert_count = 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = 0;    </span><br><span class="line">    ELSEIF (insert_count &lt; 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -2;    </span><br><span class="line">    ELSE    </span><br><span class="line">    COMMIT;    </span><br><span class="line">    set r_result = 1;    </span><br><span class="line">    END IF;    </span><br><span class="line">    END IF;    </span><br><span class="line">END;  </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>执行存储的过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先把分隔符改回来</span><br><span class="line">DELIMITER ;</span><br><span class="line">1.定义一个常量</span><br><span class="line">-- 执行存储过程</span><br><span class="line">call execute_seckill(1003,13784832739,now(),@r_result);</span><br><span class="line">--  获取结果</span><br><span class="line">select @r_result;</span><br></pre></td></tr></table></figure><p>可以看到结果是result=1,执行秒杀成功.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-018aae8a40889a22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们可以查看库存和明细表.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f9df0bf1808d4ec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f4741e9bae1c6727.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="具体实现mysql的存储过程秒杀商品"><a href="#具体实现mysql的存储过程秒杀商品" class="headerlink" title="具体实现mysql的存储过程秒杀商品"></a>具体实现mysql的存储过程秒杀商品</h2><h3 id="编写service层接口"><a href="#编写service层接口" class="headerlink" title="编写service层接口"></a>编写service层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 主要是完成mysql的存储过程</span><br><span class="line">    * @param seckillId</span><br><span class="line">    * @param userPhone</span><br><span class="line">    * @param md5</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5);</span><br></pre></td></tr></table></figure><h3 id="编写Dao层接口"><a href="#编写Dao层接口" class="headerlink" title="编写Dao层接口"></a>编写Dao层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 使用存储过程执行秒杀</span><br><span class="line">    * @param paramMap</span><br><span class="line">    */</span><br><span class="line">   void killByProcedure(Map&lt;String,Object&gt; paramMap);</span><br></pre></td></tr></table></figure><h3 id="mapper中的写法"><a href="#mapper中的写法" class="headerlink" title="mapper中的写法"></a>mapper中的写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybati调用存储过程--&gt;</span><br><span class="line">   &lt;select id=&quot;killByProcedure&quot; statementType=&quot;CALLABLE&quot;&gt;</span><br><span class="line">       call execute_seckill(</span><br><span class="line">         #&#123;seckillId,jdbcType=BIGINT,mode=IN&#125;,</span><br><span class="line">         #&#123;phone,jdbcType=BIGINT,mode=IN&#125;,</span><br><span class="line">         #&#123;killTime,jdbcType=TIMESTAMP,mode=IN&#125;,</span><br><span class="line">         #&#123;result,jdbcType=INTEGER,mode=OUT&#125;</span><br><span class="line">       )</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="引入依赖Commons-collections"><a href="#引入依赖Commons-collections" class="headerlink" title="引入依赖Commons-collections"></a>引入依赖Commons-collections</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="编写Service层接口"><a href="#编写Service层接口" class="headerlink" title="编写Service层接口"></a>编写Service层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5) &#123;</span><br><span class="line">        //校验MD5</span><br><span class="line">        if(md5 == null || !md5.equals(getMd5(seckillId)) )&#123;</span><br><span class="line">            return new SeckillExecution(seckillId,SeckillStatEnum.DATA_REWRITE);</span><br><span class="line">        &#125;</span><br><span class="line">        Date killTime  = new Date();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;seckillId&quot;,seckillId);</span><br><span class="line">        map.put(&quot;phone&quot;,userPhone);</span><br><span class="line">        map.put(&quot;killTime&quot;,killTime);</span><br><span class="line">        map.put(&quot;result&quot;,null);</span><br><span class="line">        //执行存储过程,result被赋值</span><br><span class="line">        try &#123;</span><br><span class="line">            secKillDao.killByProcedure(map);</span><br><span class="line">            //获取Result</span><br><span class="line">            Integer result = MapUtils.getInteger(map, &quot;result&quot;, -2);</span><br><span class="line"></span><br><span class="line">            if(result == 1 )&#123;</span><br><span class="line">                SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.SUCCESS,successKilled);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //根据Result去拿我们的秒杀状态.</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.stateOf(result));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">            return new SeckillExecution(seckillId,SeckillStatEnum.INNER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试mysql存储过程</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void executeSeckillByProcedure()&#123;</span><br><span class="line">    long id =1003;</span><br><span class="line">    long phone= 1358963569;</span><br><span class="line">    Exposer exposer = seckillService.exportSeckillUrl(id);</span><br><span class="line">    if(exposer.isExposed())&#123;</span><br><span class="line">        //开始执行秒杀</span><br><span class="line">        String md5 = exposer.getMd5();</span><br><span class="line">            if(md5!= null)&#123;</span><br><span class="line">                SeckillExecution seckillExecution = seckillService.executeSeckillProcedure(id, phone, md5);</span><br><span class="line">                logger.info(seckillExecution.getStateInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="替换Controller"><a href="#替换Controller" class="headerlink" title="替换Controller"></a>替换Controller</h3><p>就把SeckillController中的秒杀方法改为executeSeckillByProcedure即可.</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>详情表列表</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b2f27e6e385231a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>重复秒杀</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-cd6d98f19a6d1e83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>秒杀成功</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-c2d3b10cc408d3a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>秒杀成功的json数据–execution展示.这是用存储过程来执行秒杀的.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-564db0197d8fe6f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;高并发发生的位置&quot;&gt;&lt;a href=&quot;#高并发发生的位置&quot; class=&quot;headerlink&quot; title=&quot;高并发发生的位置&quot;&gt;&lt;/a&gt;高并发发生的位置&lt;/h2&gt;&lt;p&gt;图示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jian
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="Redis" scheme="luoyupiaoshang.club/tags/Redis/"/>
    
      <category term="RowsLock" scheme="luoyupiaoshang.club/tags/RowsLock/"/>
    
      <category term="高并发" scheme="luoyupiaoshang.club/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>秒杀Service层开发</title>
    <link href="luoyupiaoshang.club/2018/01/02/%E7%A7%92%E6%9D%80service%E5%B1%82%E5%BC%80%E5%8F%91/"/>
    <id>luoyupiaoshang.club/2018/01/02/秒杀service层开发/</id>
    <published>2018-01-02T11:59:06.000Z</published>
    <updated>2018-04-05T02:25:54.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思考DAO层做的事"><a href="#思考DAO层做的事" class="headerlink" title="思考DAO层做的事"></a>思考DAO层做的事</h2><p>创建数据库,编写接口,书写mapper.xml(SQL),</p><p>配置mybatis-config.xml,整合spring-dao.xml.</p><p>总的来说就是接口设计和SQL编写.</p><p>代码和SQL进行分离,方便Review.</p><p>DAO拼接等逻辑在SERVICE层完成.</p><p>DAO层也成为数据访问层,也就是对mysql等远程系统的操作.</p><h2 id="service层包分类"><a href="#service层包分类" class="headerlink" title="service层包分类"></a>service层包分类</h2><p>dto –数据传输层,关于web和service的数据传递.</p><p>entity –业务实体的存放.</p><p>exception –秒杀结束,秒杀存货不足.</p><p>enum –枚举类</p><h3 id="service层接口的设计"><a href="#service层接口的设计" class="headerlink" title="service层接口的设计"></a>service层接口的设计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 业务接口:站在&quot;使用者&quot;角度设计接口</span><br><span class="line"> * 三个方面:方法定义粒度,参数,返回类型(return 类型/异常)</span><br><span class="line"> */</span><br><span class="line">public interface SeckillService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 展示所有秒杀记录</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;Seckill&gt; getAllSeckill();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return 展示单个秒杀记录</span><br><span class="line">     */</span><br><span class="line">    Seckill getBySeckillId(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 行为接口</span><br><span class="line">     * 秒杀开启时输出秒杀接口地址,</span><br><span class="line">     * 否则输出系统时间和秒杀时间.</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return Exposer</span><br><span class="line">     */</span><br><span class="line">    Exposer exportSeckillUrl(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行秒杀操作,需要根据商品Id和用户名来执行操作,</span><br><span class="line">     * 同时对用户的url来源渠道做一次验证.即和之前秒杀开启前的MD5值作比较.</span><br><span class="line">     *</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @param md5</span><br><span class="line">     * @Return SeckillException</span><br><span class="line">     */</span><br><span class="line">    SeckillExecution executeSeckill(long seckillId, long userPhone, String md5)</span><br><span class="line">            throws SeckillException, SeckillClosedException, RepatKillException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据传输数据的封装-dto"><a href="#数据传输数据的封装-dto" class="headerlink" title="数据传输数据的封装(dto)"></a>数据传输数据的封装(dto)</h3><h4 id="Exposer-暴露秒杀信息的的封装类"><a href="#Exposer-暴露秒杀信息的的封装类" class="headerlink" title="Exposer-暴露秒杀信息的的封装类"></a>Exposer-暴露秒杀信息的的封装类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 暴露秒杀地址DTO</span><br><span class="line"> */</span><br><span class="line">public class Exposer &#123;</span><br><span class="line">    //是否开启秒杀</span><br><span class="line">    public boolean exposed;</span><br><span class="line"></span><br><span class="line">    //MD5加密</span><br><span class="line">    private String md5;</span><br><span class="line"></span><br><span class="line">    //商品ID</span><br><span class="line">    private long seckillId;</span><br><span class="line"></span><br><span class="line">    //系统当前时间(毫秒),方便用户浏览器控制服务器的时间.</span><br><span class="line">    private Date now;</span><br><span class="line"></span><br><span class="line">    //秒杀开始时间</span><br><span class="line">    private Date start;</span><br><span class="line"></span><br><span class="line">    //秒杀结束时间</span><br><span class="line">    private Date end;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 不同的构造方法方便对象的初始化.</span><br><span class="line">     * 秒杀成功用到的构造方法</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param md5</span><br><span class="line">     * @param seckillId</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed, String md5, long seckillId) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        this.md5 = md5;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 不符合条件,用到的构造方法</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param now</span><br><span class="line">     * @param start</span><br><span class="line">     * @param end</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed,long seckillId,Date now, Date start, Date end) &#123;</span><br><span class="line">        this.exposed=exposed;</span><br><span class="line">        this.seckillId=seckillId;</span><br><span class="line">        this.now = now;</span><br><span class="line">        this.start = start;</span><br><span class="line">        this.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 秒杀开始之前,需要对秒杀地址隐藏,加密.</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param seckillId</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed, long seckillId) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isExposed() &#123;</span><br><span class="line">        return exposed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setExposed(boolean exposed) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMd5() &#123;</span><br><span class="line">        return md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setMd5(String md5) &#123;</span><br><span class="line">        this.md5 = md5;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getSeckillId() &#123;</span><br><span class="line">        return seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setSeckillId(long seckillId) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getNow() &#123;</span><br><span class="line">        return now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setNow(Date now) &#123;</span><br><span class="line">        this.now = now;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getStart() &#123;</span><br><span class="line">        return start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setStart(Date start) &#123;</span><br><span class="line">        this.start = start;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getEnd() &#123;</span><br><span class="line">        return end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setEnd(Date end) &#123;</span><br><span class="line">        this.end = end;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SeckillExecution-秒杀执行结果的封装类"><a href="#SeckillExecution-秒杀执行结果的封装类" class="headerlink" title="SeckillExecution-秒杀执行结果的封装类"></a>SeckillExecution-秒杀执行结果的封装类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 秒杀执行结果</span><br><span class="line"> */</span><br><span class="line">public class SeckillExecution &#123;</span><br><span class="line"></span><br><span class="line">    private long seckillId;</span><br><span class="line">    //秒杀执行结果状态</span><br><span class="line">    private int state;</span><br><span class="line">    //状态表示</span><br><span class="line">    private String stateInfo;</span><br><span class="line">    //秒杀成功对象</span><br><span class="line">    private SuccessKilled successKilled;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum, SuccessKilled successKilled) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getSeckillId() &#123;</span><br><span class="line">        return seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setSeckillId(long seckillId) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setState(int state) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStateInfo() &#123;</span><br><span class="line">        return stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setStateInfo(String stateInfo) &#123;</span><br><span class="line">        this.stateInfo = stateInfo;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SuccessKilled getSuccessKilled() &#123;</span><br><span class="line">        return successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setSuccessKilled(SuccessKilled successKilled) &#123;</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="秒杀接口的实现–Impl"><a href="#秒杀接口的实现–Impl" class="headerlink" title="秒杀接口的实现–Impl"></a>秒杀接口的实现–Impl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class SeckillServiceImpl implements SeckillService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用slf4j的日志</span><br><span class="line">     */</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SuccessKilledDao successKilledDao;</span><br><span class="line">    /**</span><br><span class="line">     * 与MD5结合的混淆的字符串.</span><br><span class="line">     */</span><br><span class="line">    private final String hx = &quot;aaskg8has$%^&amp;@i1564I^$&amp;*@$!&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Seckill&gt; getAllSeckill() &#123;</span><br><span class="line">        return secKillDao.queryAll(0, 4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Seckill getBySeckillId(long seckillId) &#123;</span><br><span class="line">        return secKillDao.queryById(seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断秒杀时间是否开始了</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Exposer exportSeckillUrl(long seckillId) &#123;</span><br><span class="line">        Seckill seckill = secKillDao.queryById(seckillId);</span><br><span class="line"></span><br><span class="line">        //系统当前时间</span><br><span class="line">        Date nowTime = new Date();</span><br><span class="line">        Date startTime = seckill.getStartTime();</span><br><span class="line">        Date endTime = seckill.getEndTime();</span><br><span class="line"></span><br><span class="line">        //1.如果seckill为null,不暴露地址.调用Exposer里面的初始化方法就可以了.</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            return new Exposer(false, seckillId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //2.如果秒杀时间不符合,也不能进行秒杀.</span><br><span class="line">        if (nowTime.getTime() &lt; startTime.getTime() || nowTime.getTime() &gt; endTime.getTime()) &#123;</span><br><span class="line">            return new Exposer(false, seckillId, nowTime, startTime, endTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //3.md5转换特定字符串的过程,是不可逆的.</span><br><span class="line">        String md5 = getMd5(seckillId);</span><br><span class="line">        return new Exposer(true, md5, seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成MD5字符串</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getMd5(long seckillId) &#123;</span><br><span class="line">        String base = seckillId + &quot;/&quot; + hx;</span><br><span class="line">        String md5 = DigestUtils.md5DigestAsHex(base.getBytes());</span><br><span class="line">        return md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行秒杀的实现,主要校验MD5来实现秒杀</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @param md5</span><br><span class="line">     * @return</span><br><span class="line">     * @throws SeckillException</span><br><span class="line">     * @throws SeckillClosedException</span><br><span class="line">     * @throws RepatKillException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5) throws SeckillException, SeckillClosedException, RepatKillException &#123;</span><br><span class="line"></span><br><span class="line">        //1.md5匹配不上,系统出现异常</span><br><span class="line">        if (md5 == null || !md5.equals(getMd5(seckillId))) &#123;</span><br><span class="line">            throw new SeckillException(&quot;Seckill data rewite! 你可能使用了重复秒杀的插件 !=QAQ=!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 2. md5匹配成功,</span><br><span class="line">         * 执行秒杀逻辑:</span><br><span class="line">         *  --减库存</span><br><span class="line">         *  --写明细</span><br><span class="line">         */</span><br><span class="line">        Date killTime = new Date();</span><br><span class="line">        try &#123;</span><br><span class="line">            //减库存</span><br><span class="line">            int updateCount = secKillDao.reduceNumber(seckillId, killTime);</span><br><span class="line">            //更新数&lt;0,说明减库存失败,没有更新到记录</span><br><span class="line">            if (updateCount &lt; 0) &#123;</span><br><span class="line">                //秒杀过期</span><br><span class="line">                throw new SeckillClosedException(&quot;Seckill is closed!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //写明细</span><br><span class="line">            int insertState = successKilledDao.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">            //唯一的验证标准就是验证 秒杀商品的ID和用户手机号.</span><br><span class="line">            //之前秒杀成功,state=1.再次秒杀同一seckillId的商品,他就会秒杀不成功了,因为我们设置的是insert ignore,插入就会忽略,insertState返回的就是0.</span><br><span class="line">            if (insertState &lt;= 0) &#123;</span><br><span class="line">                //重复秒杀</span><br><span class="line">                throw new RepatKillException(&quot;Seckill repeted!&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //秒杀成功</span><br><span class="line">                SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.SUCCESS, successKilled);</span><br><span class="line">                //TODO</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //这些异常的抛出有次序.我们要友好一些,要知道抛出的是哪个部分的异常.</span><br><span class="line">        //重复秒杀的异常</span><br><span class="line">        catch (RepatKillException e1) &#123;</span><br><span class="line">            throw e1;</span><br><span class="line">        &#125;</span><br><span class="line">        //秒杀时间过期的异常</span><br><span class="line">        catch (SeckillClosedException e2) &#123;</span><br><span class="line">            throw e2;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            //所有编译期异常都要转换为运行期异常</span><br><span class="line">            throw new SeckillException(&quot;seckill inner error:&quot; + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据字典的形成"><a href="#数据字典的形成" class="headerlink" title="数据字典的形成"></a>数据字典的形成</h4><p>根据条件判断需要抛出的stateInfo提示信息,直接在里面写,可用性很差,所以我们采用枚举类的方式来规范statInfo的分配.</p><h4 id="枚举类SeckillStatEnum"><a href="#枚举类SeckillStatEnum" class="headerlink" title="枚举类SeckillStatEnum"></a>枚举类SeckillStatEnum</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用枚举类表述常量数据字典</span><br><span class="line"> */</span><br><span class="line">public enum SeckillStatEnum &#123;</span><br><span class="line">    SUCCESS(1,&quot;秒杀成功!&quot;),</span><br><span class="line">    END(0,&quot;秒杀结束!&quot;),</span><br><span class="line">    REPEAT_KILL(-1,&quot;重复秒杀!&quot;),</span><br><span class="line">    INNER_ERROR(-2,&quot;系统异常!&quot;),</span><br><span class="line">    DATA_REWRITE(-3,&quot;数据篡改!&quot;);</span><br><span class="line"></span><br><span class="line">    private int state;</span><br><span class="line">    private String stateInfo;</span><br><span class="line"></span><br><span class="line">    SeckillStatEnum(int state, String stateInfo) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        this.stateInfo = stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStateInfo() &#123;</span><br><span class="line">        return stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //此静态方法迭代所有的类型</span><br><span class="line">    public static SeckillStatEnum stateOf(int index) &#123;</span><br><span class="line">        for (SeckillStatEnum state : values()) &#123;</span><br><span class="line">            //values()用来拿到所有类型</span><br><span class="line">            if (state.getState() == index) &#123;</span><br><span class="line">                return state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于以前的构造方法改造成含有枚举的表示方法.</p><p>秒杀成功用到的构造方法:<br>改造前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution(long seckillId, int state, String stateInfo, SuccessKilled successKilled) &#123;</span><br><span class="line">     this.seckillId = seckillId;</span><br><span class="line">     this.state = state;</span><br><span class="line">     this.stateInfo = stateInfo;</span><br><span class="line">     this.successKilled = successKilled;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>改造后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution(long seckillId, SeckillStatEnum statEnum) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum, SuccessKilled successKilled) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="异常的处理–Exception"><a href="#异常的处理–Exception" class="headerlink" title="异常的处理–Exception"></a>异常的处理–Exception</h4><h5 id="秒杀异常"><a href="#秒杀异常" class="headerlink" title="秒杀异常"></a>秒杀异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后两个异常都属于秒杀异常,所以继承此类即可.</span><br><span class="line"> */</span><br><span class="line">public class SeckillException extends RuntimeException &#123;</span><br><span class="line">    public SeckillException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="重复秒杀异常"><a href="#重复秒杀异常" class="headerlink" title="重复秒杀异常"></a>重复秒杀异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 重复秒杀异常(运行期异常)</span><br><span class="line"> * java的异常一般分为运行期异常和编译期异常</span><br><span class="line"> * spring声明式事务只接收运行期异常事务回滚策略.抛出非声明式异常,spring不会对其进行事务回滚.</span><br><span class="line"> */</span><br><span class="line">public class RepatKillException extends SeckillException&#123;</span><br><span class="line">    public RepatKillException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line">    public RepatKillException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="秒杀关闭异常"><a href="#秒杀关闭异常" class="headerlink" title="秒杀关闭异常"></a>秒杀关闭异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package org.seckill.exception;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: ligang</span><br><span class="line"> * date: 2018/2/7</span><br><span class="line"> * time: 15:39</span><br><span class="line"> * 秒杀时间关闭异常</span><br><span class="line"> */</span><br><span class="line">public class SeckillClosedException extends SeckillException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 运行期异常的继承,但是他们都属于秒杀异常</span><br><span class="line">     * @param message</span><br><span class="line">     */</span><br><span class="line">    public SeckillClosedException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillClosedException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Spring托管SERVICE依赖理论"><a href="#使用Spring托管SERVICE依赖理论" class="headerlink" title="使用Spring托管SERVICE依赖理论"></a>使用Spring托管SERVICE依赖理论</h2><h3 id="SpringIOC的概念"><a href="#SpringIOC的概念" class="headerlink" title="SpringIOC的概念"></a>SpringIOC的概念</h3><p>IOC-依赖注入</p><p>SpringIOC的过程会创建一个对象工厂,还会进行依赖管理,最终给一个一致的访问接口.</p><p>SuccessKillSERVICE完整的实例如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-63c952d8ab503399.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>使用IOC的好处:</strong></p><ol><li>对象创建统一托管</li><li>规范的声明周期管理</li><li>灵活的依赖注入</li><li>一致的获取对象(默认是单例)</li></ol><p>SpringIOC的注入方式和场景</p><p>三种方式实现如下</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7337c3d038b7ae0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们的IOC使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XML配置</span><br><span class="line">package-scan(包扫描)</span><br><span class="line">Annotation注解</span><br></pre></td></tr></table></figure><h3 id="springIOC的注解用法"><a href="#springIOC的注解用法" class="headerlink" title="springIOC的注解用法"></a>springIOC的注解用法</h3><ol><li>先进行包扫描</li></ol><p>在spring-service.xml里面输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--扫描Service包下所有使用注解的类型--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;org.seckill.service&quot;/&gt;</span><br></pre></td></tr></table></figure></p><ol><li>注解部分</li></ol><ul><li>@Component  如果你不知道该写@Service/@Controller的时候,@Component就是一个比较笼统的Spring容器在一个组件实例.</li><li>@Service</li><li>@Controller</li><li>dao里面的所有内容都会通过mapper.xml文件初始化放进Spring容器中,然后spring容器中回去Dao的实例,注入到相关的ervice下面</li><li>@Autowired(自动注入,就不用自己new实现类了) / @Resource / @Inject 注入方式</li></ul><h3 id="spring的声明式事务"><a href="#spring的声明式事务" class="headerlink" title="spring的声明式事务"></a>spring的声明式事务</h3><p>声明式事务就是不关心事务的开启或者提交.而是交给第三方框架来实现的.解脱事务代码.</p><p>1.执行事务的步骤<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">修改SQL<span class="number">-1</span>(更新/增加/删除)</span><br><span class="line">修改SQL<span class="number">-2</span></span><br><span class="line">修改SQL<span class="number">-3</span></span><br><span class="line">提交或者回滚</span><br></pre></td></tr></table></figure></p><p>2.声明式事务的使用方式<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ProxyFactoryBean</span> + <span class="selector-tag">XML</span>  <span class="selector-tag">----</span>  早期的使用方式(<span class="number">2.0</span>)</span><br><span class="line"><span class="selector-tag">tx</span><span class="selector-pseudo">:advice+aop</span>命名空间    <span class="selector-tag">----</span>  一次配置永久生效(使用最多的方式,不太关心事务是如何操作的)</span><br><span class="line">注解@<span class="selector-tag">Transaction</span>        <span class="selector-tag">-----</span>  注解控制(推荐使用,对我们有利)</span><br></pre></td></tr></table></figure></p><p>3.事务方法嵌套</p><p>声明式事务独有的概念<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">传播行为 --- spring默认是`propagation_required`,</span><br><span class="line">意思就是说当有一个新的事务加入中来,会直接加入到已经存在的事务,</span><br><span class="line">如果有事务存在就会直接加入到原有的事务当中,如果没有就会创建一个新的事务</span><br></pre></td></tr></table></figure></p><p>4.什么时候回滚事务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 抛出运行期异常(RuntimeException)可以执行回滚,非运行期异常可能不会全部回滚.</span><br><span class="line">2. 小心不当的try-catch,要是你使用try-catch包括一个有异常的程序,spring就会感知不到它会出现异常.</span><br></pre></td></tr></table></figure></p><ul><li><p>声明式事务的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--2.配置事务管理器,我们使用的是jdbc的事务管理器--&gt;</span><br><span class="line">   &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">       &lt;!--注入数据库连接池--&gt;</span><br><span class="line">       &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--3.配置基于声明式注解的声明式事务</span><br><span class="line">       当你输入tx:annotation-driven的时候,它会自动的把相关的schema加上</span><br><span class="line">       默认使用注解来管理事务行为</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>@Transaction的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用注解控制事务方法的优点:</span><br><span class="line">     1. 开发团队达成一致的约定,明确标注事务方法的编程风格</span><br><span class="line">     2. 保证事务方法的执行时间尽可能短,不要穿插其他的网络操作,比如:RPC/HTTP请求.或者剥离到事务方法外部:就是把它们写到方法的上一层.</span><br><span class="line">     3. 不是所有的方法都使用事务,如:只有一条修改操作,只读操作不需要事务控制.(mysql的行级锁有涉及到)</span><br></pre></td></tr></table></figure></li></ul><h3 id="service测试"><a href="#service测试" class="headerlink" title="service测试"></a>service测试</h3><p><a href="https://logback.qos.ch/manual/configuration.html" target="_blank" rel="noopener">slf4j接口的实现logback官网配置文件</a></p><p>日志logback.xml的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!--打印到控制台,默认级别是debug,时间,线程和日志的格式--&gt;</span><br><span class="line">&lt;configuration debug=&quot;true&quot;&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!-- encoders are  by default assigned the type</span><br><span class="line">             ch.qos.logback.classic.encoder.PatternLayoutEncoder --&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;debug&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类:"></a>测试类:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;,&quot;classpath:spring/spring-service.xml&quot;&#125;)</span><br><span class="line">public class SeckillServiceTest &#123;</span><br><span class="line">    //使用日志</span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SeckillService seckillService;</span><br><span class="line">    @Test</span><br><span class="line">    public void getAllSeckill() throws Exception &#123;</span><br><span class="line">        List&lt;Seckill&gt; list = seckillService.getAllSeckill();</span><br><span class="line">        logger.info(&quot;list =&#123;&#125;,&quot;,list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getBySeckillId() throws Exception &#123;</span><br><span class="line">        Seckill seckill = seckillService.getBySeckillId(1000L);</span><br><span class="line">        logger.info(&quot;list =&#123;&#125;,&quot;,seckill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void exportSeckillUrl() throws Exception &#123;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(1000L);</span><br><span class="line">        logger.info(&quot;exposer =&#123;&#125;,&quot;,exposer);</span><br><span class="line">        /**</span><br><span class="line">         *  exposer =Exposer&#123;exposed=true, md5=&apos;d592364bb958482949d97e04131f4b2e&apos;, seckillId=1000, now=null, start=null, end=null&#125;,</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void executeSeckill() throws Exception &#123;</span><br><span class="line">        long id =1000L;</span><br><span class="line">        long phone= 1245564659;</span><br><span class="line">        String md5=&quot;d592364bb958482949d97e04131f4b2e&quot;;</span><br><span class="line">         try &#123;</span><br><span class="line">             SeckillExecution seckillExecution = seckillService.executeSeckill(id, phone, md5);</span><br><span class="line">             logger.info(&quot;seckillExecution:&quot; + seckillExecution);</span><br><span class="line">         &#125;</span><br><span class="line">         catch(RepatKillException e)&#123;</span><br><span class="line">             logger.error(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">         catch (SeckillClosedException e)&#123;</span><br><span class="line">             logger.error(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">        /**</span><br><span class="line">         * 再一次执行秒杀会出现运行期异常.</span><br><span class="line">         * org.seckill.exception.RepatKillException: Seckill repeted!</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testSeckillLogic() throws Exception&#123;</span><br><span class="line">        long id =1000L;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(id);</span><br><span class="line">        logger.info(&quot;exposer =&#123;&#125;,&quot;,exposer);</span><br><span class="line">        if(exposer.isExposed())&#123;</span><br><span class="line">            //开始执行秒杀</span><br><span class="line">            long phone= 1245564359;</span><br><span class="line">            String md5 = exposer.getMd5();</span><br><span class="line">            try &#123;</span><br><span class="line">                SeckillExecution seckillExecution = seckillService.executeSeckill(id, phone, md5);</span><br><span class="line">                logger.info(&quot;seckillExecution:&quot; + seckillExecution);</span><br><span class="line">            &#125;</span><br><span class="line">            catch(RepatKillException e)&#123;</span><br><span class="line">                logger.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SeckillClosedException e)&#123;</span><br><span class="line">                logger.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            logger.warn(&quot;exposer=&#123;&#125;&quot;,exposer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//id=1001 的测试 seckillExecution:SeckillExecution&#123;seckillId=1001, state=1, stateInfo=&apos;秒杀成功!&apos;, successKilled=SuccessKilled&#123;seckillId=1001, userPhone=1245564359, state=0, createTime=Tue Feb 20 13:19:46 CST 2018&#125;&#125;</span><br><span class="line">//id=1000 的测试 21:22:24.838 [main] WARN  o.secKill.service.SeckillServiceTest - exposer=Exposer&#123;exposed=false, md5=&apos;null&apos;, seckillId=1000, now=Tue Feb 20 21:22:24 CST 2018, start=Tue Feb 20 12:41:15 CST 2018, end=Tue Feb 20 12:41:15 CST 2018&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思考DAO层做的事&quot;&gt;&lt;a href=&quot;#思考DAO层做的事&quot; class=&quot;headerlink&quot; title=&quot;思考DAO层做的事&quot;&gt;&lt;/a&gt;思考DAO层做的事&lt;/h2&gt;&lt;p&gt;创建数据库,编写接口,书写mapper.xml(SQL),&lt;/p&gt;
&lt;p&gt;配置myb
      
    
    </summary>
    
      <category term="Seckill" scheme="luoyupiaoshang.club/categories/Seckill/"/>
    
    
      <category term="Mysql" scheme="luoyupiaoshang.club/tags/Mysql/"/>
    
      <category term="SSM" scheme="luoyupiaoshang.club/tags/SSM/"/>
    
      <category term="Service" scheme="luoyupiaoshang.club/tags/Service/"/>
    
  </entry>
  
</feed>
