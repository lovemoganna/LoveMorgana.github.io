<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>李刚_产品经理实习生</title>
      <link href="/2018/04/03/interview/"/>
      <url>/2018/04/03/interview/</url>
      <content type="html"><![CDATA[<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>手机：15733207536</li><li>Email：luoyupiaoshang@gmail.com </li><li>QQ：1763296564</li></ul><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul><li>李刚/男/1995</li><li>统招本科/河北大学工商学院/土木工程</li><li>毕业时间: 2017/06</li><li>Github：<a href="https://github.com/lovemoganna" target="_blank" rel="noopener">https://github.com/lovemoganna</a></li><li>个人网站: <a href="https://luoyupiaoshang.club">https://luoyupiaoshang.club</a> </li><li>期望职位：产品经理助理</li><li>期望薪资：6K</li><li>期望城市：北京</li></ul><h2 id="现在的情况"><a href="#现在的情况" class="headerlink" title="现在的情况"></a>现在的情况</h2><p>您好,我想应聘产品经理实习生这一职位,因为我需要生产环境中来锻炼自己.</p><p><strong>和产品有关的东西</strong></p><table><thead><tr><th style="text-align:center">UML</th><th style="text-align:center">流程图和Excel展示</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.jianshu.com/p/319f32c296bb" target="_blank" rel="noopener">UML类图/用例图</a></td><td style="text-align:center"><a href="https://www.jianshu.com/p/bede71806628" target="_blank" rel="noopener">产品需求</a> &amp;&amp;<a href="https://github.com/lovemoganna/kafkaDemo" target="_blank" rel="noopener">DMEO展示</a></td></tr><tr><td style="text-align:center">Visual Paradigm</td><td style="text-align:center">WPS/XMind8/ProcessOne/Git</td></tr></tbody></table><p><strong>我对高并发和消息中间件的运用</strong></p><ul><li><p>消息中间件:<a href="https://github.com/lovemoganna/ActiveMQDemo" target="_blank" rel="noopener">spring整合ActiveMQ</a></p></li><li><p>高并发的项目: <a href="https://github.com/lovemoganna/MySeckill/tree/master/md" target="_blank" rel="noopener">秒杀项目</a></p></li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我自认为自己并不是笨,所以才花费大量的功夫.投入到java开发里面去的.</span><br><span class="line">现在的情况是,招聘java开发的人员需要我掌握更多的内功.</span><br><span class="line">java底层的东西要求多一些,我的侧重点是为了能开发而发展的.</span><br><span class="line">但是我还是想在互联网行业发展,所以打算换一个方向,来继续拼搏.</span><br><span class="line">所以我来应聘产品经理助理的职位.</span><br></pre></td></tr></table></figure><h2 id="以前捣鼓的东西"><a href="#以前捣鼓的东西" class="headerlink" title="以前捣鼓的东西"></a>以前捣鼓的东西</h2><h3 id="个人网站"><a href="#个人网站" class="headerlink" title="个人网站."></a>个人网站.</h3><table><thead><tr><th style="text-align:center">目的</th><th style="text-align:center">开发环境</th><th style="text-align:center">相关技术</th><th style="text-align:center">未来发展</th></tr></thead><tbody><tr><td style="text-align:center">记录自己用过的东西</td><td style="text-align:center">砖瓦匠/centos7/githook</td><td style="text-align:center">Nodejs/Nginx</td><td style="text-align:center">关联个人微信公众号,做消息推广</td></tr></tbody></table><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析."></a>数据分析.</h3><p>简书这个产品,活跃了不少和我一样95后的用户.其中多数都是喜欢文学的大学生,也活跃着不少像我一样喜欢开发的人员.</p><p>比CSDN,博客园,这种80后的老大哥用户,活力更胜一筹.</p><p>相比较知乎这种产品,氛围还是和谐一点的.但是知乎的学术方面和专业性还是高质量的.这点不得不服气.</p><p>我有一个<a href="https://github.com/lovemoganna/Nodejs/blob/master/jianshu/content/content.txt" target="_blank" rel="noopener">爬虫项目</a>,nodejs写的,爬取了简书里面的作者的首页和预览内容.</p><h4 id="针对简书这款产品的分析"><a href="#针对简书这款产品的分析" class="headerlink" title="针对简书这款产品的分析"></a>针对简书这款产品的分析</h4><p><em>1.高素质,年轻化.</em></p><p><code>我们可以对比一下,快手的低迷和抖音的兴起,最直观的就是快手三俗太多,抖音里面有一些实用的东西和不违反社会公德的搞笑视频,</code></p><p><code>我认为用户的质量决定了产品的质量.就这样说吧,快手的服务器也没有三天两头的宕机,为什么会被约谈?</code></p><p><code>再回到简书,活跃用户主力军就是作家,后面跟着众多的大学生用户.虽然并不具备太大的消费能力,但是有高质量的年轻血液支持,定能长久健康的发展.</code></p><p><em>2.产品使用简单方便.</em></p><p><code>用户不用具备和开发人员一样的能力.就可以感受到产品的nice体验.尤其是支持markdown语言.</code></p><p><code>这一点,我们从摄影爱好者分享的文章,可以得到肯定的答复.</code></p><p><em>3.产品的盈利模式.</em></p><p><code>官方和作家直接签约.安全可靠.</code></p><p><em>4.产品待优化的部分.</em></p><p>a.用户需求</p><p><code>因为简书的作家需要发布文章,所以需要足够的图片素材支持.产品的特点就是要具有多方面的包容性.尽可能全面的满足用户的需求.</code></p><p><code>如果要追求高逼格,那就需要积极沟通类似500px这样的国外的优质网站</code></p><p><code>如果要是接地气,那就要积极和网易的LOFTER这样的平台建立联系.</code></p><p>b.产品迭代</p><p><code>简书这款产品,如果单从编辑效率方面来说,还是很好的.</code></p><p><code>但是如果您接触过FCK编辑器,那么简书的编辑器就看起来不堪一击了.</code></p><p><code>我在做后台开发的时候,需要贴图的时候,随便打开一个网站,这个编辑器支持复制粘贴一切,</code></p><p><code>再利用FreeMarker静态化技术,可以快速的制作多个静态页面.</code></p><p><code>另外简书的Markdown功能有限制,相比较CSDN,博客园这种老牌网站,功能性有待提高.</code></p><p><strong>展示</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/7505161-6c503bf65fdedf82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="人工智能图像合成方面的认识"><a href="#人工智能图像合成方面的认识" class="headerlink" title="人工智能图像合成方面的认识"></a>人工智能图像合成方面的认识</h3><ul><li><p>目的: 本着对新奇事物的探索,我在深度学习平台<a href="http://russellcloud.com" target="_blank" rel="noopener">russellCloud</a>做了下面这个项目.这个平台提供一个GPU来供机器训练模型.</p></li><li><p>项目链接: <a href="https://github.com/lovemoganna/deepfakes" target="_blank" rel="noopener">deepfakes</a></p></li><li><p>介绍: 将二者众多的图片进行模型训练,来合成具有二者共性的多张图片.我们挑选出一张最具有特点的展示.</p></li><li><p>作用对象: 特朗普 和  恶灵骑士</p></li><li><p>得出的结果: 一次完美的换脸术.</p></li><li><p>展示:</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/7505161-a05b032241c3199d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>现在的发展: 该项技术已经延续使用在视频剪辑方面,可以做到真人换脸.几乎无缝对接.</li></ul><h3 id="电商项目"><a href="#电商项目" class="headerlink" title="电商项目"></a>电商项目</h3><p>我主要做了负责后端高并发的部分.</p><ul><li><p>框架: SSM+centos7+tomcat+nginx+zookeeper+dubbo+maven+mysql7+solr+redis</p></li><li><p>技术点: SOA架构的搭建方式,Redis缓存优化+缓存同步,centos7下Nginx反向代理,Tomcat Session共享,Mysql增删改查及优化.</p></li><li><p>收获: 一个规范的项目构成:项目经理+产品经理+前端开发人员+后端开发人员+运维人员(linux/DB )+测试组.</p></li><li><p>发展: 衍生出我的<a href="https://github.com/lovemoganna/MySeckill/tree/master/md" target="_blank" rel="noopener">秒杀项目</a></p></li></ul><h2 id="熟练工具和技能"><a href="#熟练工具和技能" class="headerlink" title="熟练工具和技能"></a>熟练工具和技能</h2><ul><li>办公工具: office</li><li>脑图/时序图/流程图: ProcessOne/XMind</li><li>统一建模语言: Visual</li><li>markdown语言</li><li>sql: mysql</li><li>linux: centos6/7 &amp;&amp; ubuntu</li><li>浏览器: firefox/chrome</li><li>熟悉的语言: java/nodejs/html/jsp</li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢观看,如果您觉得我这小伙子还可以,那麻烦您知会我一下.期待有机会同您共事!</p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人简历 </tag>
            
            <tag> 实习生 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql设计以及架构优化</title>
      <link href="/2018/02/28/mysql%E8%AE%BE%E8%AE%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/"/>
      <url>/2018/02/28/mysql%E8%AE%BE%E8%AE%A1%E4%BB%A5%E5%8F%8A%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="电商常用功能模块的数据库设计"><a href="#电商常用功能模块的数据库设计" class="headerlink" title="电商常用功能模块的数据库设计"></a>电商常用功能模块的数据库设计</h2><p>模块的划分:</p><p>注册会员–展示商品–加入购物车–生成订单</p><h2 id="使用的工具和需要掌握的内容"><a href="#使用的工具和需要掌握的内容" class="headerlink" title="使用的工具和需要掌握的内容"></a>使用的工具和需要掌握的内容</h2><ol><li><p>使用MySQL5.7版本.</p></li><li><p>Mysql的图形客户端程序,Mysqlworkbench.</p></li><li><p>Linux下命令和Shell脚本的基础知识.</p></li></ol><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>常见的购物流程:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">用户登录</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">选购商品</span><span class="literal">-</span><span class="literal">-</span><span class="comment">加购物车</span><span class="literal">-</span><span class="literal">-</span><span class="comment">检查库存</span><span class="literal">-</span><span class="literal">-</span><span class="comment">提交订单</span>            <span class="comment">YES</span></span><br><span class="line"><span class="comment"></span>                                            <span class="literal">-</span><span class="literal">-</span>  <span class="comment">在线支付</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">订单付款</span></span><br><span class="line"><span class="comment"></span>                                                          <span class="comment">YES</span></span><br><span class="line"><span class="comment"></span>                                            <span class="literal">-</span><span class="literal">-</span>  <span class="comment">货到付款</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>  <span class="comment">订单付款</span></span><br></pre></td></tr></table></figure><p>需要以下几个模块的设计</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户模块: 完成用户注册和登录验证.</span><br><span class="line"></span><br><span class="line">商品模块: 前后台商品管理和浏览.</span><br><span class="line"></span><br><span class="line">订单模块: 订单及购物车的生成和管理.</span><br><span class="line"></span><br><span class="line">仓配模块: 仓库库存和物流管理功能.</span><br></pre></td></tr></table></figure><h2 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h2><p>1.数据库结构设计</p><p>逻辑设计 —&gt; 物理设计</p><p>2.实际工作中</p><p>逻辑设计 + 物理设计</p><p>3.物理设计<br>一般就是<code>表名</code>,<code>字段名</code>,<code>字段类型</code>的设计.</p><p><strong>数据库规范概述</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>数据库命名规范</span><br><span class="line"><span class="bullet">2. </span>数据库基本设计规范</span><br><span class="line"><span class="bullet">3. </span>数据库索引命名和优化</span><br><span class="line"><span class="bullet">4. </span>数据库字段设计规范</span><br><span class="line"><span class="bullet">5. </span>数据库SQL开发规范</span><br><span class="line"><span class="bullet">6. </span>数据库操作行为规范</span><br></pre></td></tr></table></figure></p><h3 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h3><h4 id="所有数据库对象名称必须使用小写字母并用下划线分割"><a href="#所有数据库对象名称必须使用小写字母并用下划线分割" class="headerlink" title="所有数据库对象名称必须使用小写字母并用下划线分割."></a>所有数据库对象名称必须使用小写字母并用下划线分割.</h4><p>原因就是Mysql数据库对大小写敏感.</p><p>不同的数据库名    eg: DBName  dbname</p><p>不同的表名        eg :Table   table     tabLe</p><h4 id="所有数据库对象名称禁止使用Mysql保留关键字"><a href="#所有数据库对象名称禁止使用Mysql保留关键字" class="headerlink" title="所有数据库对象名称禁止使用Mysql保留关键字"></a>所有数据库对象名称禁止使用Mysql保留关键字</h4><p>比如说你给列名起了个名字叫<code>form</code></p><p>那么查询的时候就可能出现<code>select id,username,from,age from tb_user;</code>这种情况.</p><p>执行SQL的时候,mysql不清楚这2个form有什么区别.</p><p>要非解决这种问题哪,就用`from``来区分关键字.</p><h4 id="数据库对象的命名要能做到见名识义-并且不能超过32个字符"><a href="#数据库对象的命名要能做到见名识义-并且不能超过32个字符" class="headerlink" title="数据库对象的命名要能做到见名识义,并且不能超过32个字符"></a>数据库对象的命名要能做到见名识义,并且不能超过32个字符</h4><p>eg: 数据库命名示例: mc_userdb</p><p>eg: 用户账号表: user_count</p><p><strong>一般的临时表的命名规范:</strong></p><p>像导入导出数据表,临时统计所使用的表,用完马上清理掉,最好.</p><p>但是大部分情况下都不允许,所以我们<code>建立临时表时,必须要以tmp为前缀并以日期为后缀.</code></p><p>eg : tmp_export_data_2018_01_28</p><p><strong>备份表</strong></p><p>备份表必须以bak为前缀并以日期为后缀.</p><p>eg : bak_copy_data_2018_01_28</p><p><strong>所有存储相同数据的列名和列类型必须一致</strong></p><p>观察下面的的示例.</p><p><strong>用户信息表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customer_inf(</span><br><span class="line">  customer_inf_id <span class="built_in">int</span> <span class="keyword">unsigned</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'自增'</span>,</span><br><span class="line">  customer_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'customer login 表的自增'</span>,</span><br><span class="line">  customer_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'用户真实姓名'</span>,</span><br><span class="line">  identity_card_type tinyint <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">'证件类型: 1 身份证, 2 微信网证'</span>,</span><br><span class="line">  identify_card_no <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">comment</span> <span class="string">'证件号码'</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p><strong>订单表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_master(</span><br><span class="line">  order_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">comment</span> <span class="string">'订单ID'</span>,</span><br><span class="line">  order_sn <span class="built_in">bigint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'订单编号 yyyymmddnnnnnnn'</span>,</span><br><span class="line">  customer_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'下单人ID'</span>,</span><br><span class="line">  shipping_user <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'收货人姓名'</span>,</span><br><span class="line">  province <span class="built_in">SMALLINT</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'收获人所在省'</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><p>我们可以观察到用户信息表中的<code>customer_id</code>字段和订单表中<code>customer_id</code>字段类型和大小相同:都是无符号的int类型.</p><p>这对于数据库的查询性能是非常重要的.一般都是关联列,对于查询的效率很有影响.</p><h2 id="数据库命名规范总结"><a href="#数据库命名规范总结" class="headerlink" title="数据库命名规范总结"></a>数据库命名规范总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有数据库对象名称必须小写.</span><br><span class="line"><span class="bullet">2. </span>命名要见名识意,禁止使用Mysql的保留关键字.</span><br><span class="line"><span class="bullet">3. </span>临时表要以tmp<span class="emphasis">_开头,备份表以bak_</span>开头,并且以时间戳结尾.</span><br><span class="line"><span class="bullet">4. </span>所有存储相同数据的列名和列类型必须保持一致.</span><br></pre></td></tr></table></figure><h2 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h2><p>现在可能还存在着Mysql5.5使用之前MyISAM(默认存储引擎)情况.</p><p>如今的Mysql5.7没有其他需求的话,默认是是使用<code>Innodb存储引擎</code>.</p><h3 id="所有的表都要使用Innodb存储引擎"><a href="#所有的表都要使用Innodb存储引擎" class="headerlink" title="所有的表都要使用Innodb存储引擎"></a>所有的表都要使用Innodb存储引擎</h3><p>原因就是Innodb存储引擎支持事务,行级锁,更好的恢复性,高并发下性能更好.与Oracle很相似.</p><p>MyISAM在高并发的情况下,锁表是一种很常见的性能问题.Innodb存存储引擎解决了很多问题.</p><h3 id="数据库和表的字符集统一使用UTF-8"><a href="#数据库和表的字符集统一使用UTF-8" class="headerlink" title="数据库和表的字符集统一使用UTF-8"></a>数据库和表的字符集统一使用UTF-8</h3><p>如果之存储中文字符的话,用GBK/GB2312字符集都可以.</p><p><strong>统一的字符集可以避免由于字符集准换成的乱码.</strong></p><p>Mysql中的UTF8字符集汉字点3个字节,ASCII码占用1个字节.</p><p>eg : 如果定义了varchar(255)的列使用UTF8存储中文字符,255个字符实际占用755个字节.</p><h3 id="所有表和字段都要添加注释"><a href="#所有表和字段都要添加注释" class="headerlink" title="所有表和字段都要添加注释"></a>所有表和字段都要添加注释</h3><p>使用comment从句添加表这列的备注,这些我们基本都知道.</p><p>目的: 从一开始就进行数据字典的维护.</p><h3 id="尽量控制单表数据量的大小-建议控制在500万行以内"><a href="#尽量控制单表数据量的大小-建议控制在500万行以内" class="headerlink" title="尽量控制单表数据量的大小,建议控制在500万行以内"></a>尽量控制单表数据量的大小,建议控制在500万行以内</h3><p>但是500万行数据量并不是Mysql数据库的限制</p><p><strong>Mysql存储数据量的大小,取决于存储设置和文件系统,Mysql并没有对其进行了限制.</strong></p><p>比如所: 32位操作系统单个文件不能超过2个G.所以32位操作系统限制了Mysql数据库的存储容量大小.</p><p>但是我们都使用64为的操作系统了,所以不必考虑存储容量的限制了.</p><p><strong>可以使用历史数据归档,分库分表等手段来控制数据量大小.</strong></p><p>这主要用在业务复杂的方面:比如订单表</p><h3 id="谨慎的使用Mysql分区表"><a href="#谨慎的使用Mysql分区表" class="headerlink" title="谨慎的使用Mysql分区表"></a>谨慎的使用Mysql分区表</h3><p>分区表在物理上表现为多个文件,在逻辑上表现为一个表.</p><p>谨慎选择分区主键,跨分区查询效率可能更低.</p><p>建议采用物理分表的方式管理大数据.</p><h3 id="尽量做到冷热数据分离-减少表的宽度"><a href="#尽量做到冷热数据分离-减少表的宽度" class="headerlink" title="尽量做到冷热数据分离,减少表的宽度"></a>尽量做到冷热数据分离,减少表的宽度</h3><p>除了注意表中的行,我们还要注意表中的宽度,Mysql对表中的数据行没有限制,但是一个表中所能包含的列却有限制.</p><p>Mysql限制一个表中最多存放4096列,并且每一行的大小不能超过65535个字节.</p><p><strong>减少磁盘IO,保证热数据的内存缓存命中率</strong></p><p><strong>利用更有效的利用缓存,避免读入无用的冷数据</strong></p><p><strong>为了保证表的宽度,要使用垂直拆分:经常一起使用的列放到一个表中,可以避免过多的冗关联操作,从另一方面可以提高查询的性能</strong></p><h3 id="禁止在表中建立预留字段"><a href="#禁止在表中建立预留字段" class="headerlink" title="禁止在表中建立预留字段"></a>禁止在表中建立预留字段</h3><p>一般是采用varchar类型,但是这种类型占用空间比较大.</p><p>预留字段的命名很难做到见名识义</p><p>预留字段无法确认存储的数据类型,所以无法选择合适的类型.</p><p>对预留字段类型的修改,会对表进行锁定.</p><h3 id="禁止在数据库中存储图片-文件等二进制数据"><a href="#禁止在数据库中存储图片-文件等二进制数据" class="headerlink" title="禁止在数据库中存储图片,文件等二进制数据"></a>禁止在数据库中存储图片,文件等二进制数据</h3><p>之前搭建了FastDFS服务器.可以解决这个问题.</p><h3 id="禁止在线上做数据库压力测试"><a href="#禁止在线上做数据库压力测试" class="headerlink" title="禁止在线上做数据库压力测试"></a>禁止在线上做数据库压力测试</h3><p>要在专门的测试环境下测试.如果业务环境没上线,就不要再管理测试了.</p><h3 id="禁止从开发环境-测试环境直接连接生产环境数据库"><a href="#禁止从开发环境-测试环境直接连接生产环境数据库" class="headerlink" title="禁止从开发环境,测试环境直接连接生产环境数据库"></a>禁止从开发环境,测试环境直接连接生产环境数据库</h3><h2 id="数据库基本设计规范总结"><a href="#数据库基本设计规范总结" class="headerlink" title="数据库基本设计规范总结"></a>数据库基本设计规范总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有表必须使用Innodb存储引擎.</span><br><span class="line"><span class="bullet">2. </span>所有表及字段都要有备注信息,并使用UTF8字符集.</span><br><span class="line"><span class="bullet">3. </span>要尽量做到控制单表大小,并把冷热数据分离.</span><br><span class="line"><span class="bullet">4. </span>禁止使用预留字段及在表中存储大的二进制数据.</span><br></pre></td></tr></table></figure><h2 id="数据库索引规范"><a href="#数据库索引规范" class="headerlink" title="数据库索引规范"></a>数据库索引规范</h2><p>索引对数据库的查询性能来说是非常重要的.</p><h3 id="不要滥用索引"><a href="#不要滥用索引" class="headerlink" title="不要滥用索引"></a>不要滥用索引</h3><p>限制每张表上的索引数量,单张表索引不超过5个.</p><p>索引并不是越多越好!索引可以提高效率同样也可以降低效率.</p><p>原因是索引可以提高查询的效率,但同样也会降低插入和更新的效率.</p><p><strong>禁止给表中的每一列都建立单独的索引.</strong></p><p>Innodb是一种索引组织表.所谓的索引组织表就是,数据存储的逻辑顺序和索引的顺序是相同的.表的存储顺序只能有一种.</p><p><strong>Innodb是按照主键索引来组织表的.</strong></p><p>固定的要求就是,<strong>每个innodb表必须有一个主键.</strong></p><p>如果你没建立.Mysql就会选择第一个非空唯一索引作为主键.</p><p>如果没有非空唯一索引,Mysql就会自动生成一个占6个字节的主键.但性能不好.</p><p>表中主键的选择:<strong>不能使用更新频繁的列作为主键,不使用多列主键.</strong></p><p>多列主键指的是<code>联合索引</code>作为主键.</p><p>Innodb是索引组织表,如果使用上面的2个索引作为主键,不断频繁的改变顺序,不但会使服务器IO增加,同时会占用大量的CPU资源.</p><p><strong>不要使用UUID,MD5,哈希,这种字符串数组的数据来作为主键.</strong></p><p>这类数据无法保证数据的顺序更改.</p><p>拿UUID来说,我们无法保证下面插入的UUID的值是否大于前面的值,要是后插入的UUID的值比前面的小.</p><p>那么Innodb为了保证表的顺序性,要把这个小的UUID的值插入到前面.</p><p>这样就会造成大于这个新值的数据往后移动,这样就会造成大量的IO操作,还会占用大量的CPU资源.降低整体服务器的类型.</p><p><strong>最好选中顺序自动增长的ID值,也就是数据库为我们提供的auto_increment 这种自增ID作为主键</strong></p><h3 id="在哪些上建立索引"><a href="#在哪些上建立索引" class="headerlink" title="在哪些上建立索引?"></a>在哪些上建立索引?</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 一般在<span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>语句的<span class="keyword">WHERE</span>从句的列建立索引.</span><br><span class="line"><span class="number">2.</span> 包含在<span class="keyword">ORDER</span> <span class="keyword">BY</span>,<span class="keyword">GROUP</span> <span class="keyword">BY</span>,<span class="keyword">DISTINCT</span>中的字段建立索引.</span><br><span class="line"><span class="number">3.</span> 通常情况下,我们会选择建立联合索引,因为这样性能会更好.</span><br><span class="line"><span class="number">4.</span> 多表<span class="keyword">JOIN</span>的关联列上建立索引.</span><br><span class="line"></span><br><span class="line">如果<span class="keyword">Join</span>的关联列上没有索引,在进行During操作的时候,性能会很差.</span><br></pre></td></tr></table></figure><h3 id="建立索引目的"><a href="#建立索引目的" class="headerlink" title="建立索引目的"></a>建立索引目的</h3><p>我们希望查询时通过索引来进行数据查找,从而减少磁盘的随机IO.增加查询的性能.所以我们的索引可以过滤出越少的数据,则我们需要从磁盘读入的数据越少.</p><h3 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序?"></a>如何选择索引列的顺序?</h3><p>我们是从左到右的顺序来使用的.</p><p><strong>我们要把区分度最高的列放在联合索引的最左侧.</strong></p><p><strong>尽量把字段长度小的列放在联合索引的最左侧.</strong></p><p><strong>使用最频繁的列放在联合索引的左侧,</strong></p><h3 id="避免建立冗余索引和重复索引"><a href="#避免建立冗余索引和重复索引" class="headerlink" title="避免建立冗余索引和重复索引"></a>避免建立冗余索引和重复索引</h3><p>1.重复索引: 索引列完全重复.</p><p>eg: primary key(id) index(id)  unique index(id)</p><p>我们一旦指定了id作为主键,就相当于在id列上建立了一个非空的唯一索引.</p><p><strong>Mysql中的主键就是一个非空的唯一索引.</strong></p><p>2.冗余索引: 部分索引列是冗余的.</p><p>eg: index(a,b,c) index(a,b) index(a)</p><p>列存储</p><p>存储空间数据</p><p>create table user (id int unsigned auto_increment primary key,name varchar(32) not null,age int(2) not null,f varchar(32) not null);</p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql设计 </tag>
            
            <tag> 架构优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis-cluster搭建</title>
      <link href="/2018/02/25/Redis%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/02/25/Redis%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="Redis集群搭建使用的包"><a href="#Redis集群搭建使用的包" class="headerlink" title="Redis集群搭建使用的包"></a>Redis集群搭建使用的包</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e81ad3dab8dbd9fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Redis-集群的原理"><a href="#Redis-集群的原理" class="headerlink" title="Redis 集群的原理"></a>Redis 集群的原理</h2><p><a href="https://www.jianshu.com/p/2177874695c4" target="_blank" rel="noopener">redis单机版的操作</a></p><h3 id="Redis-cluster的架构"><a href="#Redis-cluster的架构" class="headerlink" title="Redis-cluster的架构"></a>Redis-cluster的架构</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-35c6a3e1a08a08a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>redis-cluster有一个投票:容错机制,用来确定是哪个节点挂了.少数服从多数.</p><p>比如下面这张图:</p><p>有5个节点,黄色的节点认为红色的节点挂了,只要剩下的3个节点有2个认为它挂了,那么红色的就认为挂了.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7568ca9150bc5eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>架构的细节</strong></p><p>1.所有的redis节点彼此互联(PING-PONG机制),内部使用2进制协议优化传输速度和带宽.</p><p>2.节点的fail是通过集群中超过半数的节点监测失效时才生效.</p><p>3.客户端与redis节点直连,不需要中间proxy层,客户端不需要连接集群所有节点,连接集群中任何一个节点即可.</p><p>4.redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster负责维护node-slot–value</p><blockquote><p>redis集群中内置了16384个哈希槽,当需要在redis集群中放置一个key-value的时候,redis先对key使用crc16算法算出一个结果.<br>然后把结果对16384取余,这样每个key都会对应一个编号在0-16383之间的哈希槽,redis会根据节点数量大致均等的将哈希槽映射到不同的节点.</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/7505161-91fffabab7103de4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>极限情况下,允许有16384个节点.</p><h2 id="redis集群的搭建步骤"><a href="#redis集群的搭建步骤" class="headerlink" title="redis集群的搭建步骤"></a>redis集群的搭建步骤</h2><p>1.一台虚拟机运行6个redis实例.端口从7001-7006.</p><p>2.复制redis实例,复制目录需要<code>-r</code></p><p><code>cp redis/bin redis-cluster/redis01 -r</code></p><p>进入<code>cd redis-cluster/redis01</code>中将持久化文件<code>dump</code>删除,不删除会对我们的集群造成影响.</p><p>接下来,修改<code>bin</code>目录下的<code>redis.conf</code>文件.主要修改<code>端口号</code>和<code>打开注释</code>.</p><p><strong>修改端口号</strong>:<code>port 7001</code></p><p><strong>打开注释</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-94046664c79fd963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>接下来修改剩余的5个.</p><p>3.写脚本启动<code>start-all.sh</code><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> redis01</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis02</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis03</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis04</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis05</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="keyword">cd</span> redis06</span><br><span class="line"><span class="string">./redis-server</span> redis.conf</span><br></pre></td></tr></table></figure></p><p>无法启动,是因为需要授权的.</p><p><code>chmod u+x start-all.sh</code></p><p>4.查看是否启动</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0064e1761e1535c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.进入redis源代码里面找一个文件</p><p>也就是在<code>`/root/redis-4.0.8/src目录下去寻找.使用</code>ll *.rb<code>会找到</code>redis-trib.rb`这个文件.</p><p>将这个文件复制到<code>/usr/local/redis-cluster</code>这个目录中.</p><p>现在的目录结构:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5dbfaea302e681c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>6.安装ruby环境<br><code>yum install ruby</code><br><br><code>yum install rubygems</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-225c22e64e190848.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>输入你失败提示的那个的地址,去浏览器下载<code>specs.4.8.gz</code>这个文件,,输入<code>gem install redis</code>就能成功了.</p><p>7.ruby脚本</p><p><code>./redis-trib.rb create --replicas 1 192.168.25.133:7001 192.168.25.133:7002 192.168.25.133:7003 192.168.25.133:7004 192.168.25.133:7005 192.168.25.133:7006</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b08fbbac48ee56c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>8.查看分配的主从服务器,以及槽的分配</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-cluster]# ./redis-trib.rb create --replicas <span class="number">1</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span> <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on <span class="number">6</span> nodes...</span><br><span class="line">Using <span class="number">3</span> masters:</span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line">Adding replica <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span> to <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line"><span class="symbol">M:</span> f525a4b2a3ff6cc32a36f276b17460910ac6334f <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="symbol">M:</span> f865949d32a241285032a900ea0911859f83c44e <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line"><span class="symbol">M:</span> db89b6f29ffa891ab166a39fb6101be99b763859 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="symbol">S:</span> b53df7de4aeb85751e64ec95743628a8387acf2c <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span></span><br><span class="line">   replicates db89b6f29ffa891ab166a39fb6101be99b763859</span><br><span class="line"><span class="symbol">S:</span> af12ed12992d8c15057a356d299edac4a4b630fc <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span></span><br><span class="line">   replicates f525a4b2a3ff6cc32a36f276b17460910ac6334f</span><br><span class="line"><span class="symbol">S:</span> 10189b284f51732b5a64aea3f9c8e7f545db9059 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line">   replicates f865949d32a241285032a900ea0911859f83c44e</span><br><span class="line">Can I set the above configuration? (type <span class="string">'yes'</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to <span class="number">each</span> node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span>)</span><br><span class="line"><span class="symbol">M:</span> f525a4b2a3ff6cc32a36f276b17460910ac6334f <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7001</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">M:</span> f865949d32a241285032a900ea0911859f83c44e <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7002</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">M:</span> db89b6f29ffa891ab166a39fb6101be99b763859 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7003</span></span><br><span class="line"><span class="symbol">   slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line">   <span class="number">1</span> additional replica(s)</span><br><span class="line"><span class="symbol">S:</span> af12ed12992d8c15057a356d299edac4a4b630fc <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7005</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates f525a4b2a3ff6cc32a36f276b17460910ac6334f</span><br><span class="line"><span class="symbol">S:</span> 10189b284f51732b5a64aea3f9c8e7f545db9059 <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7006</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates f865949d32a241285032a900ea0911859f83c44e</span><br><span class="line"><span class="symbol">S:</span> b53df7de4aeb85751e64ec95743628a8387acf2c <span class="number">192.168</span><span class="meta">.25</span><span class="meta">.133</span>:<span class="number">7004</span></span><br><span class="line"><span class="symbol">   slots:</span> (<span class="number">0</span> slots) slave</span><br><span class="line">   replicates db89b6f29ffa891ab166a39fb6101be99b763859</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All <span class="number">16384</span> slots covered.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis-cluster </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis接口的编写</title>
      <link href="/2018/02/24/Redis%E9%9B%86%E7%BE%A4%E6%8E%A5%E5%8F%A3/"/>
      <url>/2018/02/24/Redis%E9%9B%86%E7%BE%A4%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p><a href="https://www.linuxidc.com/Linux/2016-12/138979.htm" target="_blank" rel="noopener">防火墙关闭,也可能对搭建有影响</a></p><h2 id="使用redis-cli连接redis集群"><a href="#使用redis-cli连接redis集群" class="headerlink" title="使用redis-cli连接redis集群"></a>使用redis-cli连接redis集群</h2><p><code>redis01/redis-cli -h 192.168.25.133 -p 7001 -c</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-254223ec35185426.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>输入一个key=a,value=123.经过crc16算法对key进行hash化出来一个值,再对16384取余,就可以得到一个值,用这个值匹配对应的槽就可以了.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-53e387300cfb2977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这样就可以证明我搭建成功了.不变红就是没连接上.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5f2e680c60d95c5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="测试单机版连接"><a href="#测试单机版连接" class="headerlink" title="测试单机版连接"></a>测试单机版连接</h2><p><a href="https://www.cnblogs.com/MyMaster-zf/p/5718625.html" target="_blank" rel="noopener">防火墙检查了都没连接上的办法.</a></p><p>只能设置密码了.在<code>redis.conf</code>中设置<code>requirepass wsys</code>,其中<code>wsys</code>就是你设置的密码.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-84dc8a7f488a1b23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>测试代码</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class JedisTest &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> jedisTest() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.25.133"</span>, <span class="number">6379</span>);</span><br><span class="line">            jedis.auth(<span class="string">"wsys"</span>);</span><br><span class="line">            <span class="keyword">String</span> a = jedis.<span class="built_in">set</span>(<span class="string">"a"</span>, <span class="string">"123"</span>);</span><br><span class="line">            <span class="keyword">String</span> a1 = jedis.<span class="built_in">get</span>(<span class="string">"a"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(a1);</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>JedisPool测试代码</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> jedisPoolTest() throws Exception&#123;</span><br><span class="line">       <span class="built_in">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建一个连接池对象,两个参数host,port</span></span><br><span class="line">           JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"192.168.25.133"</span>, <span class="number">6379</span>);</span><br><span class="line">           Jedis jedis= jedisPool.getResource();</span><br><span class="line">           jedis.auth(<span class="string">"wsys"</span>);</span><br><span class="line">           <span class="keyword">String</span> a = jedis.<span class="built_in">get</span>(<span class="string">"a"</span>);</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"jedisPool中取: "</span>+a);</span><br><span class="line">           jedis.<span class="built_in">close</span>();</span><br><span class="line">           jedisPool.<span class="built_in">close</span>();</span><br><span class="line">       &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>jedisCluster测试</strong></p><p>如果出现<code>java.lang.NumberFormatException</code>这个错误,需要把jedis的maven依赖版本调高点,<code>2.9.0</code>就可以了<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> jedisClusterTest() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建一个JedisCluster对象,有一个参数nodes是一个set类型,set中包含若干个HostAndPort对象.</span></span><br><span class="line">           Set&lt;HostAndPort&gt; nodes =<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7001</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7002</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7003</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7004</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7005</span>));</span><br><span class="line">           nodes.<span class="built_in">add</span>(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.25.133"</span>,<span class="number">7006</span>));</span><br><span class="line">           JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodes);</span><br><span class="line">           jedisCluster.<span class="built_in">set</span>(<span class="string">"b"</span>, <span class="string">"12"</span>);</span><br><span class="line">           <span class="keyword">String</span> b = jedisCluster.<span class="built_in">get</span>(<span class="string">"b"</span>);</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"jedisCluster: "</span>+b);</span><br><span class="line">           jedisCluster.close();</span><br><span class="line">           <span class="comment">//java.lang.NumberFormatException</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>总结</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.单机版用jedispool来操作jedis.</span><br><span class="line"><span class="number">2</span>.集群版直接使用jedisCluster就可以了.</span><br></pre></td></tr></table></figure><h2 id="编写jedisclient的接口以及单机版-amp-amp-集群版的实现类"><a href="#编写jedisclient的接口以及单机版-amp-amp-集群版的实现类" class="headerlink" title="编写jedisclient的接口以及单机版&amp;&amp;集群版的实现类"></a>编写jedisclient的接口以及单机版&amp;&amp;集群版的实现类</h2><p>1.jedisClient<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface JedisClient &#123;</span><br><span class="line">    <span class="comment">//字符串的操作</span></span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> value);</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//判断字符串的键值是否存在</span></span><br><span class="line">    Boolean exists(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//过期时间的设置</span></span><br><span class="line">    Long expire(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="built_in">int</span> seconds);</span><br><span class="line">    <span class="comment">//剩余过期时间</span></span><br><span class="line">    Long ttl(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//hash类型的操作</span></span><br><span class="line">    Long hset(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field,<span class="keyword">String</span> value);</span><br><span class="line">    <span class="comment">//增加1</span></span><br><span class="line">    Long incr(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//查询hash类型</span></span><br><span class="line">    <span class="keyword">String</span> hget(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field);</span><br><span class="line">    <span class="comment">//删除hash类型</span></span><br><span class="line">    Long hdel(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span>... field);</span><br><span class="line">    <span class="comment">//判断hash类型是否存在</span></span><br><span class="line">    Boolean hexists(<span class="keyword">String</span> <span class="built_in">key</span>,<span class="keyword">String</span> field);</span><br><span class="line">    <span class="comment">//查询所有hash的值</span></span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; hvals(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//删除一个键值对</span></span><br><span class="line">    Long del(<span class="keyword">String</span> <span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.jedisClientPool<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">package lups.<span class="keyword">org.common.jedis.impl;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">import </span><span class="keyword">java.util.List;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">import </span>lups.<span class="keyword">org.common.jedis.JedisClient;</span></span><br><span class="line"><span class="keyword">import </span>redis.clients.<span class="keyword">jedis.Jedis;</span></span><br><span class="line"><span class="keyword">import </span>redis.clients.<span class="keyword">jedis.JedisPool;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">public </span>class <span class="keyword">JedisClientPool </span>implements <span class="keyword">JedisClient </span>&#123;</span><br><span class="line"></span><br><span class="line">private <span class="keyword">JedisPool </span><span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"></span>public <span class="keyword">JedisPool </span>getJedisPool() &#123;</span><br><span class="line">return <span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"></span><br><span class="line">public void setJedisPool(<span class="keyword">JedisPool </span><span class="keyword">jedisPool) </span>&#123;</span><br><span class="line">this.<span class="keyword">jedisPool </span>= <span class="keyword">jedisPool;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String set(String key, String value) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.set(key, </span>value)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String get(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.get(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">Boolean </span>exists(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Boolean </span>result = <span class="keyword">jedis.exists(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long expire(String key, int seconds) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.expire(key, </span>seconds)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long ttl(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.ttl(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long incr(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.incr(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long hset(String key, String field, String value) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.hset(key, </span>field, value)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String hget(String key, String field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>String result = <span class="keyword">jedis.hget(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long hdel(String key, String... field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.hdel(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public <span class="keyword">Boolean </span>hexists(String key, String field) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Boolean </span>result = <span class="keyword">jedis.hexists(key, </span>field)<span class="comment">;</span></span><br><span class="line"><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;String&gt; hvals(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>List&lt;String&gt; result = <span class="keyword">jedis.hvals(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Long del(String key) &#123;</span><br><span class="line"><span class="keyword">Jedis </span><span class="keyword">jedis </span>= <span class="keyword">jedisPool.getResource();</span></span><br><span class="line"><span class="keyword"></span>Long result = <span class="keyword">jedis.del(key);</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jedis.close();</span></span><br><span class="line"><span class="keyword"></span>return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.jedisClientCluster<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lups.org.common.jedis.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lups.org.common.jedis.JedisClient;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class JedisClientCluster implements JedisClient &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> JedisCluster getJedisCluster() &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setJedisCluster(JedisCluster jedisCluster) &#123;</span><br><span class="line"><span class="keyword">this</span>.jedisCluster = jedisCluster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">set</span>(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> value) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.<span class="built_in">set</span>(<span class="built_in">key</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Boolean exists(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.exists(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long expire(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="built_in">int</span> seconds) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.expire(<span class="built_in">key</span>, seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long ttl(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.ttl(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long incr(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.incr(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long hset(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field, <span class="keyword">String</span> value) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hset(<span class="built_in">key</span>, field, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> hget(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hget(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long hdel(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span>... field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hdel(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Boolean hexists(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> field) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hexists(<span class="built_in">key</span>, field);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; hvals(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.hvals(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Long del(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> jedisCluster.del(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis-cluster </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring与Redis整合</title>
      <link href="/2018/02/24/%7Fspring%E5%92%8Credis%E6%95%B4%E5%90%88/"/>
      <url>/2018/02/24/%7Fspring%E5%92%8Credis%E6%95%B4%E5%90%88/</url>
      <content type="html"><![CDATA[<h2 id="application-redix-xml"><a href="#application-redix-xml" class="headerlink" title="application-redix.xml"></a>application-redix.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接redis单机版 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;bean id="jedisClientPool" class="lups.org.common.jedis.impl.JedisClientPool"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jedisPool" ref="jedisPool"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id="jedisPool" class="redis.clients.jedis.JedisPool"&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg name="host" value="192.168.25.133"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg name="port" value="6379"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接redis集群 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClientCluster"</span> <span class="attr">class</span>=<span class="string">"lups.org.common.jedis.impl.JedisClientCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jedisCluster"</span> <span class="attr">ref</span>=<span class="string">"jedisCluster"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisCluster"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisCluster"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"nodes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7001"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7002"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7003"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7004"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7005"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.HostAndPort"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.25.133"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"7006"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClientTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> void TestJedisClient()&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//初始化Spring容器</span></span><br><span class="line">            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext-redis.xml"</span>);</span><br><span class="line">            <span class="comment">//通过反射来获取bean对象</span></span><br><span class="line">            JedisClient jedisClient = context.getBean(JedisClientCluster.<span class="keyword">class</span>);</span><br><span class="line">             <span class="comment">//来进行redis的操作</span></span><br><span class="line">            jedisClient.<span class="keyword">set</span>(<span class="string">"aa"</span>,<span class="string">"1234"</span>);</span><br><span class="line">            String a = jedisClient.<span class="keyword">get</span>(<span class="string">"aa"</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.println(a);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存的添加"><a href="#缓存的添加" class="headerlink" title="缓存的添加"></a>缓存的添加</h2><p>一般就在服务层里面添加.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">一般显示查询缓存</span><br><span class="line"></span><br><span class="line">如果缓存中有直接响应数据</span><br><span class="line"></span><br><span class="line">缓存中没有,查询数据库.</span><br><span class="line"></span><br><span class="line">返回结果之前,把结果添加到缓存就可以了.</span><br><span class="line"></span><br><span class="line">注意的一点就是不管是添加缓存和查询缓存,都不应该影响正常的逻辑.</span><br><span class="line"></span><br><span class="line">所以把`查询/添加缓存逻辑`放在<span class="keyword">try</span>块里面.</span><br></pre></td></tr></table></figure><h2 id="缓存同步"><a href="#缓存同步" class="headerlink" title="缓存同步"></a>缓存同步</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">更新完数据库,必须要更新缓存.也就是要一致.我们要求增改操作的时候,都应该同步缓存.</span><br><span class="line"></span><br><span class="line">所以在添加/更新的时候,删除缓存中对应的数据就可以实现自动更新了.这样就可以实现缓存同步了.</span><br><span class="line"></span><br><span class="line">如果采用的是hash类型,千万不要直接删除key,否则再次查询的时候,会对服务器造成很大的压力.</span><br><span class="line"></span><br><span class="line">修改那个field,就删那个field的缓存就可以了.<span class="string">`hdel key field1`</span>.此时缓存,没有了,去查数据库,从而实现了缓存同步.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis-cluster </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis基本操作</title>
      <link href="/2018/02/24/redis/"/>
      <url>/2018/02/24/redis/</url>
      <content type="html"><![CDATA[<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>判断redis服务的健康状态.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2e65d5efd03b0e4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">存储key-value,把key计算为一个hash值,把它放在一个位置.</span><br><span class="line"></span><br><span class="line">取得时候,先计算是哪个位置,直接去那个位置去取,</span><br><span class="line"></span><br><span class="line">是直接存取这个值,而不是遍历.</span><br><span class="line"></span><br><span class="line">Redis之所以快,是因为所有数据都是保存在内存当中的.</span><br></pre></td></tr></table></figure></p><p>5种数据类型<br>key-value类型.</p><p>string<br>hash<br>list<br>set<br>sorted set</p><h3 id="1-string类型"><a href="#1-string类型" class="headerlink" title="1.string类型"></a>1.string类型</h3><p>1.写入键值对<br><code>set str1 abc</code><br>2.取得键值对<br><code>get str1</code><br>3.显示所有的key<br><code>keys *</code><br>4.增加一个键<br><code>incr key1</code><br>5.删除操作<br><code>del key4</code><br>6.加1的操作</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b6ecd303f63c61fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>7.减1的操作</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0d6c6ab0999aae50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><code>Redis中所有的字段都是字符串,他们是先转换成整型,在加减1的.</code></p><p><code>我们观察下面的操作,就可以了.key2的键值是字符串,你给它加1,自然会出错,</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-5de49e5b35d18107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><code>要是像下面这样做就对了</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-fbaa5d14a4d9bc7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="2-hash类型"><a href="#2-hash类型" class="headerlink" title="2.hash类型"></a>2.hash类型</h3><p>1.创建一个hash<br><code>hset hash1 field1 1</code><br>2.查询一个hash的值<br><code>hget hash1 field1</code><br>3.删除一个hash<br><code>hdel hash1 field1</code><br>4.查询所有hash的field值<br><code>hkeys hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ac7d1421e7eaf530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.查询所有的hash的value值<br><code>hvals hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2c692c0e17613d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>6.查询hash所有的key-value值<br><code>hgetall hash1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e44ea5663b444d91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h3><p>list的元素可以重复,有序.<br>1.从左往右存储数据<br><code>rpush a b c d e f</code><br>2.从右往左储存数据<br><code>lpush 1 2 3 4 5 6</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e27713e2bb8e7749.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.查看数据范围<br><code>lrange list1 0 -1</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-544ce80889e2d2ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.取出元素<br><code>lpop list1</code><br><code>rpop list1</code><br><code>取出元素之后,就不能看到之前的全部了.</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-46681b59cb0d0f20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h3><p>set 无序,且输入的数据不能重复<br>1.添加元素<br><code>sadd set1 a b c d a b</code><br>2.删除元素<br><code>srem set1 a</code><br>3.查看元素<br><code>smembers set1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f08045c0049e09a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.seta与setb的比较</p><p><code>类似于左连接和右连接那种形式,剔除共有的部分</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-272878a72f49c3d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.取交集<br><code>sinter seta setb</code><br>6.取并集<br><code>sunion seta setb</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-00495d5eb1a723a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h3><p>元素是有序的,耗费的性能会很高. </p><p>1.升序排列<br><code>zrange zset1 0 -1 withscores</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-b083f143961a1e89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-71de8f1e4cd5f97f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.降序排列<br><code>zrevrange zset1 0 -1</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ad833f1ec1f6bf20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>3.带分数倒序排序</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-217194b867712373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="设置key的过期时间"><a href="#设置key的过期时间" class="headerlink" title="设置key的过期时间"></a>设置key的过期时间</h3><p><code>expire key1 20</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7bba03ea71cf76f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>1.看看过期时间和倒计时</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ce26d0a4e5fd10b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2.永久保存和不存在的标识</p><p><code>-1是永久保存的数据(持久化),-2是不存在的数据</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-d255b5319743bf4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="redis的持久化"><a href="#redis的持久化" class="headerlink" title="redis的持久化"></a>redis的持久化</h3><p>1.重新设置过期时间</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2d673484a9d4d0e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.持久化数据<br><code>persist key3</code>,-1就代表数据持久化了.<br><img src="http://upload-images.jianshu.io/upload_images/7505161-3a7a49d54a2d4d5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.redis的持久化.<br>redis总的所有数据都是保存在内存当中的.</p><p>持久化方案有2种:</p><pre><code>1.Rdb:快照形式.定期把内存中当前时刻的数据保存到磁盘.这是Redis默认支持的持久化方案.2.aof形式:把所有对redis数据库操作的命令,增删改操作的命令,保存到文件当中,数据库恢复时把所有的命令执行一遍就可以了.</code></pre><p>redis.conf的配置里面有描述.</p><p>1.第一种:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-7d3bcac61425b092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>15分钟之内有1个key发生变化,他就保存一个快照文件.<br>5分钟之内有10个key发生变化,他就保存一个快照文件.<br>1分钟之呢有1W个key发生变化,他就保存一个快照文件.</p><p><code>快照模式有丢失文件的可能性,但是我们一般就做缓存.没多大影响.</code></p><p>2.第二种<code>把增删改操作用文件保存</code></p><p>默认是不开启的.对磁盘的IO比较频繁.<br><img src="http://upload-images.jianshu.io/upload_images/7505161-4600ea0113d356eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redis-cluster </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DB02-数据库字段设计规范</title>
      <link href="/2018/02/22/DB02-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>/2018/02/22/DB02-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>每个innodb表都要有一个主键</span><br><span class="line"><span class="number">2.</span>限制表上索引的数量,避免建立重复和冗余索引</span><br><span class="line"><span class="number">3.</span>注意合理选择符合索引键值的顺序</span><br></pre></td></tr></table></figure><h2 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h2><p>字段类型的选择,会直接影响数据库的建立.</p><p>列的字段越大,建立索引时所需要的空间就会越大.</p><h3 id="优先选择符合存储需要的最小数据类型"><a href="#优先选择符合存储需要的最小数据类型" class="headerlink" title="优先选择符合存储需要的最小数据类型."></a>优先选择符合存储需要的最小数据类型.</h3><p>1.我们一般是将字符串转为数字类型存储.</p><p>下面的函数的转换:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INET_ATON('<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span>') = <span class="number">4294967295</span></span><br><span class="line">把字符串的IP地址转换成整型.</span><br><span class="line"></span><br><span class="line">反之,把整型转换成字符串的IP地址</span><br><span class="line">INET_NTOA('<span class="number">4294967295</span>') = <span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span></span><br></pre></td></tr></table></figure></p><p>2.对于非负型的数据来说,要优先使用无符号整型来存储</p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql设计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql服务器日志</title>
      <link href="/2018/02/01/mysql%E6%97%A5%E5%BF%97%E5%88%92%E5%88%86/"/>
      <url>/2018/02/01/mysql%E6%97%A5%E5%BF%97%E5%88%92%E5%88%86/</url>
      <content type="html"><![CDATA[<h2 id="Mysql的使用情景"><a href="#Mysql的使用情景" class="headerlink" title="Mysql的使用情景"></a>Mysql的使用情景</h2><h3 id="日志记录系统"><a href="#日志记录系统" class="headerlink" title="日志记录系统"></a>日志记录系统</h3><p>MySQL 数据库的插入和查询性能都非常的高效，如果设计地较好，在使用 MyISAM 存储引擎的时候，两者可以做到互不锁定，达到很高的并发性能。</p><p>所以，对需要大量的插入和查询日志记录的系统来说，MySQL 是非常不错的选择。</p><p>比如处理用户的登录日志，操作日志 等 ，都是非常适合的应用场景。</p><h3 id="数据仓库系统"><a href="#数据仓库系统" class="headerlink" title="数据仓库系统"></a>数据仓库系统</h3><p>随着现在数据仓库数据量的飞速增长，我们需要的存储空间越来越大。数据量的不断增长，使数据的统计分析变得越来越低效，也越来越困难。</p><p>解决方式如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 采用昂贵的高性能主机以提高计算性能，用高端存储设备提高 I/O 性能，效果理想，但是成本非常高；</span><br><span class="line">2. 通过将数据复制到多台使用大容量硬盘的廉价 pc server上，以提高整体计算性能和 I/O 能力，效果尚可，存储空间有一定限制，成本低廉.</span><br><span class="line">3. 通过将数据水平拆分，使用多台廉价的 pc<span class="built_in"> server </span>和本地磁盘来存放数据，每台机器上面都只有所有数据的一部分，解决了数据量的问题，</span><br><span class="line">   所有 pc<span class="built_in"> server </span>一起并行计算，也解决了计算能力问题，通过中间代理程序调配各台机器的运算任务，</span><br><span class="line">   既可以解决计算性能问题又可以解决 I/O 性能问题，成本也很低廉.</span><br></pre></td></tr></table></figure><p>这是基本解决方法.对于Mysql来讲,实现2,3步骤很容易,通过读写分离,主从复制就可以实现.</p><p>通过 MySQL 的简单复制功能，可以很好的将数据从一台主机复制到另外一台 ，不仅仅在局域网内可以复制，在广域网同样可以。优点在于Mysql是免费的.</p><h2 id="Mysql的架构组成"><a href="#Mysql的架构组成" class="headerlink" title="Mysql的架构组成"></a>Mysql的架构组成</h2><h3 id="Mysql的物理文件组成"><a href="#Mysql的物理文件组成" class="headerlink" title="Mysql的物理文件组成"></a>Mysql的物理文件组成</h3><h4 id="Mysql5-7服务器日志"><a href="#Mysql5-7服务器日志" class="headerlink" title="Mysql5.7服务器日志"></a>Mysql5.7服务器日志</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>选择常规查询和慢查询日志输出目的地</span><br><span class="line"><span class="bullet">2. </span>错误日志</span><br><span class="line"><span class="bullet">3. </span>一般查询日志</span><br><span class="line"><span class="bullet">4. </span>二进制日志(Binlog)</span><br><span class="line"><span class="bullet">5. </span>manchaxun rizhi</span><br><span class="line"><span class="bullet">6. </span>DDL 日志</span><br><span class="line"><span class="bullet">7. </span>服务器日志维护</span><br></pre></td></tr></table></figure><h2 id="MySQL服务器有几个日志可以帮助你找出正在发生的活动"><a href="#MySQL服务器有几个日志可以帮助你找出正在发生的活动" class="headerlink" title="MySQL服务器有几个日志可以帮助你找出正在发生的活动."></a>MySQL服务器有几个日志可以帮助你找出正在发生的活动.</h2><p>日志类型:</p><ul><li>错误日志</li><li>一般查询日志</li><li>二进制日志</li><li>中继日志</li><li>慢查询日志</li><li>DDL日志(元数据日志)<br>-<br>写入日志的信息:</li><li>在启动,运行或者停止mysqld时遇到的问题</li><li>建立了客户的客户关系和声明</li><li>改变数据的语句(也可用于复制)</li><li>从复制主服务器接收的数据更改</li><li>查询花费了超过 long_query_time几秒的时间执行</li><li>元数据操作由DDL语句执行</li></ul><hr><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，除Windows上的错误日志之外，不会启用任何日志。</span><br><span class="line"></span><br><span class="line">DDL日志始终在需要时创建，并且没有用户可配置选项;</span><br><span class="line"></span><br><span class="line">默认情况下，服务器为数据目录中的所有启用日志写入文件。</span><br><span class="line"></span><br><span class="line">您可以通过刷新日志来强制服务器关闭并重新打开日志文件（或在某些情况下切换到新的日志文件）。</span><br><span class="line"></span><br><span class="line">发出FLUSH LOGS语句时发生日志刷新 ; 用a 或者参数执行 mysqladmin ; 或使用 或 选项执行 mysqldump。</span><br><span class="line"></span><br><span class="line">例如<span class="symbol">:flush-logsrefresh--flush-logs--master-data</span></span><br><span class="line"></span><br><span class="line">另外，二进制日志在其大小达到max_binlog_size系统变量的值时被刷新 。</span><br><span class="line"></span><br><span class="line">可以在运行时控制常规查询和慢查询日志.可以启动或者禁用日志记,或者更改日志文件名称.</span><br><span class="line"></span><br><span class="line">也可以告诉服务器编写通用查询和慢查询条目来记录表或者日志文件.</span><br><span class="line"></span><br><span class="line">日志维护操作(比如<span class="symbol">:</span>旧日志文件到期)的信息</span><br><span class="line"></span><br><span class="line">有关保持日志安全的信息</span><br><span class="line"></span><br><span class="line">以上都可以查看下列链接.</span><br></pre></td></tr></table></figure><p>TODO:</p><p><a href="">DDL日志</a></p><p><a href="">FLUSH语法</a></p><p><a href="">mysqladmin - 管理MySQL服务器的客户端</a></p><p><a href="">mysqldump–数据库备份程序</a></p><p><a href="">从服务器中继日志</a></p><p><a href="">服务器日志维护</a></p><p><a href="">密码和日志记录</a></p>]]></content>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> ServiceLog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>选择常规查询和慢速查询日志的输出目的地</title>
      <link href="/2018/01/27/%E9%80%89%E6%8B%A9%E5%B8%B8%E8%A7%84%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%85%A2%E9%80%9F%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E7%9A%84%E8%BE%93%E5%87%BA%E7%9B%AE%E7%9A%84%E5%9C%B0/"/>
      <url>/2018/01/27/%E9%80%89%E6%8B%A9%E5%B8%B8%E8%A7%84%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%85%A2%E9%80%9F%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E7%9A%84%E8%BE%93%E5%87%BA%E7%9B%AE%E7%9A%84%E5%9C%B0/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果启用了这些日志，则MySQL服务器可以灵活地控制输出目标到常规查询日志和慢速查询日志。</p><p>日志条目的可能目标是日志文件或 数据库中的general_log和 slow_log表mysql。</p><p>可以选择任一个或两个目的地。</p><h2 id="服务器启动时的日志控制。"><a href="#服务器启动时的日志控制。" class="headerlink" title="服务器启动时的日志控制。"></a>服务器启动时的日志控制。</h2><p>该–log-output选项指定日志输出的目的地.</p><p>该选项本身不会启用日志。它的语法是 ： –log-output[=value,…]</p><blockquote><p>如果–log-output给定值，则该值应该是一个或多个单词TABLE（记录到表）， FILE（记录到文件）或 NONE（不记录到表或文件）的以逗号分隔的列表。 NONE如果存在的话，优先于任何其他说明符。</p><p>如果–log-output省略，则默认日志记录目标为FILE。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> ServiceLog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>集群环境中解决Session共享问题</title>
      <link href="/2018/01/25/%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%A7%A3%E5%86%B3Session%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2018/01/25/%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%A7%A3%E5%86%B3Session%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="具体业务"><a href="#具体业务" class="headerlink" title="具体业务"></a>具体业务</h2><p>1.登录需要校验用户名和密码,然后把用户信息保存在session里面。最终返回用户登录成功。</p><p>2.用户访问用户中心，必须要登录。我们使用拦截器来实现。判断用户当前是否登录。</p><p>3.在拦截器里面判断有没有Session信息，再看session中有没有用户信息。如果有Session里面有用户信息，用户就登陆了。</p><p>但是要实现高并发，高可用。用需要前端搭建nginx服务器.</p><h2 id="session共享发生的位置"><a href="#session共享发生的位置" class="headerlink" title="session共享发生的位置"></a>session共享发生的位置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过<span class="selector-tag">nginx</span>负载均衡服务器，如果用户登录，如果用户登录成功了，就会把用户信息保存到当前的<span class="selector-tag">tomcat1</span>的<span class="selector-tag">Session</span>里面。</span><br><span class="line"></span><br><span class="line">用户成功后，刷新页面，他就会去访问用户中心。</span><br><span class="line"></span><br><span class="line">判断用户是否登录，恰巧轮到<span class="selector-tag">tomcat2</span>来提供服务了。发现没有用户的登录信息。要求用户登录。</span><br><span class="line"></span><br><span class="line">接下来，又提示登录，登录成功后，<span class="selector-tag">session</span>保存在<span class="selector-tag">Tomcat1</span>里面，刷新页面，再次访问用户中心，又会访问<span class="selector-tag">Tomcat2</span><span class="selector-class">.tomcat2</span>里面没有存储用户信息的<span class="selector-tag">session</span>，所以提示再次登录。</span><br></pre></td></tr></table></figure><h2 id="一般的解决方案"><a href="#一般的解决方案" class="headerlink" title="一般的解决方案"></a>一般的解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">配置tomcat，tomcat1会广播自己的节点信息，其他的tomcat节点接收到消息，会把那一个tomcat的session复制到其他的tomcat里面来。</span><br><span class="line"></span><br><span class="line">tomcat广播形式配合session共享，会有一个节点的上限。如果不听的往集群中加tomcat的时候，会形成内网的，网络固化，会占满内网的带宽，服务器的会变慢。</span><br><span class="line"></span><br><span class="line">所有节点共享session，需要解决高并发问题。</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有一个服务器，专门存储管理session信息。（Session里面都是<span class="built_in">key</span>-<span class="built_in">value</span>的形式，并且有过期时间的设置。）</span><br><span class="line"></span><br><span class="line">需要我们来模拟Session。redis有list的存储模型，有序，且是<span class="built_in">key</span>-<span class="built_in">value</span>的形式。</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>配置tomcat集群，配置tomcatsession复制。节点不要超过<span class="number">5</span>个。</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>可以使用session服务器，保存Session信息，使每个节点是无状态，需要模拟session。</span><br><span class="line"></span><br><span class="line">单点登录系统是使用Redis模拟Session，实现session的统一管理。</span><br></pre></td></tr></table></figure><h2 id="分布式事务的理解"><a href="#分布式事务的理解" class="headerlink" title="分布式事务的理解"></a>分布式事务的理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提交订单，订单提交，提醒库房系统发货。MQ，系统发消息。</span><br><span class="line"></span><br><span class="line">出异常，就说明事情没做完，导致数据不一致，还有手动应答，把消息处理完毕，正常结束了。</span><br><span class="line"></span><br><span class="line">给服务器一个回馈，我已经成功了。 此时，服务器吧这个消息删除掉。</span><br><span class="line"></span><br><span class="line">如果没有正常消费这个消息，服务器就会不停的重发，直到这个消息处理完，就能保证这个事不停的做。最终保证数据的一致性。</span><br><span class="line"></span><br><span class="line">我们使用ActiveMQ来实现事务的最终一致性。这个就可以解决分布式事务这样的问题。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Session共享 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax跨域问题</title>
      <link href="/2018/01/24/ajax%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2018/01/24/ajax%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="模拟ajax跨域问题"><a href="#模拟ajax跨域问题" class="headerlink" title="模拟ajax跨域问题"></a>模拟ajax跨域问题</h2><p>建立2个工程,一个客户端,一个服务端.</p><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-4a04cbedae7ea614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="服务端的代码"><a href="#服务端的代码" class="headerlink" title="服务端的代码"></a>服务端的代码</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-949db7dccc96f168.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/7505161-aeea368f4bee676c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="写一个get请求的测试"></p><p>虽然调用成功,但是却有问题<br><img src="http://upload-images.jianshu.io/upload_images/7505161-79ea920fd6d539ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>console栏报出错误:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-b1103ae784cc7c6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>发生ajax跨域的原因:</strong></p><p>一开始我以为是服务器后台不允许前台调用,但实际上并不是这样.</p><p>它是由于下面的原因决定的:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>浏览器限制</span><br><span class="line">这是出于浏览器安全的考虑,当他发现你的请求是跨域的时候,浏览器本身会做一些校验,如果检验不通过,就会报出跨域安全问题.</span><br><span class="line"></span><br><span class="line">服务器后台没有问题,而是浏览器校验出了问题.</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>跨域</span><br><span class="line">发出的请求不是本域的,请求协议域名,端口,任何一个不一样,浏览器都视为跨域问题.我们后台的端口是<span class="number">8080</span>,前台的端口是<span class="number">9901.</span>域名即使一样也不可以.</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="symbol">XHR</span>(<span class="symbol">XMLHTTPRequest</span>)请求</span><br><span class="line">也就是发送的不是<span class="symbol">XHR</span>请求,就算是跨域,浏览器也不会报错.</span><br><span class="line"></span><br><span class="line">如果是json的请求,就不会报出这个错误,如果是xhr类型的请求,就会出现这样的错误.</span><br><span class="line"></span><br><span class="line">普通的ajax请求返回的是json对象.</span><br><span class="line"></span><br><span class="line">jsonp请求返回的是一个json脚本.</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/<span class="number">7505161</span><span class="number">-61</span>cf20ca7baa8e64.png?imageMogr2/auto-orient/strip<span class="comment">%7CimageView2/2/w/1240)</span></span><br></pre></td></tr></table></figure></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.浏览器限制:每个人都做改动,就是客户端的改动.</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.XHR:只要发出的数据类型不是这个类型,我们就可以跨域,所以我们使用jsonp.</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.跨域</span><br><span class="line">一.被调用方(),基于HHTP协议关于跨域方面的要求做出的修改,也就是说<span class="keyword">A</span>域名调用B域名的时候,在B域名返回数据中加入一些字段允许<span class="keyword">A</span>域名调用.浏览器通过校验,就不会发生浏览器校验问题,</span><br><span class="line"></span><br><span class="line">别的公司的,调用方(隐藏跨域:通过代理,浏览器发出的都是<span class="keyword">A</span>域名的请求,把代理的URL都转到B域名里面,这样看起来就是同一个域名.)</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.浏览器禁止检查:</span><br><span class="line"></span><br><span class="line">命令行禁止启动: --<span class="keyword">disable-web-security</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">2.jsonp如何解决跨域</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">jsonp是json的一种补充使用.</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">使用jsonp后台也需要改动.</span></span><br></pre></td></tr></table></figure><h3 id="jsonp类型展示"><a href="#jsonp类型展示" class="headerlink" title="jsonp类型展示:"></a>jsonp类型展示:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url  : cartHostUrl+<span class="string">'/ajax/getproduct/'</span>,</span><br><span class="line">    type : <span class="string">'GET'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">//返回json格式的数据   </span></span><br><span class="line">    jsonp: <span class="string">'callback'</span>,</span><br><span class="line">    cache:<span class="literal">true</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       result =json;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后台修改:</p><p><img src="https://upload-images.jianshu.io/upload_images/7505161-1f5e01e70c1cb8c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Session共享 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebCrawler-网络爬虫01</title>
      <link href="/2018/01/09/WebCrawler/"/>
      <url>/2018/01/09/WebCrawler/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="大虫子"><a href="#大虫子" class="headerlink" title="大虫子"></a>大虫子</h1><p><img src="https://luoyu-1255840357.cos.ap-shanghai.myqcloud.com/skystar/51de3afb518f0.jpg" alt=""></p><h2 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h2><p>我们人做的事:<br><br>访问一个网页,输入URL,按回车,该网站的服务器就会返回一个HTML文件<br>浏览器解析返回的数据,展示在UI上.</p><p>爬虫做的事:<br><br>爬虫模仿人的操作,给网站发送一个请求,网站会给爬虫程序返回一个HTML文件,爬虫程序在根据返回的数据进行抓取分析.</p><h3 id="爬虫概论"><a href="#爬虫概论" class="headerlink" title="爬虫概论"></a>爬虫概论</h3><p>网络爬虫是一种自动化浏览网络的程序,或者叫网络机器人.<br><br>爬虫被广泛用于互联网搜索引擎或其他类似网站，以获取或更新这些网站的内容和检索方式。<br>它们可以自动采集所有其能够访问到的页面内容，以供搜索引擎做进一步处理（分检整理下载的页面），而使得用户能更快的检索到他们需要的信息。</p><p>白话:你手动打开窗口，输入数据等等操作用程序代替。用程序替你获取你想要的信息，这就是网络爬虫.</p><h3 id="爬虫应用"><a href="#爬虫应用" class="headerlink" title="爬虫应用"></a>爬虫应用</h3><p>通常搜索引擎处理的对象是互联网网页。<br><br>首先面临的问题是：如何能够设计出高效的下载系统，以将如此海量的网页数据传送到本地，在本地形成互联网网页的镜像备份。网络爬虫即起此作用，它是搜索引擎系统中很关键也很基础的构件。</p><p>爬虫：实际上就是通过相应的技术，抓取页面上特定的信息。</p><p>这种程序实际是利用html文档之间的链接关系，在Web上一个网页一个网页的爬取(crawl)，</p><p>将这些网页抓到系统来进行分析，并放入数据库中。</p>]]></content>
      
      
        <tags>
            
            <tag> 爬虫的原理 </tag>
            
            <tag> 爬虫架构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链(Blockchain)</title>
      <link href="/2018/01/08/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
      <url>/2018/01/08/%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><ul><li>区块链技术起源于<code>比特币</code>,是比特币的底层技术.</li></ul><blockquote><p>区块链本身是一串使用密码学方法相关联产生的数据块,<br>  每一个数据块中包含了一次比特币网络交易的信息,并由世界各地所有的比特币用户共同维护.</p></blockquote><h2 id="区块链的本质"><a href="#区块链的本质" class="headerlink" title="区块链的本质"></a>区块链的本质</h2><ul><li>区块链的本质是<code>电子账簿</code>.<blockquote><p>通俗讲,区块链就是利用计算机程序在全网记录所有交易信息的<strong>公开大账本</strong>.<br>人们只需要加入一个公开透明的数据库,通过点对点的记账,数据传输,认证或合约<br>来达成信用共识,而不再借助任何中间方.</p></blockquote></li></ul><h2 id="区块链的特点"><a href="#区块链的特点" class="headerlink" title="区块链的特点"></a>区块链的特点</h2><ul><li>区块链特点是受第三方控制的.</li></ul><blockquote><p>区块链中每个节点和矿工必须遵循同一记账交易规则,而这个规则是基于<strong>密码算法</strong>而不是信用.<br>  同时每笔交易需要网络内其他用户的批准,所以不需要一套第三方中介结构或信任机构背锅.</p></blockquote><h2 id="区块链的安全性"><a href="#区块链的安全性" class="headerlink" title="区块链的安全性"></a>区块链的安全性</h2><p>区块链的技术采取保障其安全性的算法是<code>单向哈希算法</code>.</p><blockquote><p>区块链采取单向哈希算法,哈希(hash)算法是一种单向密码体制,即它是一个从明文到密文的不可逆的映射,只有加密过程,没有解密过程.<br>  每当有加密交易产生时,网络中有强大运算能力的矿工(Miner)就开始利用算法解密验证交易,创造出新的区块来记录最新的交易.<br>  像石榴算法,绿萝算法,企鹅算法都是常见的搜索引擎算法.</p></blockquote><h2 id="区块链的分类"><a href="#区块链的分类" class="headerlink" title="区块链的分类"></a>区块链的分类</h2><p>目前已知的区块链技术大致可分成三类:</p><ul><li><p>公开区块链(public blockchain): 像比特币,公开区块链上的数据所有人都可以访问,所有人都可以发出交易等待被写入区块链.</p></li><li><p>协作区块链(federated blockchain): 德勤等会计所尝试的<strong>审计系统</strong>,参与区款连的节点是事先选择好的,节点间很可能是有很好的网络连接.</p></li><li><p>私有区域链(private blockchain): 参与的节点只有用户自己,数据的访问和使用有严格的权限管理.</p></li></ul><h2 id="区款连的运行"><a href="#区款连的运行" class="headerlink" title="区款连的运行"></a>区款连的运行</h2><blockquote><p>区块链这个公开透明的数据库包括了过去所有的交易记录,历史数据以及其他相关信息,这些信息安全地<strong>分布式存储</strong>在一串使用密码学方法产生的数据块中,即为一个区块,每个区块都包含了一个区块的索引,即区块的哈希值(hash),而从创始区块连接当前区块,就形成了区块链.<br>    区块链自动地降低了支付成本.</p></blockquote><h2 id="15年12月重金投资区块链的初创公司"><a href="#15年12月重金投资区块链的初创公司" class="headerlink" title="15年12月重金投资区块链的初创公司"></a>15年12月重金投资区块链的初创公司</h2><blockquote><p>华尔街的金融公司正在投资区块链,抢滩布局.Visa,纳斯达克,花旗风投投资了一家旧金山区块链初创公司chain,设计融资金额达到3000万美元.</p></blockquote><h2 id="类比特币数据货币RSCoin"><a href="#类比特币数据货币RSCoin" class="headerlink" title="类比特币数据货币RSCoin"></a>类比特币数据货币RSCoin</h2><blockquote><p>英国央行计划发布由中央机构控制的类比特币数据货币RSCoin.<br>    这是一款完全基于央行的需求来设计的基于区块链技术的数字货币,该技术将依赖于一系列权威机构,如商业机构,防止货币重复消费.<br>    目前,RSCoin由伦敦大学学院(UCL)研发,已进入了初步测试阶段.</p></blockquote><h2 id="区块链的结算应用"><a href="#区块链的结算应用" class="headerlink" title="区块链的结算应用"></a>区块链的结算应用</h2><blockquote><p>瑞穗银行声明中表示:”连续地生成包含交易信息的区块按照时间顺序链接成了区块链,编程不能被篡改的信息.而且,因为信息可以在多个公司之间共享,所以合作伙伴证实它可以缩短交易后的程序所需要的时间.”<br>    区块链技术在试验过程中,也确实缩短了交易后程序的时间,达到接近即时结算的效果.</p></blockquote><h2 id="中国资本在区块链的作为"><a href="#中国资本在区块链的作为" class="headerlink" title="中国资本在区块链的作为"></a>中国资本在区块链的作为</h2><blockquote><p>作为比特币及区块链的忠实拥护者.万向集团出资5000万美元成立了区块链基金,用于在全球范围内投资区块链商业应用相关的各类项目.<br>    全球十大区块链投资中我国占据三席,分别为数贝投资,IDG,万向区块链基金.    </p></blockquote><h2 id="测试代码高亮"><a href="#测试代码高亮" class="headerlink" title="测试代码高亮"></a>测试代码高亮</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] ages</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你好啊!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    代码高亮测试</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 区块链(Blockchain) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FT中文网 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秒杀高并发优化</title>
      <link href="/2018/01/02/%E7%A7%92%E6%9D%80%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/"/>
      <url>/2018/01/02/%E7%A7%92%E6%9D%80%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="高并发发生的位置"><a href="#高并发发生的位置" class="headerlink" title="高并发发生的位置"></a>高并发发生的位置</h2><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-85e9859248fa7aea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>红色: 可能出现高并发.</p><p>绿色: 忽略不计</p><h3 id="详情页的分析"><a href="#详情页的分析" class="headerlink" title="详情页的分析"></a>详情页的分析</h3><p>秒杀时间要到的时候,用户会自然而然的刷新秒杀页面.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-66a70a1083881608.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="CDN的理解"><a href="#CDN的理解" class="headerlink" title="CDN的理解"></a>CDN的理解</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>CDN(内部分发网络)加速用户获取数据的系统</span><br><span class="line"><span class="bullet">2. </span>部署在里用户最近的网络节点上</span><br><span class="line"><span class="bullet">3. </span>命中CDN不需要访问后端服务器</span><br><span class="line"><span class="bullet">4. </span>互联网公司有自己搭建或者租用</span><br></pre></td></tr></table></figure><h3 id="系统时间优不优化"><a href="#系统时间优不优化" class="headerlink" title="系统时间优不优化?"></a>系统时间优不优化?</h3><p>运行一次内存(Cacheline)大约10ns(可忽略不计)</p><p>我们单独获取系统时间,在Controller里面做了一个接口.</p><h3 id="秒杀地址接口分析"><a href="#秒杀地址接口分析" class="headerlink" title="秒杀地址接口分析"></a>秒杀地址接口分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 无法使用CDN缓存</span><br><span class="line">2. 适合服务器端缓存:Redis等</span><br><span class="line">3. 一致性维护成本低</span><br></pre></td></tr></table></figure><h3 id="秒杀地址接口优化"><a href="#秒杀地址接口优化" class="headerlink" title="秒杀地址接口优化"></a>秒杀地址接口优化</h3><p>存在的问题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 无法使用CDN缓存(用的别人的)</span><br><span class="line">2. 后端缓存困难:库存问题</span><br><span class="line">3. 一行数据竞争:热点商品</span><br></pre></td></tr></table></figure></p><p>解决方式:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-64ea52ab89b2a6fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr><h3 id="其他方案分析"><a href="#其他方案分析" class="headerlink" title="其他方案分析"></a>其他方案分析</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-6071abed5a124f26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="成本分析"><a href="#成本分析" class="headerlink" title="成本分析"></a>成本分析</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a47c7fe04bb002d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="mysqlUpdate测试"><a href="#mysqlUpdate测试" class="headerlink" title="mysqlUpdate测试"></a>mysqlUpdate测试</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-d2460fc0b5c35b4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>mysqlUpdate压力测试:同一个商品1S钟可以被卖4W次<br>但是我们并不使用mysql来解决高并发的问题,一般认为mysql比较低效.</p><h3 id="java控制事务行为的分析"><a href="#java控制事务行为的分析" class="headerlink" title="java控制事务行为的分析"></a>java控制事务行为的分析</h3><p>以一条更新语句为例:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-583d887d4ab61903.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>当所有人都去购买同一个商品的时候,都执行update操作,这样会造成用户阻塞,当排队排在最前的用户commit的时候,后面的用户才能执行update,会存在串行化的问题.</p><p>只有上一条更新操作commit的时候,下一条update SQL语句,获得行锁,才能执行更新操作.</p><p>行级锁是在Commit之后释放.</p><h3 id="高并发的难点所在"><a href="#高并发的难点所在" class="headerlink" title="高并发的难点所在"></a>高并发的难点所在</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f50b353a03de31d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>行级锁在Commit提交之后释放,要想办法减少行级锁持有的时间.</p><p>但是大部分的MySQL数据库都是云服务,部署在异地机房,就有有传播延迟,实际约20ms.</p><p>所以<strong>延迟问题</strong>也会造成行锁释放需要的时间更加长.</p><p>比如下图:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-aa7ef35e2860cb2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="判断Update更新库存成功"><a href="#判断Update更新库存成功" class="headerlink" title="判断Update更新库存成功"></a>判断Update更新库存成功</h3><p>有两个条件:<br>– update自身运行没出错<br>– 客户端确认Update影响记录数</p><p>– 优化方法:</p><pre><code>把客户端逻辑放到Mysql服务端.避免网络延迟和GC影响.</code></pre><p>将客户端逻辑放到Mysql服务端的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 定制Mysql方案:update/*+[auto_commit]*/,需要修改mysql的源码</span><br><span class="line">2. 使用存储过程:整个事务在Mysql端完成.</span><br><span class="line">````   </span><br><span class="line">### 总结</span><br><span class="line">* 前端控制暴露接口,按钮防止重复.</span><br><span class="line">* 动静态数据分离:CDN缓存,后端缓存.</span><br><span class="line">* 事务竞争优化:减少事务锁时间.</span><br><span class="line"></span><br><span class="line">## Redis的使用</span><br><span class="line">```androiddatabinding</span><br><span class="line">使用redis优化地址暴露接口</span><br><span class="line">make</span><br><span class="line">make install </span><br><span class="line">-- 需要GCC的环境</span><br><span class="line">redis-server</span><br><span class="line">集群环境下的查看监控日志:</span><br><span class="line">redis-sentinel sentinel.conf</span><br><span class="line"></span><br><span class="line">加入pom.xml依赖</span><br><span class="line">&lt;!--Redis客户端的支持--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.7.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Redis后端缓存优化"><a href="#Redis后端缓存优化" class="headerlink" title="Redis后端缓存优化"></a>Redis后端缓存优化</h2><p>我们知道在<strong>暴露接口</strong>的实现发过程中,我们是使用主键查询的方式来工作的,这样访问速度很快.<br>但是频繁的访问数据库,给我们的服务器造成了很大的压力.</p><p>我们希望Redis来做缓存,来降低访问数据库的压力.</p><h2 id="优化编码"><a href="#优化编码" class="headerlink" title="优化编码"></a>优化编码</h2><p>优化的是秒杀暴露接口,就是通过Id去查询商品的那个方法.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>传输的就是二进制的数据,所以需要将对象序列化.</p><p>一般在实体上implements serializable,这是jdk自带的序列话机制.</p><p><a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="noopener">JVM 性能比对.</a></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">采用自定义序列化<span class="comment">(protostuff)</span></span><br><span class="line"></span><br><span class="line">把我们的对象转换为二进制的数组<span class="comment">(字节数组)</span>存到Redis当中.</span><br></pre></td></tr></table></figure><h3 id="protostuff序列化的依赖"><a href="#protostuff序列化的依赖" class="headerlink" title="protostuff序列化的依赖"></a>protostuff序列化的依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--ProtoStuff的序列化依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0.8&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="添加Redis服务"><a href="#添加Redis服务" class="headerlink" title="添加Redis服务"></a>添加Redis服务</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存优化</span></span><br><span class="line"><span class="comment"> * get from cache</span></span><br><span class="line"><span class="comment"> * if null</span></span><br><span class="line"><span class="comment"> * getdb</span></span><br><span class="line"><span class="comment"> * else</span></span><br><span class="line"><span class="comment"> * put cache</span></span><br><span class="line"><span class="comment"> * locgoin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class RedisDao &#123;</span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入地址&amp;&amp;端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param ip</span></span><br><span class="line"><span class="comment">     * @param port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> RedisDao(<span class="keyword">String</span> ip, <span class="built_in">int</span> port) &#123;</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(ip, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过类的字节码对象创建,</span></span><br><span class="line"><span class="comment">     * 通过类的反射可以拿到类有什么属性,哪些方法.</span></span><br><span class="line"><span class="comment">     * RunTimeSchema就是基于类的属性去做一个模式.</span></span><br><span class="line"><span class="comment">     * 创建对象的时候,会根据模式赋予相应的值.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出Seckill</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param seckillId</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Seckill getSeckill(<span class="keyword">long</span> seckillId) &#123;</span><br><span class="line">        <span class="comment">//Redis缓存的逻辑:先拿到对象,判断对象是否存在,将其反序列化成对象.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jedis jedis = jedisPool.getResource();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//前缀+值的模式</span></span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">key</span> = <span class="string">"seckill:"</span> + seckillId;</span><br><span class="line">                <span class="comment">//但并没有实现内部序列化操作</span></span><br><span class="line">                <span class="comment">//get--&gt;byte[]--&gt;反序列化--&gt;Object[Seckill]</span></span><br><span class="line">                <span class="built_in">byte</span>[] bytes = jedis.<span class="built_in">get</span>(<span class="built_in">key</span>.getBytes());</span><br><span class="line">                <span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//就将这个字节数组利用protostuff序列化</span></span><br><span class="line">                    <span class="comment">//创建一个空对象</span></span><br><span class="line">                    Seckill seckill = schema.newMessage();</span><br><span class="line">                    <span class="comment">//按照schema把数据传输到空对象里面去</span></span><br><span class="line">                    ProtostuffIOUtil.mergeFrom(bytes,seckill,schema);</span><br><span class="line">                    <span class="comment">//seckill被反序列化,空间压缩到原生jdk处理的十分之一,压缩速度快,节省了CPU.</span></span><br><span class="line">                    <span class="keyword">return</span> seckill;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往里面防止Seckill对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param seckill</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> putSeckill(Seckill seckill) &#123;</span><br><span class="line">        <span class="comment">//set Object[Seckill] --&gt; 序列化--&gt;byte[] </span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">String</span> <span class="built_in">key</span>=<span class="string">"seckill:"</span>+seckill.getseckillId();</span><br><span class="line">                <span class="comment">//将其转为字节数组,里面内置了一个缓存器,如果当前对象特别大,会有一个缓冲的过程.</span></span><br><span class="line">                <span class="built_in">byte</span>[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));</span><br><span class="line">                <span class="comment">//经测试,这个字节数组的大小为51</span></span><br><span class="line">                <span class="comment">//超时缓存</span></span><br><span class="line">                <span class="built_in">int</span> timeout =<span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line">                <span class="keyword">String</span> result = jedis.setex(<span class="built_in">key</span>.getBytes(), timeout, bytes);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span><br><span class="line">public class BaseTest &#123;</span><br><span class="line">    private long id = 1001;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisDao redisDao;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testRedisDao() &#123;</span><br><span class="line">        Seckill seckill = redisDao.getSeckill(id);</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            seckill = secKillDao.queryById(id);</span><br><span class="line">            if (seckill != null) &#123;</span><br><span class="line">                String result = redisDao.putSeckill(seckill);</span><br><span class="line">                System.out.println(&quot;存入是否成功:&quot; + result);</span><br><span class="line">                seckill = redisDao.getSeckill(id);</span><br><span class="line">                System.out.println(&quot;取出的SeckillShop是:&quot; + seckill);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发优化"><a href="#并发优化" class="headerlink" title="并发优化"></a>并发优化</h2><p>事务的发生:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-bddd21602d02c09e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>目的就是要缩短update 减库存的时候使用行级锁,到commit事务的时候释放行级锁的时间.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们把insert语句放在update语句的前面,因为他会做一个判断.</span><br><span class="line"></span><br><span class="line">insert ignore 插入成功,返回1,代表插入一行.插入失败,返回0.</span><br><span class="line"></span><br><span class="line">根据返回值来确定是否执行Update,update就是减少库存,返回1执行成功,返回0执行失败.</span><br><span class="line"></span><br><span class="line">主要目的就是降低mysql-rowLock的持有时间.</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a28f0f1e8d2c1894.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>找到SeckillService</p><p>改造SeckillServiceImpl中的代码:</p><p><code>将先执行update操作&amp;&amp;insert明细  改造成  insert操作在前然后update在后的样子</code></p><p>这样做的好处是缩短了获得行级锁的时间.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">update insert update insert </span><br><span class="line"></span><br><span class="line">2个事务</span><br><span class="line">前面先占用行级锁,然后再插入明细      后面等待行级锁,再执行插入操作,这样等待行级锁的时间会更长.</span><br><span class="line"></span><br><span class="line">insert update insert update </span><br><span class="line"></span><br><span class="line">前面插入完毕后,执行update才占用行级锁         后面先插入,然后等待行级锁.</span><br><span class="line"></span><br><span class="line">也就是两个事务同时insert的情况下,没有锁竞争,执行速度会快.</span><br></pre></td></tr></table></figure></p><p>改造代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//写明细</span><br><span class="line">           int insertState = successKilledDao.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">           //唯一的验证标准就是验证 秒杀商品的ID和用户手机号.</span><br><span class="line">           //之前秒杀成功,state=1.再次秒杀同一seckillId的商品,他就会秒杀不成功了,因为我们设置的是insert ignore,插入就会忽略,insertState返回的就是0.</span><br><span class="line">           if (insertState &lt;= 0) &#123;</span><br><span class="line">               //重复秒杀</span><br><span class="line">               throw new RepatKillException(&quot;Seckill repeted!&quot;);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               //减库存,热点商品竞争发生在这个地方</span><br><span class="line">               int updateCount = secKillDao.reduceNumber(seckillId, killTime);</span><br><span class="line">               //更新数&lt;0,说明减库存失败,没有更新到记录</span><br><span class="line">               if (updateCount &lt;= 0) &#123;</span><br><span class="line">                   //没有更新到记录,秒杀结束,rollback</span><br><span class="line">                   throw new SeckillClosedException(&quot;Seckill is closed!&quot;);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   //秒杀成功,commit</span><br><span class="line">                   SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                   return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><h2 id="事务SQL在Mysql客户端执行"><a href="#事务SQL在Mysql客户端执行" class="headerlink" title="事务SQL在Mysql客户端执行."></a>事务SQL在Mysql客户端执行.</h2><p>存储过程做优化.</p><p>目的:降低行级锁到commit的持续时间,同时让mysql获得更高的QPS.</p><p>编写mysql的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$ --console   默认的分隔符是; 现在将 ; 转换为 $$,这样看着舒服    </span><br><span class="line">--定义存储过程    </span><br><span class="line">--参数:in 输入参数; out 输入参数    </span><br><span class="line">--row_count():返回上一条修改类型sql的影响行数    </span><br><span class="line">--row_count :0;未修改数据; &gt;0;表示修改的行数;&lt;0:sql错误或者未执行sql    </span><br><span class="line">CREATE PROCEDURE `seckill`.`execute_seckill`    </span><br><span class="line">(in v_seckill_id bigint,in v_phone bigint,    </span><br><span class="line">in v_kill_time timestamp,out r_result int)    </span><br><span class="line">BEGIN    </span><br><span class="line">    DECLARE insert_count int default 0;    </span><br><span class="line">    START TRANSACTION;    </span><br><span class="line">    insert ignore into success_killed    </span><br><span class="line">    (seckill_id,user_phone,create_time)    </span><br><span class="line">    values (v_seckill_id,v_phone,v_kill_time);    </span><br><span class="line">    select row_count() into insert_count;    </span><br><span class="line">    IF (insert_count = 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -1;    </span><br><span class="line">    ELSEIF (insert_count &lt; 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -2;    </span><br><span class="line">    ELSE    </span><br><span class="line">    update seckill    </span><br><span class="line">    set number = number -1    </span><br><span class="line">    where seckill_id = v_seckill_id    </span><br><span class="line">    and start_time &lt; v_kill_time    </span><br><span class="line">    and end_time &gt; v_kill_time    </span><br><span class="line">    and number &gt; 0;    </span><br><span class="line">    select row_count() into insert_count;    </span><br><span class="line">    IF (insert_count = 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = 0;    </span><br><span class="line">    ELSEIF (insert_count &lt; 0) THEN    </span><br><span class="line">    ROLLBACK;    </span><br><span class="line">    set r_result = -2;    </span><br><span class="line">    ELSE    </span><br><span class="line">    COMMIT;    </span><br><span class="line">    set r_result = 1;    </span><br><span class="line">    END IF;    </span><br><span class="line">    END IF;    </span><br><span class="line">END;  </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>执行存储的过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先把分隔符改回来</span><br><span class="line">DELIMITER ;</span><br><span class="line">1.定义一个常量</span><br><span class="line">-- 执行存储过程</span><br><span class="line">call execute_seckill(1003,13784832739,now(),@r_result);</span><br><span class="line">--  获取结果</span><br><span class="line">select @r_result;</span><br></pre></td></tr></table></figure><p>可以看到结果是result=1,执行秒杀成功.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-018aae8a40889a22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们可以查看库存和明细表.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f9df0bf1808d4ec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f4741e9bae1c6727.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="具体实现mysql的存储过程秒杀商品"><a href="#具体实现mysql的存储过程秒杀商品" class="headerlink" title="具体实现mysql的存储过程秒杀商品"></a>具体实现mysql的存储过程秒杀商品</h2><h3 id="编写service层接口"><a href="#编写service层接口" class="headerlink" title="编写service层接口"></a>编写service层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 主要是完成mysql的存储过程</span><br><span class="line">    * @param seckillId</span><br><span class="line">    * @param userPhone</span><br><span class="line">    * @param md5</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5);</span><br></pre></td></tr></table></figure><h3 id="编写Dao层接口"><a href="#编写Dao层接口" class="headerlink" title="编写Dao层接口"></a>编写Dao层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 使用存储过程执行秒杀</span><br><span class="line">    * @param paramMap</span><br><span class="line">    */</span><br><span class="line">   void killByProcedure(Map&lt;String,Object&gt; paramMap);</span><br></pre></td></tr></table></figure><h3 id="mapper中的写法"><a href="#mapper中的写法" class="headerlink" title="mapper中的写法"></a>mapper中的写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybati调用存储过程--&gt;</span><br><span class="line">   &lt;select id=&quot;killByProcedure&quot; statementType=&quot;CALLABLE&quot;&gt;</span><br><span class="line">       call execute_seckill(</span><br><span class="line">         #&#123;seckillId,jdbcType=BIGINT,mode=IN&#125;,</span><br><span class="line">         #&#123;phone,jdbcType=BIGINT,mode=IN&#125;,</span><br><span class="line">         #&#123;killTime,jdbcType=TIMESTAMP,mode=IN&#125;,</span><br><span class="line">         #&#123;result,jdbcType=INTEGER,mode=OUT&#125;</span><br><span class="line">       )</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="引入依赖Commons-collections"><a href="#引入依赖Commons-collections" class="headerlink" title="引入依赖Commons-collections"></a>引入依赖Commons-collections</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="编写Service层接口"><a href="#编写Service层接口" class="headerlink" title="编写Service层接口"></a>编写Service层接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5) &#123;</span><br><span class="line">        //校验MD5</span><br><span class="line">        if(md5 == null || !md5.equals(getMd5(seckillId)) )&#123;</span><br><span class="line">            return new SeckillExecution(seckillId,SeckillStatEnum.DATA_REWRITE);</span><br><span class="line">        &#125;</span><br><span class="line">        Date killTime  = new Date();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;seckillId&quot;,seckillId);</span><br><span class="line">        map.put(&quot;phone&quot;,userPhone);</span><br><span class="line">        map.put(&quot;killTime&quot;,killTime);</span><br><span class="line">        map.put(&quot;result&quot;,null);</span><br><span class="line">        //执行存储过程,result被赋值</span><br><span class="line">        try &#123;</span><br><span class="line">            secKillDao.killByProcedure(map);</span><br><span class="line">            //获取Result</span><br><span class="line">            Integer result = MapUtils.getInteger(map, &quot;result&quot;, -2);</span><br><span class="line"></span><br><span class="line">            if(result == 1 )&#123;</span><br><span class="line">                SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.SUCCESS,successKilled);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //根据Result去拿我们的秒杀状态.</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.stateOf(result));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(),e);</span><br><span class="line">            return new SeckillExecution(seckillId,SeckillStatEnum.INNER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试mysql存储过程</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void executeSeckillByProcedure()&#123;</span><br><span class="line">    long id =1003;</span><br><span class="line">    long phone= 1358963569;</span><br><span class="line">    Exposer exposer = seckillService.exportSeckillUrl(id);</span><br><span class="line">    if(exposer.isExposed())&#123;</span><br><span class="line">        //开始执行秒杀</span><br><span class="line">        String md5 = exposer.getMd5();</span><br><span class="line">            if(md5!= null)&#123;</span><br><span class="line">                SeckillExecution seckillExecution = seckillService.executeSeckillProcedure(id, phone, md5);</span><br><span class="line">                logger.info(seckillExecution.getStateInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="替换Controller"><a href="#替换Controller" class="headerlink" title="替换Controller"></a>替换Controller</h3><p>就把SeckillController中的秒杀方法改为executeSeckillByProcedure即可.</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>详情表列表</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-b2f27e6e385231a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>重复秒杀</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-cd6d98f19a6d1e83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>秒杀成功</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-c2d3b10cc408d3a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>秒杀成功的json数据–execution展示.这是用存储过程来执行秒杀的.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-564db0197d8fe6f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> Seckill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RowsLock </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秒杀web层开发</title>
      <link href="/2018/01/02/%E7%A7%92%E6%9D%80Web%E5%B1%82%E5%BC%80%E5%8F%91/"/>
      <url>/2018/01/02/%E7%A7%92%E6%9D%80Web%E5%B1%82%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol><li>前端交互设计</li><li>Restful</li><li>springmvc</li><li>bootstrap+jquery</li></ol><h2 id="前端交互设计"><a href="#前端交互设计" class="headerlink" title="前端交互设计"></a>前端交互设计</h2><ol><li>产品</li><li>前端</li><li>后端</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8aad1b29e7b4525e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>详情页流程逻辑</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e6263a73fb5ef628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Restful接口设计"><a href="#Restful接口设计" class="headerlink" title="Restful接口设计"></a>Restful接口设计</h2><h3 id="什么是Restful"><a href="#什么是Restful" class="headerlink" title="什么是Restful"></a>什么是Restful</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST是英文representational state transfer(表象性状态转变)或者表述性状态转移;</span><br><span class="line">Rest是web服务的一种架构风格;</span><br><span class="line">使用HTTP,URI,XML,JSON,HTML等广泛流行的标准和协议;轻量级,跨平台,跨语言的架构设计;</span><br><span class="line">它是一种设计风格,不是一种标准,是一种思想.</span><br><span class="line"></span><br><span class="line">Restful兴起于Rails,是一种优雅的URL表述方式,资源的状态和状态转移.</span><br></pre></td></tr></table></figure><h3 id="Rest架构的风格"><a href="#Rest架构的风格" class="headerlink" title="Rest架构的风格"></a>Rest架构的风格</h3><p>Rest架构的主要原则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">网络上的所有事物都被抽象为资源</span><br><span class="line"></span><br><span class="line">每个资源都有一个唯一的资源标识符</span><br><span class="line"></span><br><span class="line">同一个资源具有多种表现形式(xml,json等)</span><br><span class="line"></span><br><span class="line">对资源的各种操作不会改变资源标识符</span><br><span class="line"></span><br><span class="line">所有的操作都是无状态的</span><br><span class="line"></span><br><span class="line">符合REST原则的架构方式即可称为RESTful</span><br></pre></td></tr></table></figure></p><h3 id="Restful的示例"><a href="#Restful的示例" class="headerlink" title="Restful的示例"></a>Restful的示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET   /Seckill/list   风格友好</span><br><span class="line">POST /Seckill/execute/&#123;seckillId&#125; 风格不友好 </span><br><span class="line">POST /Seckill/&#123;seckillId&#125;/execute 风格友好</span><br><span class="line"></span><br><span class="line">GET /seckill/delete/&#123;id&#125; 风格不友好</span><br><span class="line">GET /seckill/&#123;id&#125;/delete 风格友好</span><br></pre></td></tr></table></figure><h3 id="Restful规范"><a href="#Restful规范" class="headerlink" title="Restful规范"></a>Restful规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET     --&gt;查询操作</span><br><span class="line">POST    --&gt;添加/修改操作</span><br><span class="line">PUT     --&gt;修改操作</span><br><span class="line">DELETE  --&gt;删除操作</span><br></pre></td></tr></table></figure><p>图示:</p><p><img src="http://img.blog.csdn.net/20170625151347639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnhpYW9jaGFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p>HTTP状态码:</p><p><img src="http://img.blog.csdn.net/20170625152145836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnhpYW9jaGFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><h3 id="springmvc中实现Restful服务"><a href="#springmvc中实现Restful服务" class="headerlink" title="springmvc中实现Restful服务"></a>springmvc中实现Restful服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC实现restful服务:</span><br><span class="line">SpringMVC原生态的支持了REST风格的架构设计</span><br><span class="line">所涉及到的注解:</span><br><span class="line">--@RequestMapping</span><br><span class="line">--@PathVariable</span><br><span class="line">--@ResponseBody</span><br></pre></td></tr></table></figure><h3 id="url的设计"><a href="#url的设计" class="headerlink" title="url的设计"></a>url的设计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. /模块/资源/&#123;标示&#125;/集合1/...</span><br><span class="line">良好的表示如下:</span><br><span class="line">    2. /user/&#123;uid&#125;/friends    --&gt;好友列表</span><br><span class="line">    3. /user/&#123;uid&#125;/followers  --&gt;关注者列表</span><br></pre></td></tr></table></figure><p><strong>秒杀API的URL设计</strong><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="string">/seckill/list</span>                   秒杀列表</span><br><span class="line">GET <span class="string">/seckill/</span>&#123;id&#125;<span class="string">/detail</span>            详情页面</span><br><span class="line">GET <span class="string">/seckill/time/now</span>               系统时间</span><br><span class="line">POST <span class="string">/seckill/</span>&#123;id&#125;<span class="string">/exposer</span>          暴露秒杀</span><br><span class="line">POST <span class="string">/seckill/</span>&#123;id&#125;/&#123;md5&#125;<span class="string">/execution</span>  执行秒杀</span><br></pre></td></tr></table></figure></p><h2 id="SpringMVC的运行流程"><a href="#SpringMVC的运行流程" class="headerlink" title="SpringMVC的运行流程"></a>SpringMVC的运行流程</h2><h3 id="我们始终围绕着Handler开发-如下"><a href="#我们始终围绕着Handler开发-如下" class="headerlink" title="我们始终围绕着Handler开发,如下:"></a>我们始终围绕着Handler开发,如下:</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a7b951d96de382f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="SpringMVC的运行流程-1"><a href="#SpringMVC的运行流程-1" class="headerlink" title="SpringMVC的运行流程"></a>SpringMVC的运行流程</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.用户发送请求到<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">2<span class="selector-class">.DispatchServlet</span>根据请求路径查询具体的<span class="selector-tag">Handler</span></span><br><span class="line"></span><br><span class="line">3<span class="selector-class">.HandlerMapping</span>返回一个<span class="selector-tag">HandlerExcutionChain</span>给<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">　<span class="selector-tag">HandlerExcutionChain</span>：<span class="selector-tag">Handler</span>和<span class="selector-tag">Interceptor</span>集合</span><br><span class="line"></span><br><span class="line">4<span class="selector-class">.DispatchServlet</span>调用<span class="selector-tag">HandlerAdapter</span>适配器</span><br><span class="line"></span><br><span class="line">5<span class="selector-class">.HandlerAdapter</span>调用具体的<span class="selector-tag">Handler</span>处理业务</span><br><span class="line"></span><br><span class="line">6<span class="selector-class">.Handler</span>处理结束返回一个具体的<span class="selector-tag">ModelAndView</span>给适配器</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">ModelAndView</span><span class="selector-pseudo">:model--</span>&gt;数据模型，<span class="selector-tag">view--</span>&gt;视图名称</span><br><span class="line"></span><br><span class="line">7.适配器将<span class="selector-tag">ModelAndView</span>给<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">8<span class="selector-class">.DispatchServlet</span>把视图名称给<span class="selector-tag">ViewResolver</span>视图解析器</span><br><span class="line"></span><br><span class="line">9<span class="selector-class">.ViewResolver</span>返回一个具体的视图给<span class="selector-tag">DispatchServlet</span></span><br><span class="line"></span><br><span class="line">10.渲染视图</span><br><span class="line"></span><br><span class="line">11.展示给用户</span><br></pre></td></tr></table></figure><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-df43c8d02cff87c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="Http处理地址映射原理"><a href="#Http处理地址映射原理" class="headerlink" title="Http处理地址映射原理"></a>Http处理地址映射原理</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-df748190bd76bbf0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="注解映射示例"><a href="#注解映射示例" class="headerlink" title="注解映射示例"></a>注解映射示例</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>注解:</span><br><span class="line"><span class="number">1.</span> 支持标准的URL</span><br><span class="line"><span class="number">2.</span> Ant风格URL(以?和** 等字符)</span><br><span class="line">3. 带(XXX)占位符的URL</span><br><span class="line"></span><br><span class="line">for example:</span><br><span class="line"><span class="number">1.</span> <span class="regexp">/user/</span>*/creation</span><br><span class="line">匹配 <span class="regexp">/user/</span>aaa<span class="regexp">/creation,/</span>user<span class="regexp">/bbb/</span>creation等URL</span><br><span class="line"><span class="number">2.</span> <span class="regexp">/user/</span>**/creation </span><br><span class="line">匹配 <span class="regexp">/usr/</span>creation,  <span class="regexp">/user/</span>aaa<span class="regexp">/bbb/</span>creation等URL</span><br><span class="line"><span class="number">3.</span> <span class="regexp">/user/</span>&#123;userId&#125;</span><br><span class="line">匹配<span class="regexp">/user/</span><span class="number">123</span>,<span class="regexp">/user/</span>abc等URL</span><br><span class="line"><span class="number">4.</span> <span class="regexp">/company/</span>&#123;companyId&#125;<span class="regexp">/user/</span>&#123;userId&#125;/detail</span><br><span class="line">匹配<span class="regexp">/company/</span><span class="number">123</span><span class="regexp">/user/</span><span class="number">456</span>/detail等URL</span><br></pre></td></tr></table></figure><h2 id="请求方法细节的处理"><a href="#请求方法细节的处理" class="headerlink" title="请求方法细节的处理"></a>请求方法细节的处理</h2><p>包括:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>请求参数的绑定</span><br><span class="line"><span class="bullet">2. </span>请求方式限制</span><br><span class="line"><span class="bullet">3. </span>请求转发和重定向</span><br><span class="line"><span class="bullet">4. </span>数据模型赋值</span><br><span class="line"><span class="bullet">5. </span>返回JSON数据</span><br><span class="line"><span class="bullet">6. </span>cookie访问</span><br></pre></td></tr></table></figure></p><h3 id="参数绑定的示例"><a href="#参数绑定的示例" class="headerlink" title="参数绑定的示例"></a>参数绑定的示例</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;seckillId&#125;/detail"</span>,mnethod=RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String detail(<span class="meta">@PathVariable(<span class="meta-string">"seckillId"</span>)</span><span class="built_in">Long</span> seckillId,Model model)&#123;</span><br><span class="line">    <span class="keyword">if</span>(seckillId == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/seckill/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Seckill seckill=SeckillService.getById|(seckillId);</span><br><span class="line">    <span class="keyword">if</span>(seckill == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/seckill/list"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(<span class="string">"seckill"</span>,seckill);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"detail"</span>;<span class="comment">//view</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回json数据的示例"><a href="#返回json数据的示例" class="headerlink" title="返回json数据的示例"></a>返回json数据的示例</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;seckillId&#125;/&#123;md5&#125;/execution"</span>,method=RequestMethod.POST,produces=&#123;<span class="string">"application/json;charset=UTF-8"</span>&#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> SeckillResult&lt;Exposer&gt; exposerSeckillURL(<span class="meta">@PathVariable</span>(<span class="string">"id"</span>)<span class="keyword">long</span> id)&#123;</span><br><span class="line"> SeckillResult&lt;Exposer&gt; result;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line">    Exposer exposer =...</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    logger.<span class="keyword">error</span>(e.getMessage(),e);</span><br><span class="line">   result=<span class="keyword">new</span> SeckillResult&lt;Exposer&gt;(<span class="keyword">false</span>,e.getMessage());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie访问的示例"><a href="#Cookie访问的示例" class="headerlink" title="Cookie访问的示例"></a>Cookie访问的示例</h3><p>@CookieValue(value=”killPhone”,required=false)long phone)</p><p>如果请求的RequestMapping里面没有包含killPhone的Cookie,SpringMVC框架就会报错,所以要设置成false.具体的判断要在程序里面判断.</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;seckillId&#125;/&#123;md5&#125;/execution"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> SeckillResult&lt;SeckillExecution&gt; execute(<span class="meta">@PathVariable</span>(<span class="string">"seckillId"</span>)<span class="keyword">long</span> seckillId,<span class="meta">@PathVariable</span>(<span class="string">"md5"</span>)String md5,<span class="meta">@CookieValue</span>(value=<span class="string">"killPhone"</span>,required=<span class="keyword">false</span>)<span class="keyword">long</span> phone)&#123;</span><br><span class="line">    <span class="keyword">if</span>(phone ==<span class="keyword">null</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">false</span>,<span class="string">"电话未注册"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SeckillExecution <span class="keyword">execution</span>=seckillService.executeSeckillByProcedure(seckillId,md5,phone);</span><br><span class="line">    SeckillResult&lt;SeckillExecution&gt; result=<span class="keyword">new</span> SeckillResult&lt;SeckillExecution&gt;(<span class="keyword">true</span>,<span class="keyword">execution</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-xml的配置"><a href="#web-xml的配置" class="headerlink" title="web.xml的配置"></a>web.xml的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置DispactherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>seckill-dispacther<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置springmvc需要加载的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>seckill-dispacther<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认匹配所有的请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-web-xml的配置"><a href="#spring-web-xml的配置" class="headerlink" title="spring-web.xml的配置"></a>spring-web.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/mvc</span><br><span class="line">http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--配置SpringMVC--&gt;</span><br><span class="line">    &lt;!--1.开启SpringMVC注解模式--&gt;</span><br><span class="line">    &lt;!--简化配置:</span><br><span class="line">        1. 自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerDdapter</span><br><span class="line">        2. 提供一系列:数据绑定,数字和日期.和Format @NumberFormat,@DataTimeFormat,xml,json默认读写支持</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line">    &lt;!--2.静态资源默认Servlet配置</span><br><span class="line">        1. 加入对静态资源的处理:js,gif,png</span><br><span class="line">        2. 允许使用&quot;/&quot;做整体映射</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">    &lt;!--3.配置jsp,显示ViewResolver--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;./jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--4.扫描web相关的bean--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;org.seckill.web&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="书写秒杀的Controller"><a href="#书写秒杀的Controller" class="headerlink" title="书写秒杀的Controller"></a>书写秒杀的Controller</h2><p>SeckillController<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url的格式:     url:/模块/资源/&#123;id&#125;/细分   /seckill/&#123;id&#125;/list</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/seckill&quot;)</span><br><span class="line">public class SeckillController &#123;</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SeckillService seckillService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span><br><span class="line">    public String getList(Model model) &#123;</span><br><span class="line">        List&lt;Seckill&gt; list = seckillService.getAllSeckill();</span><br><span class="line">        model.addAttribute(&quot;list&quot;, list);</span><br><span class="line">        //list.jsp + model = ModelAndView</span><br><span class="line">        return &quot;list&quot;;//WEB-INF/jsp/&quot;list&quot;.jsp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&#123;seckillId&#125;/detail&quot;, method = RequestMethod.GET)</span><br><span class="line">    public String getDetail(@PathVariable(&quot;seckillId&quot;) Long seckillId, Model model) &#123;</span><br><span class="line">        if (seckillId == null) &#123;</span><br><span class="line">            return &quot;redirect:/seckill/list&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        Seckill seckill = seckillService.getBySeckillId(seckillId);</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            return &quot;forward:/seckill/list&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(&quot;seckill&quot;, seckill);</span><br><span class="line">        return &quot;detail&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //ajax  json</span><br><span class="line">    @RequestMapping(value = &quot;/&#123;seckillId&#125;/exposer&quot;, method = RequestMethod.POST, produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public SeckillResult&lt;Exposer&gt; exposer(@PathVariable(&quot;seckillId&quot;) Long seckillId) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Exposer exposer = seckillService.exportSeckillUrl(seckillId);</span><br><span class="line">            return new SeckillResult&lt;Exposer&gt;(true, exposer);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            return new SeckillResult&lt;Exposer&gt;(false, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&#123;seckillId&#125;/&#123;md5&#125;/execution&quot;, method = RequestMethod.POST, produces = &#123;</span><br><span class="line">            &quot;application/json; charset=utf-8&quot;&#125;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public SeckillResult&lt;SeckillExecution&gt; execute(@PathVariable(&quot;seckillId&quot;) Long seckillId,</span><br><span class="line">                                                   @PathVariable(&quot;md5&quot;) String md5, @CookieValue(value = &quot;killPhone&quot;, required = false) Long phone) &#123;</span><br><span class="line">        // springmvc valid</span><br><span class="line">        if (phone == null) &#123;</span><br><span class="line">            return new SeckillResult&lt;&gt;(false, &quot;未注册&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 存储过程调用</span><br><span class="line">            SeckillExecution execution = seckillService.executeSeckill(seckillId, phone, md5);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125; catch (RepatKillException e) &#123;</span><br><span class="line">            SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.REPEAT_KILL);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125; catch (SeckillClosedException e) &#123;</span><br><span class="line">            SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.END);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR);</span><br><span class="line">            return new SeckillResult&lt;SeckillExecution&gt;(true, execution);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/time/now&quot;, method = RequestMethod.GET)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public SeckillResult&lt;Long&gt; time() &#123;</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        return new SeckillResult&lt;Long&gt;(true, now.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些插件的CDN"><a href="#一些插件的CDN" class="headerlink" title="一些插件的CDN"></a>一些插件的CDN</h2><p><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">CDN查询地址</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jquery-cookie</span><br><span class="line"></span><br><span class="line">https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.js</span><br><span class="line"></span><br><span class="line">jquery-countdown</span><br><span class="line"></span><br><span class="line">https://cdn.bootcss.com/jquery-countdown/2.0.2/jquery.countdown-ar.js</span><br></pre></td></tr></table></figure></p><p><strong>切记</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">必须使用这种方法书写</span><br><span class="line">&lt;script src=&quot;xxx&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">如果采用下面的写法,浏览器不会加载资源</span><br><span class="line">&lt;script src=&quot;xxx&quot; type=&quot;text/javascript&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> Bootstrap和JS在github地址有.我才开始用,需要了解一部分.感觉逻辑什么的还挺好用的.</p><p> DTO传输数据</p><p> 注解映射驱动</p>]]></content>
      
      <categories>
          
          <category> Seckill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Web </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秒杀Service层开发</title>
      <link href="/2018/01/02/%E7%A7%92%E6%9D%80service%E5%B1%82%E5%BC%80%E5%8F%91/"/>
      <url>/2018/01/02/%E7%A7%92%E6%9D%80service%E5%B1%82%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="思考DAO层做的事"><a href="#思考DAO层做的事" class="headerlink" title="思考DAO层做的事"></a>思考DAO层做的事</h2><p>创建数据库,编写接口,书写mapper.xml(SQL),</p><p>配置mybatis-config.xml,整合spring-dao.xml.</p><p>总的来说就是接口设计和SQL编写.</p><p>代码和SQL进行分离,方便Review.</p><p>DAO拼接等逻辑在SERVICE层完成.</p><p>DAO层也成为数据访问层,也就是对mysql等远程系统的操作.</p><h2 id="service层包分类"><a href="#service层包分类" class="headerlink" title="service层包分类"></a>service层包分类</h2><p>dto –数据传输层,关于web和service的数据传递.</p><p>entity –业务实体的存放.</p><p>exception –秒杀结束,秒杀存货不足.</p><p>enum –枚举类</p><h3 id="service层接口的设计"><a href="#service层接口的设计" class="headerlink" title="service层接口的设计"></a>service层接口的设计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 业务接口:站在&quot;使用者&quot;角度设计接口</span><br><span class="line"> * 三个方面:方法定义粒度,参数,返回类型(return 类型/异常)</span><br><span class="line"> */</span><br><span class="line">public interface SeckillService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 展示所有秒杀记录</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;Seckill&gt; getAllSeckill();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return 展示单个秒杀记录</span><br><span class="line">     */</span><br><span class="line">    Seckill getBySeckillId(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 行为接口</span><br><span class="line">     * 秒杀开启时输出秒杀接口地址,</span><br><span class="line">     * 否则输出系统时间和秒杀时间.</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return Exposer</span><br><span class="line">     */</span><br><span class="line">    Exposer exportSeckillUrl(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行秒杀操作,需要根据商品Id和用户名来执行操作,</span><br><span class="line">     * 同时对用户的url来源渠道做一次验证.即和之前秒杀开启前的MD5值作比较.</span><br><span class="line">     *</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @param md5</span><br><span class="line">     * @Return SeckillException</span><br><span class="line">     */</span><br><span class="line">    SeckillExecution executeSeckill(long seckillId, long userPhone, String md5)</span><br><span class="line">            throws SeckillException, SeckillClosedException, RepatKillException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据传输数据的封装-dto"><a href="#数据传输数据的封装-dto" class="headerlink" title="数据传输数据的封装(dto)"></a>数据传输数据的封装(dto)</h3><h4 id="Exposer-暴露秒杀信息的的封装类"><a href="#Exposer-暴露秒杀信息的的封装类" class="headerlink" title="Exposer-暴露秒杀信息的的封装类"></a>Exposer-暴露秒杀信息的的封装类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 暴露秒杀地址DTO</span><br><span class="line"> */</span><br><span class="line">public class Exposer &#123;</span><br><span class="line">    //是否开启秒杀</span><br><span class="line">    public boolean exposed;</span><br><span class="line"></span><br><span class="line">    //MD5加密</span><br><span class="line">    private String md5;</span><br><span class="line"></span><br><span class="line">    //商品ID</span><br><span class="line">    private long seckillId;</span><br><span class="line"></span><br><span class="line">    //系统当前时间(毫秒),方便用户浏览器控制服务器的时间.</span><br><span class="line">    private Date now;</span><br><span class="line"></span><br><span class="line">    //秒杀开始时间</span><br><span class="line">    private Date start;</span><br><span class="line"></span><br><span class="line">    //秒杀结束时间</span><br><span class="line">    private Date end;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 不同的构造方法方便对象的初始化.</span><br><span class="line">     * 秒杀成功用到的构造方法</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param md5</span><br><span class="line">     * @param seckillId</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed, String md5, long seckillId) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        this.md5 = md5;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 不符合条件,用到的构造方法</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param now</span><br><span class="line">     * @param start</span><br><span class="line">     * @param end</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed,long seckillId,Date now, Date start, Date end) &#123;</span><br><span class="line">        this.exposed=exposed;</span><br><span class="line">        this.seckillId=seckillId;</span><br><span class="line">        this.now = now;</span><br><span class="line">        this.start = start;</span><br><span class="line">        this.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 秒杀开始之前,需要对秒杀地址隐藏,加密.</span><br><span class="line">     * @param exposed</span><br><span class="line">     * @param seckillId</span><br><span class="line">     */</span><br><span class="line">    public Exposer(boolean exposed, long seckillId) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isExposed() &#123;</span><br><span class="line">        return exposed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setExposed(boolean exposed) &#123;</span><br><span class="line">        this.exposed = exposed;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMd5() &#123;</span><br><span class="line">        return md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setMd5(String md5) &#123;</span><br><span class="line">        this.md5 = md5;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getSeckillId() &#123;</span><br><span class="line">        return seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setSeckillId(long seckillId) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getNow() &#123;</span><br><span class="line">        return now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setNow(Date now) &#123;</span><br><span class="line">        this.now = now;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getStart() &#123;</span><br><span class="line">        return start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setStart(Date start) &#123;</span><br><span class="line">        this.start = start;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getEnd() &#123;</span><br><span class="line">        return end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Exposer setEnd(Date end) &#123;</span><br><span class="line">        this.end = end;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SeckillExecution-秒杀执行结果的封装类"><a href="#SeckillExecution-秒杀执行结果的封装类" class="headerlink" title="SeckillExecution-秒杀执行结果的封装类"></a>SeckillExecution-秒杀执行结果的封装类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 秒杀执行结果</span><br><span class="line"> */</span><br><span class="line">public class SeckillExecution &#123;</span><br><span class="line"></span><br><span class="line">    private long seckillId;</span><br><span class="line">    //秒杀执行结果状态</span><br><span class="line">    private int state;</span><br><span class="line">    //状态表示</span><br><span class="line">    private String stateInfo;</span><br><span class="line">    //秒杀成功对象</span><br><span class="line">    private SuccessKilled successKilled;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum, SuccessKilled successKilled) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getSeckillId() &#123;</span><br><span class="line">        return seckillId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setSeckillId(long seckillId) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setState(int state) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStateInfo() &#123;</span><br><span class="line">        return stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setStateInfo(String stateInfo) &#123;</span><br><span class="line">        this.stateInfo = stateInfo;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SuccessKilled getSuccessKilled() &#123;</span><br><span class="line">        return successKilled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution setSuccessKilled(SuccessKilled successKilled) &#123;</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="秒杀接口的实现–Impl"><a href="#秒杀接口的实现–Impl" class="headerlink" title="秒杀接口的实现–Impl"></a>秒杀接口的实现–Impl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class SeckillServiceImpl implements SeckillService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用slf4j的日志</span><br><span class="line">     */</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SuccessKilledDao successKilledDao;</span><br><span class="line">    /**</span><br><span class="line">     * 与MD5结合的混淆的字符串.</span><br><span class="line">     */</span><br><span class="line">    private final String hx = &quot;aaskg8has$%^&amp;@i1564I^$&amp;*@$!&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Seckill&gt; getAllSeckill() &#123;</span><br><span class="line">        return secKillDao.queryAll(0, 4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Seckill getBySeckillId(long seckillId) &#123;</span><br><span class="line">        return secKillDao.queryById(seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断秒杀时间是否开始了</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Exposer exportSeckillUrl(long seckillId) &#123;</span><br><span class="line">        Seckill seckill = secKillDao.queryById(seckillId);</span><br><span class="line"></span><br><span class="line">        //系统当前时间</span><br><span class="line">        Date nowTime = new Date();</span><br><span class="line">        Date startTime = seckill.getStartTime();</span><br><span class="line">        Date endTime = seckill.getEndTime();</span><br><span class="line"></span><br><span class="line">        //1.如果seckill为null,不暴露地址.调用Exposer里面的初始化方法就可以了.</span><br><span class="line">        if (seckill == null) &#123;</span><br><span class="line">            return new Exposer(false, seckillId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //2.如果秒杀时间不符合,也不能进行秒杀.</span><br><span class="line">        if (nowTime.getTime() &lt; startTime.getTime() || nowTime.getTime() &gt; endTime.getTime()) &#123;</span><br><span class="line">            return new Exposer(false, seckillId, nowTime, startTime, endTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //3.md5转换特定字符串的过程,是不可逆的.</span><br><span class="line">        String md5 = getMd5(seckillId);</span><br><span class="line">        return new Exposer(true, md5, seckillId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成MD5字符串</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getMd5(long seckillId) &#123;</span><br><span class="line">        String base = seckillId + &quot;/&quot; + hx;</span><br><span class="line">        String md5 = DigestUtils.md5DigestAsHex(base.getBytes());</span><br><span class="line">        return md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行秒杀的实现,主要校验MD5来实现秒杀</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @param md5</span><br><span class="line">     * @return</span><br><span class="line">     * @throws SeckillException</span><br><span class="line">     * @throws SeckillClosedException</span><br><span class="line">     * @throws RepatKillException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5) throws SeckillException, SeckillClosedException, RepatKillException &#123;</span><br><span class="line"></span><br><span class="line">        //1.md5匹配不上,系统出现异常</span><br><span class="line">        if (md5 == null || !md5.equals(getMd5(seckillId))) &#123;</span><br><span class="line">            throw new SeckillException(&quot;Seckill data rewite! 你可能使用了重复秒杀的插件 !=QAQ=!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 2. md5匹配成功,</span><br><span class="line">         * 执行秒杀逻辑:</span><br><span class="line">         *  --减库存</span><br><span class="line">         *  --写明细</span><br><span class="line">         */</span><br><span class="line">        Date killTime = new Date();</span><br><span class="line">        try &#123;</span><br><span class="line">            //减库存</span><br><span class="line">            int updateCount = secKillDao.reduceNumber(seckillId, killTime);</span><br><span class="line">            //更新数&lt;0,说明减库存失败,没有更新到记录</span><br><span class="line">            if (updateCount &lt; 0) &#123;</span><br><span class="line">                //秒杀过期</span><br><span class="line">                throw new SeckillClosedException(&quot;Seckill is closed!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //写明细</span><br><span class="line">            int insertState = successKilledDao.insertSuccessKilled(seckillId, userPhone);</span><br><span class="line">            //唯一的验证标准就是验证 秒杀商品的ID和用户手机号.</span><br><span class="line">            //之前秒杀成功,state=1.再次秒杀同一seckillId的商品,他就会秒杀不成功了,因为我们设置的是insert ignore,插入就会忽略,insertState返回的就是0.</span><br><span class="line">            if (insertState &lt;= 0) &#123;</span><br><span class="line">                //重复秒杀</span><br><span class="line">                throw new RepatKillException(&quot;Seckill repeted!&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //秒杀成功</span><br><span class="line">                SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(seckillId, userPhone);</span><br><span class="line">                return new SeckillExecution(seckillId,SeckillStatEnum.SUCCESS, successKilled);</span><br><span class="line">                //TODO</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //这些异常的抛出有次序.我们要友好一些,要知道抛出的是哪个部分的异常.</span><br><span class="line">        //重复秒杀的异常</span><br><span class="line">        catch (RepatKillException e1) &#123;</span><br><span class="line">            throw e1;</span><br><span class="line">        &#125;</span><br><span class="line">        //秒杀时间过期的异常</span><br><span class="line">        catch (SeckillClosedException e2) &#123;</span><br><span class="line">            throw e2;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            //所有编译期异常都要转换为运行期异常</span><br><span class="line">            throw new SeckillException(&quot;seckill inner error:&quot; + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据字典的形成"><a href="#数据字典的形成" class="headerlink" title="数据字典的形成"></a>数据字典的形成</h4><p>根据条件判断需要抛出的stateInfo提示信息,直接在里面写,可用性很差,所以我们采用枚举类的方式来规范statInfo的分配.</p><h4 id="枚举类SeckillStatEnum"><a href="#枚举类SeckillStatEnum" class="headerlink" title="枚举类SeckillStatEnum"></a>枚举类SeckillStatEnum</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用枚举类表述常量数据字典</span><br><span class="line"> */</span><br><span class="line">public enum SeckillStatEnum &#123;</span><br><span class="line">    SUCCESS(1,&quot;秒杀成功!&quot;),</span><br><span class="line">    END(0,&quot;秒杀结束!&quot;),</span><br><span class="line">    REPEAT_KILL(-1,&quot;重复秒杀!&quot;),</span><br><span class="line">    INNER_ERROR(-2,&quot;系统异常!&quot;),</span><br><span class="line">    DATA_REWRITE(-3,&quot;数据篡改!&quot;);</span><br><span class="line"></span><br><span class="line">    private int state;</span><br><span class="line">    private String stateInfo;</span><br><span class="line"></span><br><span class="line">    SeckillStatEnum(int state, String stateInfo) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        this.stateInfo = stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStateInfo() &#123;</span><br><span class="line">        return stateInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //此静态方法迭代所有的类型</span><br><span class="line">    public static SeckillStatEnum stateOf(int index) &#123;</span><br><span class="line">        for (SeckillStatEnum state : values()) &#123;</span><br><span class="line">            //values()用来拿到所有类型</span><br><span class="line">            if (state.getState() == index) &#123;</span><br><span class="line">                return state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于以前的构造方法改造成含有枚举的表示方法.</p><p>秒杀成功用到的构造方法:<br>改造前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution(long seckillId, int state, String stateInfo, SuccessKilled successKilled) &#123;</span><br><span class="line">     this.seckillId = seckillId;</span><br><span class="line">     this.state = state;</span><br><span class="line">     this.stateInfo = stateInfo;</span><br><span class="line">     this.successKilled = successKilled;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>改造后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public SeckillExecution(long seckillId, SeckillStatEnum statEnum) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillExecution(long seckillId, SeckillStatEnum statEnum, SuccessKilled successKilled) &#123;</span><br><span class="line">        this.seckillId = seckillId;</span><br><span class="line">        this.state = statEnum.getState();</span><br><span class="line">        this.stateInfo = statEnum.getStateInfo();</span><br><span class="line">        this.successKilled = successKilled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="异常的处理–Exception"><a href="#异常的处理–Exception" class="headerlink" title="异常的处理–Exception"></a>异常的处理–Exception</h4><h5 id="秒杀异常"><a href="#秒杀异常" class="headerlink" title="秒杀异常"></a>秒杀异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后两个异常都属于秒杀异常,所以继承此类即可.</span><br><span class="line"> */</span><br><span class="line">public class SeckillException extends RuntimeException &#123;</span><br><span class="line">    public SeckillException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="重复秒杀异常"><a href="#重复秒杀异常" class="headerlink" title="重复秒杀异常"></a>重复秒杀异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 重复秒杀异常(运行期异常)</span><br><span class="line"> * java的异常一般分为运行期异常和编译期异常</span><br><span class="line"> * spring声明式事务只接收运行期异常事务回滚策略.抛出非声明式异常,spring不会对其进行事务回滚.</span><br><span class="line"> */</span><br><span class="line">public class RepatKillException extends SeckillException&#123;</span><br><span class="line">    public RepatKillException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line">    public RepatKillException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="秒杀关闭异常"><a href="#秒杀关闭异常" class="headerlink" title="秒杀关闭异常"></a>秒杀关闭异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package org.seckill.exception;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: ligang</span><br><span class="line"> * date: 2018/2/7</span><br><span class="line"> * time: 15:39</span><br><span class="line"> * 秒杀时间关闭异常</span><br><span class="line"> */</span><br><span class="line">public class SeckillClosedException extends SeckillException &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 运行期异常的继承,但是他们都属于秒杀异常</span><br><span class="line">     * @param message</span><br><span class="line">     */</span><br><span class="line">    public SeckillClosedException(String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SeckillClosedException(String message, Throwable cause) &#123;</span><br><span class="line">        super(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Spring托管SERVICE依赖理论"><a href="#使用Spring托管SERVICE依赖理论" class="headerlink" title="使用Spring托管SERVICE依赖理论"></a>使用Spring托管SERVICE依赖理论</h2><h3 id="SpringIOC的概念"><a href="#SpringIOC的概念" class="headerlink" title="SpringIOC的概念"></a>SpringIOC的概念</h3><p>IOC-依赖注入</p><p>SpringIOC的过程会创建一个对象工厂,还会进行依赖管理,最终给一个一致的访问接口.</p><p>SuccessKillSERVICE完整的实例如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-63c952d8ab503399.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>使用IOC的好处:</strong></p><ol><li>对象创建统一托管</li><li>规范的声明周期管理</li><li>灵活的依赖注入</li><li>一致的获取对象(默认是单例)</li></ol><p>SpringIOC的注入方式和场景</p><p>三种方式实现如下</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7337c3d038b7ae0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们的IOC使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XML配置</span><br><span class="line">package-scan(包扫描)</span><br><span class="line">Annotation注解</span><br></pre></td></tr></table></figure><h3 id="springIOC的注解用法"><a href="#springIOC的注解用法" class="headerlink" title="springIOC的注解用法"></a>springIOC的注解用法</h3><ol><li>先进行包扫描</li></ol><p>在spring-service.xml里面输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--扫描Service包下所有使用注解的类型--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;org.seckill.service&quot;/&gt;</span><br></pre></td></tr></table></figure></p><ol><li>注解部分</li></ol><ul><li>@Component  如果你不知道该写@Service/@Controller的时候,@Component就是一个比较笼统的Spring容器在一个组件实例.</li><li>@Service</li><li>@Controller</li><li>dao里面的所有内容都会通过mapper.xml文件初始化放进Spring容器中,然后spring容器中回去Dao的实例,注入到相关的ervice下面</li><li>@Autowired(自动注入,就不用自己new实现类了) / @Resource / @Inject 注入方式</li></ul><h3 id="spring的声明式事务"><a href="#spring的声明式事务" class="headerlink" title="spring的声明式事务"></a>spring的声明式事务</h3><p>声明式事务就是不关心事务的开启或者提交.而是交给第三方框架来实现的.解脱事务代码.</p><p>1.执行事务的步骤<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">修改SQL<span class="number">-1</span>(更新/增加/删除)</span><br><span class="line">修改SQL<span class="number">-2</span></span><br><span class="line">修改SQL<span class="number">-3</span></span><br><span class="line">提交或者回滚</span><br></pre></td></tr></table></figure></p><p>2.声明式事务的使用方式<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ProxyFactoryBean</span> + <span class="selector-tag">XML</span>  <span class="selector-tag">----</span>  早期的使用方式(<span class="number">2.0</span>)</span><br><span class="line"><span class="selector-tag">tx</span><span class="selector-pseudo">:advice+aop</span>命名空间    <span class="selector-tag">----</span>  一次配置永久生效(使用最多的方式,不太关心事务是如何操作的)</span><br><span class="line">注解@<span class="selector-tag">Transaction</span>        <span class="selector-tag">-----</span>  注解控制(推荐使用,对我们有利)</span><br></pre></td></tr></table></figure></p><p>3.事务方法嵌套</p><p>声明式事务独有的概念<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">传播行为 --- spring默认是`propagation_required`,</span><br><span class="line">意思就是说当有一个新的事务加入中来,会直接加入到已经存在的事务,</span><br><span class="line">如果有事务存在就会直接加入到原有的事务当中,如果没有就会创建一个新的事务</span><br></pre></td></tr></table></figure></p><p>4.什么时候回滚事务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 抛出运行期异常(RuntimeException)可以执行回滚,非运行期异常可能不会全部回滚.</span><br><span class="line">2. 小心不当的try-catch,要是你使用try-catch包括一个有异常的程序,spring就会感知不到它会出现异常.</span><br></pre></td></tr></table></figure></p><ul><li><p>声明式事务的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--2.配置事务管理器,我们使用的是jdbc的事务管理器--&gt;</span><br><span class="line">   &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">       &lt;!--注入数据库连接池--&gt;</span><br><span class="line">       &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--3.配置基于声明式注解的声明式事务</span><br><span class="line">       当你输入tx:annotation-driven的时候,它会自动的把相关的schema加上</span><br><span class="line">       默认使用注解来管理事务行为</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>@Transaction的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用注解控制事务方法的优点:</span><br><span class="line">     1. 开发团队达成一致的约定,明确标注事务方法的编程风格</span><br><span class="line">     2. 保证事务方法的执行时间尽可能短,不要穿插其他的网络操作,比如:RPC/HTTP请求.或者剥离到事务方法外部:就是把它们写到方法的上一层.</span><br><span class="line">     3. 不是所有的方法都使用事务,如:只有一条修改操作,只读操作不需要事务控制.(mysql的行级锁有涉及到)</span><br></pre></td></tr></table></figure></li></ul><h3 id="service测试"><a href="#service测试" class="headerlink" title="service测试"></a>service测试</h3><p><a href="https://logback.qos.ch/manual/configuration.html" target="_blank" rel="noopener">slf4j接口的实现logback官网配置文件</a></p><p>日志logback.xml的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!--打印到控制台,默认级别是debug,时间,线程和日志的格式--&gt;</span><br><span class="line">&lt;configuration debug=&quot;true&quot;&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!-- encoders are  by default assigned the type</span><br><span class="line">             ch.qos.logback.classic.encoder.PatternLayoutEncoder --&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;debug&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类:"></a>测试类:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;,&quot;classpath:spring/spring-service.xml&quot;&#125;)</span><br><span class="line">public class SeckillServiceTest &#123;</span><br><span class="line">    //使用日志</span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SeckillService seckillService;</span><br><span class="line">    @Test</span><br><span class="line">    public void getAllSeckill() throws Exception &#123;</span><br><span class="line">        List&lt;Seckill&gt; list = seckillService.getAllSeckill();</span><br><span class="line">        logger.info(&quot;list =&#123;&#125;,&quot;,list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getBySeckillId() throws Exception &#123;</span><br><span class="line">        Seckill seckill = seckillService.getBySeckillId(1000L);</span><br><span class="line">        logger.info(&quot;list =&#123;&#125;,&quot;,seckill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void exportSeckillUrl() throws Exception &#123;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(1000L);</span><br><span class="line">        logger.info(&quot;exposer =&#123;&#125;,&quot;,exposer);</span><br><span class="line">        /**</span><br><span class="line">         *  exposer =Exposer&#123;exposed=true, md5=&apos;d592364bb958482949d97e04131f4b2e&apos;, seckillId=1000, now=null, start=null, end=null&#125;,</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void executeSeckill() throws Exception &#123;</span><br><span class="line">        long id =1000L;</span><br><span class="line">        long phone= 1245564659;</span><br><span class="line">        String md5=&quot;d592364bb958482949d97e04131f4b2e&quot;;</span><br><span class="line">         try &#123;</span><br><span class="line">             SeckillExecution seckillExecution = seckillService.executeSeckill(id, phone, md5);</span><br><span class="line">             logger.info(&quot;seckillExecution:&quot; + seckillExecution);</span><br><span class="line">         &#125;</span><br><span class="line">         catch(RepatKillException e)&#123;</span><br><span class="line">             logger.error(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">         catch (SeckillClosedException e)&#123;</span><br><span class="line">             logger.error(e.getMessage());</span><br><span class="line">         &#125;</span><br><span class="line">        /**</span><br><span class="line">         * 再一次执行秒杀会出现运行期异常.</span><br><span class="line">         * org.seckill.exception.RepatKillException: Seckill repeted!</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testSeckillLogic() throws Exception&#123;</span><br><span class="line">        long id =1000L;</span><br><span class="line">        Exposer exposer = seckillService.exportSeckillUrl(id);</span><br><span class="line">        logger.info(&quot;exposer =&#123;&#125;,&quot;,exposer);</span><br><span class="line">        if(exposer.isExposed())&#123;</span><br><span class="line">            //开始执行秒杀</span><br><span class="line">            long phone= 1245564359;</span><br><span class="line">            String md5 = exposer.getMd5();</span><br><span class="line">            try &#123;</span><br><span class="line">                SeckillExecution seckillExecution = seckillService.executeSeckill(id, phone, md5);</span><br><span class="line">                logger.info(&quot;seckillExecution:&quot; + seckillExecution);</span><br><span class="line">            &#125;</span><br><span class="line">            catch(RepatKillException e)&#123;</span><br><span class="line">                logger.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SeckillClosedException e)&#123;</span><br><span class="line">                logger.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            logger.warn(&quot;exposer=&#123;&#125;&quot;,exposer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//id=1001 的测试 seckillExecution:SeckillExecution&#123;seckillId=1001, state=1, stateInfo=&apos;秒杀成功!&apos;, successKilled=SuccessKilled&#123;seckillId=1001, userPhone=1245564359, state=0, createTime=Tue Feb 20 13:19:46 CST 2018&#125;&#125;</span><br><span class="line">//id=1000 的测试 21:22:24.838 [main] WARN  o.secKill.service.SeckillServiceTest - exposer=Exposer&#123;exposed=false, md5=&apos;null&apos;, seckillId=1000, now=Tue Feb 20 21:22:24 CST 2018, start=Tue Feb 20 12:41:15 CST 2018, end=Tue Feb 20 12:41:15 CST 2018&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Seckill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> SSM </tag>
            
            <tag> Service </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown语法</title>
      <link href="/2018/01/01/Markdown/"/>
      <url>/2018/01/01/Markdown/</url>
      <content type="html"><![CDATA[<h2 id="表格模板"><a href="#表格模板" class="headerlink" title="表格模板"></a>表格模板</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| Tables |</span> Are <span class="params">| Cool |</span></span><br><span class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></span><br><span class="line"><span class="params">| col 3 is |</span> right-aligned <span class="params">| $1600 |</span></span><br><span class="line"><span class="params">| col 2 is |</span> centered <span class="params">| $12 |</span></span><br><span class="line"><span class="params">| zebra stripes |</span> are neat <span class="params">| $1 |</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Seckill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秒杀概述</title>
      <link href="/2018/01/01/%E7%A7%92%E6%9D%80%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/01/01/%E7%A7%92%E6%9D%80%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h2 id="涉及的内容"><a href="#涉及的内容" class="headerlink" title="涉及的内容:"></a>涉及的内容:</h2><p>1.Mysql</p><p>表设计<br>SQL技巧<br>事务和行级锁</p><p>2.Mybatis</p><p>dao层的设计和开发</p><p>mybatis的合理使用</p><p>mybatis与Spring整合</p><p>3.Spring</p><p>Spring IOC整合Service</p><p>声明式事务运用</p><p>4.SpringMVC</p><p>Restful接口设计和使用</p><p>框架运作流程</p><p>Controller开发技巧</p><p>5.前端</p><p>交互设计</p><p>Bootstrap</p><p>JQuery,Ajax</p><p>6.高并发</p><p>优化,及优化思路.</p><h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><p>mvn命令创建项目<br><a href="http://blog.csdn.net/smilecall/article/details/54345702" target="_blank" rel="noopener">创建项目更加详细的链接</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:<span class="keyword">generate</span>  -DarchetypeCatalog=internal -DgroupId=org.seckill -DartifactId=secKill -DarchetypeArtifactId=maven-archetype-webapp</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">值得注意的是,webapp下面的web.xml过时了不能使用,</span><br><span class="line"></span><br><span class="line">我们可以拿tomcat8里面的webapp/examples下面的web.xml的表头来操作:</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line">&lt;?xml <span class="keyword">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-<span class="keyword">app</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation="http:<span class="comment">//xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="line">                      http:<span class="comment">//xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line">         <span class="keyword">version</span>=<span class="string">"3.1"</span></span><br><span class="line">         metadata-complete=<span class="string">"true"</span>&gt;</span><br><span class="line">&lt;/web-<span class="keyword">app</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="pom-xml的配置"><a href="#pom-xml的配置" class="headerlink" title="pom.xml的配置"></a>pom.xml的配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.junit3使用的是编程式的测试,junit4使用的是声明式(注解)的测试</span><br><span class="line">2.java中常用的日志:slf4j,log4j,logback,common-logging</span><br><span class="line">       sfl4j:是规范/接口</span><br><span class="line">       </span><br><span class="line">       日志实现:log4j,logback,common-logging</span><br><span class="line">       使用:slf4j + logback</span><br><span class="line">3.数据库的相关组件</span><br><span class="line">4.mybatis的相关组件</span><br><span class="line">5.spring相关组件</span><br></pre></td></tr></table></figure><p>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;org.seckill&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;secKill&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;secKill Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!--0.使用junit4,采用声明注解方式测试--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--1.日志选用slf4j和logback--&gt;</span><br><span class="line">    &lt;!--日志使用slf4j--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--实现了logback核心的功能--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--实现slf4j接口并整合--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--2.数据库相关的依赖--&gt;</span><br><span class="line">    &lt;!--数据库驱动--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">      &lt;version&gt;5.1.35&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--数据库连接池c3p0--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--3.dao框架:mybatis依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mybatis自身实现的spring整合依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--4.Service Web相关依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.Spring依赖--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.1.spring核心依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.2 spring的IOC--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.3 spring的包扫描.IOC拓展用到的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.4 spring Dao层的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.5 spring Transaction的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.6 spring Web的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.6 spring Test的相关依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;finalName&gt;secKill&lt;/finalName&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h2 id="秒杀业务的分析"><a href="#秒杀业务的分析" class="headerlink" title="秒杀业务的分析"></a>秒杀业务的分析</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5d7a0f57c7897ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可知,秒杀业务的核心是对库存的处理.</p><p>用户针对库存业务分析:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-5befd8c4cfdc0171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>什么是购买行为?</p><p>记录秒杀成功信息</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e4c7fac05c5fb225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果没有事务存在,可能会出现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 减库存没有购买明细,</span><br><span class="line"></span><br><span class="line">2. 记录了明细没有减库存,</span><br><span class="line"></span><br><span class="line">3. 超卖/少卖</span><br></pre></td></tr></table></figure></p><p>故障责任…</p><p>数据落地:</p><p>mysql  VS nosql</p><p>nosql对事务的支持不尽如意,但是对高性能,高可用支持非常棒.</p><p>事务机制仍然是目前最可靠的落地方案.mysql内置的事务机制很可靠.</p><h2 id="5-秒杀业务的难点"><a href="#5-秒杀业务的难点" class="headerlink" title="5.秒杀业务的难点"></a>5.秒杀业务的难点</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-3419dc842b5f4b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>难点在与竞争.</p><p><strong>反映在mysql中是事务和行级锁.</strong></p><p>我们做的事务流程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Start transaction </span><br><span class="line"></span><br><span class="line">Update 库存数量(竞争发生在这一块)</span><br><span class="line"></span><br><span class="line">Insert购买明细</span><br><span class="line"></span><br><span class="line">Commit</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/7505161-42ef80fb34c43437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可见当所有人秒杀一件商品时,执行同一个SQL语句,由于采用的是行级锁,所以每次只能执行一条SQL语句.</p><p>现在看来,秒杀的难点就是如何<strong>高效的</strong>处理竞争了.</p><h2 id="秒杀功能"><a href="#秒杀功能" class="headerlink" title="秒杀功能"></a>秒杀功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 秒杀接口暴露</span><br><span class="line">2. 执行秒杀</span><br><span class="line">3. 相关查询</span><br></pre></td></tr></table></figure><p>代码开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. DAO设计编码</span><br><span class="line">   包括数据库的表设计,DAO的接口,mybatis如何去实现DAO.</span><br><span class="line">2.Service设计编码</span><br><span class="line">    Spring管理Service,声明式事务去标注方法是事务操作,简化事务控制</span><br><span class="line">3.Web设计编码</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Seckill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库的基本操作</title>
      <link href="/2018/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/01/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="RDBMS术语"><a href="#RDBMS术语" class="headerlink" title="RDBMS术语"></a>RDBMS术语</h2><ul><li>数据库: 数据库是一些关联表的集合。</li><li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格.</li><li>列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li><li>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性.</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引.</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><h2 id="mysql的数据类型"><a href="#mysql的数据类型" class="headerlink" title="mysql的数据类型"></a>mysql的数据类型</h2><p>目前我使用过的数据类型有 <code>int varchar timestamp bigint smallint dater time yeartinyint double</code></p><p>下面是标准数据库的类型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围(有符号)</th><th style="text-align:center">范围(无符号)</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1字节</td><td style="text-align:center">(-128，127)</td><td style="text-align:center">(0，255)</td><td style="text-align:center">小整数值</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2 字节</td><td style="text-align:center">(-32 768，32 767)</td><td style="text-align:center">(0，65 535)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3 字节</td><td style="text-align:center">(-8 388 608，8 388 607)</td><td style="text-align:center">(0，16 777 215)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">INT或INTEGER</td><td style="text-align:center">4 字节</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:center">(0，4 294 967 295)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">8 字节</td><td style="text-align:center">(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)</td><td style="text-align:center">(0，18 446 744 073 709 551 615)</td><td style="text-align:center">极大整数值</td></tr><tr><td style="text-align:center">FLOAT</td><td style="text-align:center">4 字节</td><td style="text-align:center">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td style="text-align:center">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td style="text-align:center">单精度浮点数值</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">8 字节</td><td style="text-align:center">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:center">双精度浮点数值</td></tr><tr><td style="text-align:center">DECIMAL</td><td style="text-align:center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">小数值</td></tr></tbody></table><h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围</th><th style="text-align:center">格式</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">3</td><td style="text-align:center">1000-01-01/9999-12-31</td><td style="text-align:center">YYYY-MM-DD</td><td style="text-align:center">日期值</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3</td><td style="text-align:center">‘-838:59:59’/‘838:59:59’</td><td style="text-align:center">HH:MM:SS</td><td style="text-align:center">时间值或持续时间</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1</td><td style="text-align:center">1901/2155</td><td style="text-align:center">YYYY</td><td style="text-align:center">年份值</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8</td><td style="text-align:center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:center">YYYY-MM-DD HH:MM:SS</td><td style="text-align:center">混合日期和时间值</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4</td><td style="text-align:center">1970-01-01 00:00:00/2038,结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:center">YYYYMMDD HHMMSS</td><td style="text-align:center">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">CHAR</td><td style="text-align:center">0-255字节</td><td>定长字符串</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">0-65535 字节</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">0-255字节</td><td style="text-align:center">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">0-255字节</td><td style="text-align:center">短文本字符串</td></tr><tr><td style="text-align:center">BLOB    0-65</td><td style="text-align:center">535字节</td><td style="text-align:center">二进制形式的长文本数据</td></tr><tr><td style="text-align:center">TEXT    0-65</td><td style="text-align:center">535字节</td><td style="text-align:center">长文本数据</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">0-16777215字节</td><td style="text-align:center">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">0-16777215字节</td><td style="text-align:center">中等长度文本数据</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">0-4294967295字节</td><td style="text-align:center">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">0-4294967295字节</td><td style="text-align:center">极大文本数据</td></tr></tbody></table><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CHAR</span>和VARCHAR类型类似，但它们保存和检索的方式不同。</span><br><span class="line"></span><br><span class="line">它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</span><br><span class="line"></span><br><span class="line"><span class="keyword">BINARY</span>和VARBINARY类类似于<span class="built_in">CHAR</span>和VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。</span><br><span class="line">也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</span><br><span class="line"></span><br><span class="line">BLOB是一个二进制大对象，可以容纳可变数量的数据。</span><br><span class="line">有<span class="number">4</span>种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。</span><br><span class="line"></span><br><span class="line">有<span class="number">4</span>种<span class="keyword">TEXT</span>类型：TINYTEXT、<span class="keyword">TEXT</span>、MEDIUMTEXT和LONGTEXT。这些对应<span class="number">4</span>种BLOB类型，有相同的最大长度和存储需求。</span><br></pre></td></tr></table></figure><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><code>create database student;</code></p><h3 id="使用此数据库"><a href="#使用此数据库" class="headerlink" title="使用此数据库"></a>使用此数据库</h3><p><code>use student;</code></p><h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_inf(</span><br><span class="line">  <span class="string">`student_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'学生ID'</span>,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"学生姓名"</span>,</span><br><span class="line">  <span class="string">`student_age`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"学生年龄"</span>,</span><br><span class="line">  <span class="string">`student_birthday`</span> <span class="built_in">DATE</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"出生日期"</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">"创建时间"</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(student_id),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time)</span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> auto_increment = <span class="number">1000</span> <span class="keyword">DEFAULT</span> <span class="keyword">charset</span> = utf8 <span class="keyword">comment</span> =<span class="string">'学生信息表'</span>;</span><br></pre></td></tr></table></figure><p>我们可以查看表的结构:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0f784ae3394e7f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><p><code>drop table table_name;</code></p><h2 id="查看表的字段"><a href="#查看表的字段" class="headerlink" title="查看表的字段"></a>查看表的字段</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-47413178e8440d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p><code>show index from stundet_inf;</code><br><code>show keys from student_inf;</code></p><p>这两种方式都可以,查出来是2条索引.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-4b866b777cdfa319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ad90fa5aa685ea53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p>创建索引时,可以规定索引能否包含重复值,如果不包含,则索引应该创建为<code>Primary key</code>或者<code>unique</code>类型的索引.</p><p>对于单列惟一性索引，这保证单列不包含重复的值。</p><p>对于多列惟一性索引，保证多个值的组合不重复。</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>实际上就是,在表中哪列上添加索引</p><p><code>alter table student_inf add index idx_student_age(student_age);</code></p><p>此时我们可以查看一下索引有没有增加:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-49a886475fa1296d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>我们其实并不需要<code>idx_stundet_age</code>这个索引.索引多了会拖慢查询速度.影响CPU的处理性能.</p><p>所以删除:<code>drop index idx_student_age on student_inf</code></p><p>此时再查询,就会发现还剩2个索引.</p><p>或者<code>alter table student_inf drop index idx_student_age</code>.这样也可以.</p><p>删除主键的操作不长使用,<code>alter table student_inf drop primary key</code></p><p>因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。</p><p>如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。</p><p>如果从表中删除了某列，则索引会受到影响。</p><p>对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。</p><p>如果删除组成索引的所有列，则整个索引将被删除。</p><h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-80bf0859040c39a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们根据表的结构来进行insert 操作.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_inf(student_id,student_name,student_age,student_birthday,create_time) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'小明'</span>,<span class="number">12</span>,<span class="string">'1995-05-02'</span>,<span class="string">'2018-03-03 10:56:00'</span>);</span><br></pre></td></tr></table></figure><h2 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h2><p>我们不小心犯错误了,把月份写成25月了.</p><p>所以采用下面的语句进行更新.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student_inf <span class="keyword">set</span> student_birthday = <span class="string">'1995-02-02'</span> <span class="keyword">where</span> student_id =<span class="number">1000</span> ;</span><br></pre></td></tr></table></figure><p>此时再看一下查询语句:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0a01927525057066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>值得注意的是我们在生产环境中,不要使用<code>select *</code>来操作,这是查询表中所有的数据,会造成慢查询的问题.</p><h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h2><p><code>delete from student_inf where student_id = 1000;</code></p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p><img src="http://upload-images.jianshu.io/upload_images/7505161-cc5601f170abd94a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-98ca9aaae6d26869.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>##查看查询计划</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0efdf50cad3b718e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>我们可以看到查询用到了<code>idx_create_time</code>这个索引.</p><h2 id="Union操作符"><a href="#Union操作符" class="headerlink" title="Union操作符"></a>Union操作符</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。</p><p>多个 SELECT 语句会删除重复的数据。</p><p>我们先来创建两个表</p><h3 id="website表"><a href="#website表" class="headerlink" title="website表"></a>website表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> website(</span><br><span class="line">  <span class="string">`website_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'站点ID'</span>,</span><br><span class="line">  <span class="string">`website_name`</span> <span class="built_in">varchar</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`website_url`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点地址'</span>,</span><br><span class="line">  <span class="string">`website_alexa`</span> <span class="built_in">smallint</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'点击度排名'</span>,</span><br><span class="line">  <span class="string">`website_country`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点服务维护所在国家'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(<span class="string">`website_id`</span>),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time) <span class="keyword">comment</span> <span class="string">'创建间索引'</span></span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> =utf8;</span><br></pre></td></tr></table></figure><h3 id="apps表"><a href="#apps表" class="headerlink" title="apps表"></a>apps表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> apps(</span><br><span class="line">  <span class="string">`apps_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'站点ID'</span>,</span><br><span class="line">  <span class="string">`apps_name`</span> <span class="built_in">varchar</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`apps_url`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点地址'</span>,</span><br><span class="line">  <span class="string">`apps_country`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'站点服务维护所在国家'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(<span class="string">`apps_id`</span>),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time) <span class="keyword">comment</span> <span class="string">'创建间索引'</span></span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> =utf8;</span><br></pre></td></tr></table></figure><p>插入数据</p><p>1.插入website的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> website(website_id,website_name,website_url,website_alexa,website_country,create_time) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Google'</span>,<span class="string">'https://www.google.cm/'</span>,<span class="number">1</span>,<span class="string">'USA'</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> website(website_id,website_name,website_url,website_alexa,website_country,create_time) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'淘宝'</span>,<span class="string">'https://www.taobao.cm/'</span>,<span class="number">13</span>,<span class="string">'CN'</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">再编几个吧</span><br></pre></td></tr></table></figure></p><p>2.插入apps表的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> apps(apps_id,apps_name,apps_url,apps_country,create_time) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="string">'QQ APP'</span>,<span class="string">'http://im.qq.com'</span>,<span class="string">'CN'</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>3.使用<code>union</code>或者’union all’关键字来进行两个表之间的查询数据.</p><p>4.开始查询</p><p>union关键字的使用:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a109f8e7af2e704c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>union all 关键字的使用:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-d3a7611b04f1e5fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="排序的使用-order-by"><a href="#排序的使用-order-by" class="headerlink" title="排序的使用(order by)"></a>排序的使用(order by)</h2><p>下面的例子都是按照<code>create_time</code>来进行排序查询的.</p><h3 id="倒序查询"><a href="#倒序查询" class="headerlink" title="倒序查询"></a>倒序查询</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-a776b9e4163ce97e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="正序查询"><a href="#正序查询" class="headerlink" title="正序查询"></a>正序查询</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1238b4286159939a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="Mysql的分组-group-by-查询"><a href="#Mysql的分组-group-by-查询" class="headerlink" title="Mysql的分组(group by)查询"></a>Mysql的分组(group by)查询</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>这个时候,我们来试试脚本运行的方法吧,换个样子肯定很舒服.</p><p>脚本如下,我们命名为<code>schema.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 选择你的目标数据库</span></span><br><span class="line"><span class="keyword">use</span> mysqldemo;</span><br><span class="line"><span class="comment">-- 开始执行下面的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee_tbl`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee_tbl`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`singin`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee_tbl`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-22 15:25:33'</span>, <span class="string">'1'</span>), (<span class="string">'2'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-20 15:25:47'</span>, <span class="string">'3'</span>), (<span class="string">'3'</span>, <span class="string">'小丽'</span>, <span class="string">'2016-04-19 15:26:02'</span>, <span class="string">'2'</span>), (<span class="string">'4'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-07 15:26:14'</span>, <span class="string">'4'</span>), (<span class="string">'5'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-11 15:26:40'</span>, <span class="string">'4'</span>), (<span class="string">'6'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-04 15:26:54'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>我们使用一下图形化工具<code>MysqlWorkBench</code>吧.</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><p>1.我们首先要创建一个新的schema.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-4acf00b9751fdaba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7e2e10be9f2b206d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.导入数据</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-cc4683dd195df1fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.点击按钮,我们创建成功.</p><p>在脚本上好歹也要写上自己的目标数据库吧.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-21549d89eede176c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://jingyan.baidu.com/album/546ae1853d0fab1148f28c7f.html?picindex=2" target="_blank" rel="noopener">如何使用mysqlworkbench导入mysql脚本</a></p><h3 id="分组测试"><a href="#分组测试" class="headerlink" title="分组测试"></a>分组测试</h3><p>1.查询数据</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8272ebb09877bccf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.执行分组</p><p>我们将以上的数据表按照名字进行分组,在统计每个人登录的次数.</p><p><code>select name, SUM(singin) as singin_count from employee_tbl group by name with rollup</code><br><img src="http://upload-images.jianshu.io/upload_images/7505161-7d431d89c3e3b3bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这个<code>with rollup</code>的作用就是可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）.就相当于加上了<code>最终的总数计算</code>,</p><p>我们再试试count()函数,并使用 GROUP BY 语句 将数据表按名字进行分组，并统计每个人有多少条记录：</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-70ebd1b24a2e160c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>null表示所有人登录的总次数,用<code>null</code>来表示太难看看,所以我们用coalesce语法来设计一下:</p><p><code>select coalesce(a,b,c)</code></p><p>参数说明：</p><p>如果a==null,则选择b；如果b==null,则选择c；</p><p>如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</p><p><strong>下面我们进行<code>null</code>的改写.</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-2563efb4e087af14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mysql连接的使用"><a href="#mysql连接的使用" class="headerlink" title="mysql连接的使用"></a>mysql连接的使用</h2><p><strong>一说连接,我们就要告别单表查询的时代了.</strong></p><p>Mysql的Join在两个或者多个表中查询数据.</p><p>可以在SELECT,UPDATE,DELETE语句中使用mysql的JOIN来联合多表查询.</p><p>JOIN按照功能大致分为3类:</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> inner <span class="built_in">join</span>(内连接,或者等值连接):获取两个表中字段匹配关系的记录.</span><br><span class="line"><span class="number">2.</span> <span class="built_in">Left</span> <span class="built_in">join</span>(左连接):获取左表所有记录,即使右表没有对应匹配的记录.</span><br><span class="line"><span class="number">3.</span> <span class="built_in">Right</span> <span class="built_in">join</span>(右连接):与<span class="built_in">Left</span> <span class="built_in">Join</span>相反,用于获取右表所有记录,即使左表没有与之相匹配的数据.</span><br></pre></td></tr></table></figure><p>既然需要关联两个表,我们就再设计一个<code>student_sto</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_scores(</span><br><span class="line">  <span class="string">`student_id`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'学生ID'</span>,</span><br><span class="line">  <span class="string">`answer_person_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">21</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"答题人姓名"</span>,</span><br><span class="line">  <span class="string">`math_scores`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"数学成绩"</span>,</span><br><span class="line">  <span class="string">`language_scores`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">"语文成绩"</span>,</span><br><span class="line">  <span class="string">`physcial_score`</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'物理成绩'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">"创建时间"</span>,</span><br><span class="line">   primary <span class="keyword">key</span>(student_id,answer_person_name),</span><br><span class="line">   <span class="keyword">key</span> idx_create_time(create_time)</span><br><span class="line">  )<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> auto_increment = <span class="number">1000</span> <span class="keyword">DEFAULT</span> <span class="keyword">charset</span> = utf8 <span class="keyword">comment</span> =<span class="string">'学生成绩表'</span>;</span><br></pre></td></tr></table></figure></p><p>这里我们用到了联合索引,且是用在了主键上.需要我们明白下面的意思:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主键是唯一的。联合主键其实就是主键。</span><br><span class="line">只是联合主键是用<span class="number">2</span>个或<span class="number">2</span>个以上的字段组成主键。</span><br><span class="line">用这个主键包含的字段作为主键，这个组合在数据表中是唯一，且加了主键索引。</span><br></pre></td></tr></table></figure><p>插入数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_scores(student_id,answer_person_name,math_scores,language_scores,physcial_score,create_time)<span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">"小红"</span>,<span class="number">18</span>,<span class="number">36</span>,<span class="number">87</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>1.和<code>student_inf</code>这张表做一个联合查询.我们先做’inner join’的实验.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select <span class="built_in">s1</span>.student_id,<span class="built_in">s1</span>.student_name,<span class="built_in">s2</span>.math_scores,<span class="built_in">s2</span>.language_scores from student_inf <span class="built_in">s1</span> inner <span class="keyword">join </span>student_scores <span class="built_in">s2</span> on <span class="built_in">s1</span>.student_name = <span class="built_in">s2</span>.answer_person_name<span class="comment">;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>测试结果如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8bf2385488e9942a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.我们再做’left join’的实验.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="built_in">s1</span>.student_id,<span class="built_in">s1</span>.student_name,<span class="built_in">s2</span>.math_scores,<span class="built_in">s2</span>.language_scores from student_inf <span class="built_in">s1</span> left <span class="keyword">join </span>student_scores <span class="built_in">s2</span> on <span class="built_in">s1</span>.student_name = <span class="built_in">s2</span>.answer_person_name<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>3.<code>right join</code>的测试</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1d00e380b2a1cdb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>既然到这里,我们再深入一些,3表查询.也试一试吧.要不多没意思啊.又不是考试,但是我们要做到位.玩玩嘛.</p><p>再来一个表<code>student_spending</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stundet_spending(</span><br><span class="line">  student_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">'学生ID'</span>,</span><br><span class="line">  spending_person_name <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'消费者姓名'</span>,</span><br><span class="line">  buy_book_spending <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'买书钱'</span>,</span><br><span class="line">  telephone_costs <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'电话费'</span>,</span><br><span class="line">  living_supplies_costs <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'生活用品花费'</span>,</span><br><span class="line">  create_time <span class="keyword">timestamp</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(student_id,spending_person_name),</span><br><span class="line">  <span class="keyword">key</span> idx_create_time(create_time)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">Innodb</span> auto_increment = <span class="number">1000</span> <span class="keyword">DEFAULT</span> <span class="keyword">charset</span> = utf8 <span class="keyword">comment</span> =<span class="string">'学生花销表'</span>;</span><br></pre></td></tr></table></figure></p><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_spending(student_id,spending_person_name,buy_book_spending,telephone_costs,living_supplies_costs,create_time) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'小红'</span>,<span class="number">12</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="我们来关联这3个表"><a href="#我们来关联这3个表" class="headerlink" title="我们来关联这3个表:"></a>我们来关联这3个表:</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="built_in">s1</span>.student_name,<span class="built_in">s1</span>.student_age,<span class="built_in">s2</span>.physcial_score,<span class="built_in">s3</span>.<span class="keyword">buy_book_spending,s3.create_time </span>from student_inf <span class="built_in">s1</span> inner <span class="keyword">join </span>student_scores <span class="built_in">s2</span> on <span class="built_in">s1</span>.student_name =<span class="built_in">s2</span>.answer_person_name inner <span class="keyword">join </span>student_spending <span class="built_in">s3</span> on <span class="built_in">s2</span>.answer_person_name=<span class="built_in">s3</span>.spending_person_name where <span class="built_in">s1</span>.student_age = <span class="number">18</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/7505161-f0c77cda267c7980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mysql-null-值处理"><a href="#mysql-null-值处理" class="headerlink" title="mysql null 值处理"></a>mysql null 值处理</h2><p>MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。</p><p>为了处理这种情况，MySQL提供了三大运算符:</p><ul><li>IS NULL: 当列的值是 NULL,此运算符返回 true。</li><li>IS NOT NULL: 当列的值不为 NULL, 运算符返回 true。</li><li>&lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true。</li></ul><p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。</p><p>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 false，即 NULL = NULL 返回false 。</p><p>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p><p>好吧,我们做个试验:</p><ul><li><p>建表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> runoob_test_tbl</span><br><span class="line">    (</span><br><span class="line">    runoob_author <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    runoob_count  <span class="built_in">INT</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'RUNOOB'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'菜鸟教程'</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'Google'</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_test_tbl (runoob_author, runoob_count) <span class="keyword">values</span> (<span class="string">'FK'</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> runoob_test_tbl;</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count = <span class="literal">NULL</span>;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count != <span class="literal">NULL</span>;</span><br><span class="line">Empty set (0.01 sec)</span><br></pre></td></tr></table></figure><ul><li>正确的测试</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> runoob_test_tbl <span class="keyword">WHERE</span> runoob_count <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/7505161-65707c4f961c6a45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e3947e4b2475ed82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>mysql中,<code>= 和 != 运算符是不起作用的</code>;</p><h2 id="mysql的正则表达式"><a href="#mysql的正则表达式" class="headerlink" title="mysql的正则表达式"></a>mysql的正则表达式</h2><p>MySQL中使用 <code>REGEXP 操作符</code>来进行正则表达式匹配。</p><p>1.查找runoob_author字段中以’st’为开头的所有数据：<br><img src="http://upload-images.jianshu.io/upload_images/7505161-e956ef1ad10451d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2.查找runoob_author字段以’OB’结尾的所有数据:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-98f789e7888cffed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>3.查找runoob_author字段中所有内容包含<code>O</code>的所有数据:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-38c882fe1d262690.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4.查找runoob_author字段中以元音字符开头或以’OB’字符串结尾的所有数据：<br><img src="http://upload-images.jianshu.io/upload_images/7505161-f1d74ba33e158fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><a href="http://www.runoob.com/mysql/mysql-regexp.html" target="_blank" rel="noopener">正则表达式地址</a></p><h2 id="Mysql的事务"><a href="#Mysql的事务" class="headerlink" title="Mysql的事务"></a>Mysql的事务</h2><p><code>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</code></p><ul><li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 insert,update,delete 语句</li></ul><h3 id="事务必须满足ACID这4个条件"><a href="#事务必须满足ACID这4个条件" class="headerlink" title="事务必须满足ACID这4个条件"></a>事务必须满足ACID这4个条件</h3><p>分别为:</p><ul><li>原子性（Atomicity，或称不可分割性）.</li><li>一致性（Consistency）.</li><li>隔离性（Isolation，又称独立性）.</li><li>持久性（Durability）.<blockquote><p>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></blockquote></li></ul><blockquote><p>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p><p>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p><p>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</code></p><h3 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h3><ul><li><p>BEGIN或START TRANSACTION；显式地开启一个事务；</p></li><li><p>COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改称为永久性的；</p></li><li><p>ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</p></li><li><p>SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；</p></li><li><p>RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p></li><li><p>ROLLBACK TO identifier；把事务回滚到标记点；</p></li><li><p>SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。</p></li></ul><h3 id="Mysql事务处理主要有两种方法有2种方法"><a href="#Mysql事务处理主要有两种方法有2种方法" class="headerlink" title="Mysql事务处理主要有两种方法有2种方法"></a>Mysql事务处理主要有两种方法有2种方法</h3><p>1.用BEGIN,ROLLBACK,COMMIT来实现</p><ul><li>BEGIN开始一个事务</li><li>ROLLBACK事务回滚</li><li>COMMIT事务确认</li></ul><p>2.直接用SET来改变Mysql的自动提交模式</p><ul><li>SET AUTOCOMMIT=0 禁止自动提交</li><li>SET AUTOCOMMIT=1 开启自动提交</li></ul><h3 id="事务测试"><a href="#事务测试" class="headerlink" title="事务测试"></a>事务测试</h3><p>1.一个完整的事务如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0697c5c7c5a8fff8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.我们来看看<code>rollback</code>情况.</p><p> 再开始一个事务,特别之处是它没有提交.并被回滚了.</p><p> <img src="http://upload-images.jianshu.io/upload_images/7505161-f0d898e9fe4b1ec8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>所以自然没有插进数据.</p><p>3.查看mysql的隔离级别</p><p><code>select @@tx_isolation</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-3bf7543f895d3917.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可见mysql的隔离级别默认是<code>可重复读</code>.</p><h2 id="Alter命令"><a href="#Alter命令" class="headerlink" title="Alter命令"></a>Alter命令</h2><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令。</p><p>我们先查看标的结构:</p><p>以下,2中查看方法是一致的.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0b61ff91b16db4eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="删除-添加-或修改表字段"><a href="#删除-添加-或修改表字段" class="headerlink" title="删除,添加,或修改表字段."></a>删除,添加,或修改表字段.</h3><p>1.使用alter命令及drop字句删除表的i字段.</p><p><code>alter table testalter_tbl drop i;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8afc153bedeca78f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>看一看更加全面的表结构.编码默认是<code>gbk</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1993c5bdedfd95aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2.增加一列</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-238f962342e103c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.指定新增字段的位置.</p><p>执行下面的语句来测试,看看字段的位置有没有变化.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">DROP</span> i;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ADD</span> i <span class="built_in">INT</span> <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">DROP</span> i;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> testalter_tbl <span class="keyword">ADD</span> i <span class="built_in">INT</span> <span class="keyword">AFTER</span> c;</span><br></pre></td></tr></table></figure><p>前两条SQL的执行结果:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e3de62a1fb81cd2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>后两条SQL的执行结果.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8e17af62a3c526e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ol><li>修改字段类型及名称.</li></ol><p><strong>改字段的类型</strong></p><p><code>modify</code>字段的使用.</p><p><code>alter table testalter_tbl modify i bigint;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8fbb033540592eca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>改字段的名称</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-bad8550f07ec39e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>字段名和类型全都改</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-ef89b792a7ca2c0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5.解决对null值和默认值的影响</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1fae36766538ff61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>6.修改字段默认值</p><p><code>alter table testalter_tbl alter i set default 1000;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7d9220630c429470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>7.使用alter命令及drop字段来删除字段的默认值<br><img src="http://upload-images.jianshu.io/upload_images/7505161-5669d011da7ce718.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>8.修改数据表类型</p><p><code>alter table testalter_tbl engine = myisam;</code></p><p>9.修改表名<br><code>ALTER TABLE testalter_tbl RENAME TO alter_tbl;</code></p><p>10.查看表的类型.</p><p><code>show table status like &#39;testalter_tbl&#39;\G;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-758ccbc9411559dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/7505161-b2e7f9642bd462a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p><p>打个比方，如果合理的设计且使用索引的MySQL是一辆兰博基尼的话，那么没有设计和使用索引的MySQL就是一个人力三轮车。</p><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><p>创建索引时，你需要确保该索引是应用在    SQL 查询语句的条件(一般作为 WHERE 子句的条件)。</p><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p><p>建立索引会占用磁盘空间的索引文件。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><p><code>CREATE INDEX indexName ON mytable(username(length));</code></p><p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p><h3 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h3><p><code>ALTER table tableName ADD INDEX indexName(columnName)</code></p><p>创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(</span><br><span class="line"></span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">INDEX</span> [indexName] (username(<span class="keyword">length</span>))</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h3><p><code>DROP INDEX [indexName] ON mytable;</code></p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><h3 id="创建索引-2"><a href="#创建索引-2" class="headerlink" title="创建索引"></a>创建索引</h3><p><code>CREATE UNIQUE INDEX indexName ON mytable(username(length))</code></p><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p><code>ALTER table mytable ADD UNIQUE [indexName] (username(length))</code></p><p>创建表的时候直接指定<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(</span><br><span class="line"></span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNIQUE</span> [indexName] (username(<span class="keyword">length</span>))</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h3><p>有四种方式来添加数据表的索引：</p><p><code>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):</code></p><p> 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</p><p><code>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):</code></p><p> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</p><p><code>ALTER TABLE tbl_name ADD INDEX index_name (column_list):</code></p><p> 添加普通索引，索引值可出现多次。</p><p><code>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):</code></p><p>该语句指定了索引为 FULLTEXT ，用于全文索引。</p><p>以下实例为在表中添加索引。</p><p><code>mysql&gt; ALTER TABLE testalter_tbl ADD INDEX (c);</code></p><p>你还可以在 ALTER 命令中使用 DROP 子句来删除索引。尝试以下实例删除索引:</p><p><code>mysql&gt; ALTER TABLE testalter_tbl DROP INDEX c;</code></p><h3 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER 命令添加和删除主键"></a>使用 ALTER 命令添加和删除主键</h3><p>主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空（NOT NULL）。实例如下：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">MODIFY i INT NOT NULL</span>;</span><br><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> testalter_tbl <span class="comment">ADD PRIMARY KEY (i)</span>;</span><br></pre></td></tr></table></figure></p><p>你也可以使用 ALTER 命令删除主键：</p><p><code>mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;</code></p><p>删除主键时只需指定PRIMARY KEY，但在删除索引时，你必须知道索引名。</p><h3 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h3><p>你可以使用 SHOW INDEX 命令来列出表中的相关的索引信息。可以通过添加 \G 来格式化输出信息。</p><p>尝试以下实例:</p><p><code>mysql&gt; SHOW INDEX FROM table_name; \G</code></p><h2 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h2><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p><p>临时表在MySQL 3.23版本中添加，如果你的MySQL版本低于 3.23版本就无法使用MySQL的临时表。不过现在一般很少有再使用这么低版本的MySQL数据库服务了。</p><p>MySQL临时表只在当前连接可见，如果你使用PHP脚本来创建MySQL临时表，那每当PHP脚本执行完成后，该临时表也会自动销毁。</p><p>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line"><span class="code">    -&gt; product_name VARCHAR(50) NOT NULL</span></span><br><span class="line"><span class="code">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span></span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line"><span class="code">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span></span><br><span class="line"><span class="code">    -&gt; VALUES</span></span><br><span class="line"><span class="code">    -&gt; ('cucumber', 100.25, 90, 2);</span></span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| product<span class="emphasis">_name | total_</span>sales | avg<span class="emphasis">_unit_</span>price | total<span class="emphasis">_units_</span>sold |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当你使用 SHOW TABLES命令显示数据表列表时，你将无法看到 SalesSummary表。</p><p>如果你退出当前MySQL会话，再使用 SELECT命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p><h3 id="删除临时表"><a href="#删除临时表" class="headerlink" title="删除临时表"></a>删除临时表</h3><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 DROP TABLE 命令来手动删除临时表。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line"><span class="code">    -&gt; product_name VARCHAR(50) NOT NULL</span></span><br><span class="line"><span class="code">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span></span><br><span class="line"><span class="code">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span></span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line"><span class="code">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span></span><br><span class="line"><span class="code">    -&gt; VALUES</span></span><br><span class="line"><span class="code">    -&gt; ('cucumber', 100.25, 90, 2);</span></span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| product<span class="emphasis">_name | total_</span>sales | avg<span class="emphasis">_unit_</span>price | total<span class="emphasis">_units_</span>sold |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line"><span class="code">+--------------+</span>-------------<span class="code">+----------------+</span>------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; DROP TABLE SalesSummary;</span><br><span class="line">mysql&gt;  SELECT * FROM SalesSummary;</span><br><span class="line">ERROR 1146: Table <span class="emphasis">'RUNOOB.SalesSummary'</span> doesn't exist</span><br></pre></td></tr></table></figure></p><h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><p>如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用CREATE TABLE … SELECT 命令，是无法实现的。</p><p>本章节将为大家介绍如何完整的复制MySQL数据表，步骤如下：</p><ul><li>使用 SHOW CREATE TABLE 命令获取创建数据表(CREATE TABLE) 语句，该语句包含了原数据表的结构，索引等。</li><li>复制以下命令显示的SQL语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构。</li><li>如果你想复制表的内容，你就可以使用 INSERT INTO … SELECT 语句来实现。</li></ul><p>实例<br>尝试以下实例来复制表 runoob_tbl 。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">步骤一：</span><br><span class="line"></span><br><span class="line">获取数据表的完整结构。</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW <span class="keyword">CREATE</span> TABLE runoob_tbl \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: runoob_tbl</span><br><span class="line"><span class="keyword">Create</span> Table: <span class="keyword">CREATE</span> TABLE <span class="symbol">`runoob_tbl`</span> (</span><br><span class="line">  <span class="symbol">`runoob_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="symbol">`runoob_title`</span> varchar(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  <span class="symbol">`runoob_author`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  <span class="symbol">`submission_date`</span> date default <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>  (<span class="symbol">`runoob_id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`AUTHOR_INDEX`</span> (<span class="symbol">`runoob_author`</span>)</span><br><span class="line">) ENGINE=InnoDB</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br><span class="line">步骤二：</span><br><span class="line"></span><br><span class="line">修改SQL语句的数据表名，并执行SQL语句。</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> TABLE <span class="symbol">`clone_tbl`</span> (</span><br><span class="line">  -&gt; <span class="symbol">`runoob_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  -&gt; <span class="symbol">`runoob_title`</span> varchar(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  -&gt; <span class="symbol">`runoob_author`</span> varchar(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> default <span class="string">''</span>,</span><br><span class="line">  -&gt; <span class="symbol">`submission_date`</span> date default <span class="literal">NULL</span>,</span><br><span class="line">  -&gt; <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>  (<span class="symbol">`runoob_id`</span>),</span><br><span class="line">  -&gt; <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`AUTHOR_INDEX`</span> (<span class="symbol">`runoob_author`</span>)</span><br><span class="line">-&gt; ) ENGINE=InnoDB;</span><br><span class="line">Query OK, 0 rows affected (1.80 sec)</span><br><span class="line">步骤三：</span><br><span class="line"></span><br><span class="line">执行完第二步骤后，你将在数据库中创建新的克隆表 clone_tbl。 如果你想拷贝数据表的数据你可以使用 <span class="keyword">INSERT</span> <span class="keyword">INTO</span>... <span class="keyword">SELECT</span> 语句来实现。</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> clone_tbl (runoob_id,</span><br><span class="line">    -&gt;                        runoob_title,</span><br><span class="line">    -&gt;                        runoob_author,</span><br><span class="line">    -&gt;                        submission_date)</span><br><span class="line">    -&gt; <span class="keyword">SELECT</span> runoob_id,runoob_title,</span><br><span class="line">    -&gt;        runoob_author,submission_date</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> runoob_tbl;</span><br><span class="line">Query OK, 3 rows affected (0.07 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line">执行以上步骤后，你将完整的复制表，包括表结构及表数据。</span><br></pre></td></tr></table></figure></p><h2 id="mysql的元数据"><a href="#mysql的元数据" class="headerlink" title="mysql的元数据"></a>mysql的元数据</h2><p>你可能想知道MySQL以下三种信息：</p><ul><li>查询结果信息： SELECT, UPDATE 或 DELETE语句影响的记录数。</li><li>数据库和数据表的信息： 包含了数据库及数据表的结构信息。</li><li>MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等。<br>在MySQL的命令提示符中，我们可以很容易的获取以上服务器信息。 但如果使用Perl或PHP等脚本语言，你就需要调用特定的接口函数来获取。 接下来我们会详细介绍。</li></ul><h3 id="获取查询语句影响的记录数"><a href="#获取查询语句影响的记录数" class="headerlink" title="获取查询语句影响的记录数"></a>获取查询语句影响的记录数</h3><p>PERL 实例<br>在 DBI 脚本中， 语句影响的记录数通过函数 do( ) 或 execute( )返回：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="comment"># 使用do( ) 执行  $query</span></span><br><span class="line"><span class="keyword">my</span> $count = $dbh-&gt;<span class="keyword">do</span> ($query);</span><br><span class="line"><span class="comment"># 如果发生错误会输出 0</span></span><br><span class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="comment"># 使用prepare( ) 及 execute( ) 执行  $query</span></span><br><span class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare ($query);</span><br><span class="line"><span class="keyword">my</span> $count = $sth-&gt;execute ( );</span><br><span class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><h3 id="数据库和数据表列表"><a href="#数据库和数据表列表" class="headerlink" title="数据库和数据表列表"></a>数据库和数据表列表</h3><p>你可以很容易的在MySQL服务器中获取数据库和数据表列表。 如果你没有足够的权限，结果将返回 null。</p><p>你也可以使用 SHOW TABLES 或 SHOW DATABASES 语句来获取数据库和数据表列表。</p><p>REAL实例<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前数据库中所有可用的表。</span></span><br><span class="line"><span class="keyword">my</span> @tables = $dbh-&gt;tables ( );</span><br><span class="line"><span class="keyword">foreach</span> $table (@tables )&#123;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"表名 $table\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取服务器元数据"><a href="#获取服务器元数据" class="headerlink" title="获取服务器元数据"></a>获取服务器元数据</h3><p>以下命令语句可以在 MySQL 的命令提示符使用，也可以在脚本中 使用，如PHP脚本。</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7bc11eae1c498e7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mysql的序列"><a href="#mysql的序列" class="headerlink" title="mysql的序列"></a>mysql的序列</h2><p>MySQL序列是一组整数：1, 2, 3, …，由于一张数据表只能有一个字段自增主键， 如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现。</p><p>本章我们将介绍如何使用MySQL的序列。</p><h3 id="使用AUTO-INCREMENT"><a href="#使用AUTO-INCREMENT" class="headerlink" title="使用AUTO_INCREMENT"></a>使用AUTO_INCREMENT</h3><p>MySQL中最简单使用序列的方法就是使用 MySQL AUTO_INCREMENT 来定义列。</p><p>实例</p><p>以下实例中创建了数据表insect， insect中id无需指定值可实现自动增长。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line"><span class="code">    -&gt; (</span></span><br><span class="line"><span class="code">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="code">    -&gt; PRIMARY KEY (id),</span></span><br><span class="line"><span class="code">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span></span><br><span class="line"><span class="code">    -&gt; date DATE NOT NULL, # date collected</span></span><br><span class="line"><span class="code">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span></span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">mysql&gt; INSERT INTO insect (id,name,date,origin) VALUES</span><br><span class="line"><span class="code">    -&gt; (NULL,'housefly','2001-09-10','kitchen'),</span></span><br><span class="line"><span class="code">    -&gt; (NULL,'millipede','2001-09-10','driveway'),</span></span><br><span class="line"><span class="code">    -&gt; (NULL,'grasshopper','2001-09-10','front yard');</span></span><br><span class="line">Query OK, 3 rows affected (0.02 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; SELECT * FROM insect ORDER BY id;</span><br><span class="line"><span class="code">+----+</span>-------------<span class="code">+------------+</span>------------+</span><br><span class="line">| id | name        | date       | origin     |</span><br><span class="line"><span class="code">+----+</span>-------------<span class="code">+------------+</span>------------+</span><br><span class="line">|  1 | housefly    | 2001-09-10 | kitchen    |</span><br><span class="line">|  2 | millipede   | 2001-09-10 | driveway   |</span><br><span class="line">|  3 | grasshopper | 2001-09-10 | front yard |</span><br><span class="line"><span class="code">+----+</span>-------------<span class="code">+------------+</span>------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="获取AUTO-INCREMENT值"><a href="#获取AUTO-INCREMENT值" class="headerlink" title="获取AUTO_INCREMENT值"></a>获取AUTO_INCREMENT值</h3><p>在MySQL的客户端中你可以使用 SQL中的LAST_INSERT_ID( ) 函数来获取最后的插入表中的自增列的值。</p><p>在PHP或PERL脚本中也提供了相应的函数来获取最后的插入表中的自增列的值。</p><p>PERL实例<br>使用 mysql_insertid 属性来获取 AUTO_INCREMENT 的值。 实例如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dbh</span>-&gt;<span class="keyword">do</span> (<span class="string">"INSERT INTO insect (name,date,origin)</span></span><br><span class="line"><span class="string">VALUES('moth','2001-09-14','windowsill')"</span>);</span><br><span class="line">my <span class="variable">$seq</span> = <span class="variable">$dbh</span>-&gt;&#123;mysql_insertid&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h3><p><code>如果你删除了数据表中的多条记录，并希望对剩下数据的AUTO_INCREMENT列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。 不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱</code></p><p>操作如下所示：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> insect <span class="comment">DROP id</span>;</span><br><span class="line">mysql&gt; ALTER <span class="keyword">TABLE</span> insect</span><br><span class="line">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class="line">    -&gt; ADD PRIMARY KEY (id);</span><br></pre></td></tr></table></figure></p><h3 id="设置序列的开始值"><a href="#设置序列的开始值" class="headerlink" title="设置序列的开始值"></a>设置序列的开始值</h3><p>一般情况下序列的开始值为1，但如果你需要指定一个开始值100，那我们可以通过以下语句来实现：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id INT UNSIGNED <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    -&gt; PRIMARY KEY (id),</span><br><span class="line">    -&gt; name VARCHAR(30) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; date DATE <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    -&gt; origin VARCHAR(30) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="attribute">engine</span>=innodb <span class="attribute">auto_increment</span>=100 <span class="attribute">charset</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>或者你也可以在表创建成功后，通过以下语句来实现：</p><p><code>mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</code></p><h2 id="MySQL-处理重复数据"><a href="#MySQL-处理重复数据" class="headerlink" title="MySQL 处理重复数据"></a>MySQL 处理重复数据</h2><p>有些 MySQL 数据表中可能存在重复的记录，有些情况我们允许重复数据的存在，但有时候我们也需要删除这些重复的数据。</p><p>本章节我们将为大家介绍如何防止数据表出现重复数据及如何删除数据表中的重复数据。</p><h3 id="防止表中出现重复数据"><a href="#防止表中出现重复数据" class="headerlink" title="防止表中出现重复数据"></a>防止表中出现重复数据</h3><p>你可以在MySQL数据表中设置指定的字段为 PRIMARY KEY（主键） 或者 UNIQUE（唯一） 索引来保证数据的唯一性。</p><p>让我们尝试一个实例：下表中无索引及主键，所以该表允许出现多条重复记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">    first_name <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    last_name <span class="built_in">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="built_in">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><code>如果你想设置表中字段first_name，last_name数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为NULL，可设置为NOT NULL。</code></p><p>如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   last_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   sex <span class="built_in">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>如果我们设置了唯一索引，那么在插入重复数据时，SQL语句将无法执行成功,并抛出错。</p><p><code>INSERT IGNORE INTO与INSERT INTO的区别就是INSERT IGNORE会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的</code></p><p>以下实例使用了INSERT IGNORE INTO，执行后不会出错，也不会向数据表中插入重复数据：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">INSERT</span> <span class="selector-tag">IGNORE</span> <span class="selector-tag">INTO</span> <span class="selector-tag">person_tbl</span> (last_name, first_name)</span><br><span class="line">    <span class="selector-tag">-</span>&gt; <span class="selector-tag">VALUES</span>( <span class="string">'Jay'</span>, <span class="string">'Thomas'</span>);</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, <span class="selector-tag">1</span> <span class="selector-tag">row</span> <span class="selector-tag">affected</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">INSERT</span> <span class="selector-tag">IGNORE</span> <span class="selector-tag">INTO</span> <span class="selector-tag">person_tbl</span> (last_name, first_name)</span><br><span class="line">    <span class="selector-tag">-</span>&gt; <span class="selector-tag">VALUES</span>( <span class="string">'Jay'</span>, <span class="string">'Thomas'</span>);</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, <span class="selector-tag">0</span> <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p><code>INSERT IGNORE INTO当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而REPLACE INTO into如果存在primary 或 unique相同的记录，则先删除掉。再插入新记录</code></p><p>另一种设置数据的唯一性方法是添加一个UNIQUE索引，如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">(</span><br><span class="line">   first_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   last_name <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   sex <span class="built_in">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">   <span class="keyword">UNIQUE</span> (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h3><p>以下我们将统计表中 first_name 和 last_name的重复记录数：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    -&gt;<span class="built_in"> GROUP </span>BY last_name, first_name</span><br><span class="line">    -&gt; HAVING repetitions &gt; 1;</span><br></pre></td></tr></table></figure></p><p>以上查询语句将返回 person_tbl 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p><p>确定哪一列包含的值可能会重复。</p><p>在列选择列表使用COUNT(*)列出的那些列。</p><p>在GROUP BY子句中列出的列。</p><p>HAVING子句设置重复数大于1。</p><p>###过滤重复数据</p><p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name, first_name</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> person_tbl;</span><br></pre></td></tr></table></figure></p><p>你也可以使用 GROUP BY 来读取数据表中不重复的数据：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT last_name, first_name</span><br><span class="line">    -&gt; <span class="keyword">FROM</span> person_tbl</span><br><span class="line">    -&gt;<span class="built_in"> GROUP </span>BY (last_name, first_name);</span><br></pre></td></tr></table></figure></p><h3 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h3><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tmp SELECT last_name, first_name, sex</span><br><span class="line">    -&gt;                  <span class="keyword">FROM</span> person_tbl;</span><br><span class="line">    -&gt;                 <span class="built_in"> GROUP </span>BY (last_name, first_name, sex);</span><br><span class="line">mysql&gt; DROP TABLE person_tbl;</span><br><span class="line">mysql&gt; ALTER TABLE tmp RENAME <span class="keyword">TO</span> person_tbl;</span><br></pre></td></tr></table></figure><p>当然你也可以在数据表中添加 INDEX（索引） 和 PRIMAY KEY（主键）这种简单的方法来删除表中的重复记录。</p><p>方法如下：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER IGNORE <span class="keyword">TABLE</span> person_tbl</span><br><span class="line">    -&gt; ADD PRIMARY KEY (last_name, first_name);</span><br></pre></td></tr></table></figure></p><h3 id="MySQL-及-SQL-注入"><a href="#MySQL-及-SQL-注入" class="headerlink" title="MySQL 及 SQL 注入"></a>MySQL 及 SQL 注入</h3><p>如果您通过网页获取用户输入的数据并将其插入一个MySQL数据库，那么就有可能发生SQL注入安全的问题。</p><p>本章节将为大家介绍如何防止SQL注入，并通过脚本来过滤SQL中注入的字符。</p><p>所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p><p>以下实例中，输入的用户名必须为字母、数字及下划线的组合，且用户名长度为 8 到 20 个字符之间：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\w&#123;8,20&#125;$/"</span>, <span class="variable">$_GET</span>[<span class="string">'username'</span>], <span class="variable">$matches</span>))</span><br><span class="line">&#123;</span><br><span class="line">   <span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">"SELECT * FROM users</span></span><br><span class="line"><span class="string">                          WHERE username=<span class="variable">$matches</span>[0]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"username 输入异常"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>让我们看下在没有过滤特殊字符时，出现的SQL情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 设定$name 中插入了我们不需要的SQL语句</span><br><span class="line">$name = "Qadir'; <span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;";</span><br><span class="line"> mysqli_query($conn, "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'&#123;$name&#125;'</span><span class="string">");</span></span><br></pre></td></tr></table></figure><p>以上的注入语句中，我们没有对 $name 的变量进行过滤，$name 中插入了我们不需要的SQL语句，将删除 users 表中的所有数据。</p><p>在PHP中的 mysqli_query() 是不允许执行多个 SQL 语句的，但是在 SQLite 和 PostgreSQL 是可以同时执行多条SQL语句的，所以我们对这些用户的数据需要进行严格的验证。</p><p>防止SQL注入，我们需要注意以下几个要点：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双<span class="string">"-"</span>进行转换等。</span><br><span class="line"><span class="number">2.</span>永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</span><br><span class="line"><span class="number">3.</span>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</span><br><span class="line"><span class="number">4.</span>不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</span><br><span class="line"><span class="number">5.</span>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</span><br><span class="line"><span class="number">6.</span>sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。</span><br></pre></td></tr></table></figure></p><h3 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h3><p>在脚本语言，如Perl和PHP你可以对用户输入的数据进行转义从而来防止SQL注入。</p><p>PHP的MySQL扩展提供了mysqli_real_escape_string()函数来转义特殊的输入字符。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">  $</span><span class="bash">name = stripslashes(<span class="variable">$name</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">$</span><span class="bash">name = mysqli_real_escape_string(<span class="variable">$conn</span>, <span class="variable">$name</span>);</span></span><br><span class="line"><span class="meta"> mysqli_query($</span><span class="bash">conn, <span class="string">"SELECT * FROM users WHERE name='&#123;<span class="variable">$name</span>&#125;'"</span>);</span></span><br></pre></td></tr></table></figure></p><h3 id="Like语句中的注入"><a href="#Like语句中的注入" class="headerlink" title="Like语句中的注入"></a>Like语句中的注入</h3><p><code>like查询时，如果用户输入的值有&quot;_&quot;和&quot;%&quot;，则会出现这种情况：用户本来只是想查询&quot;abcd_&quot;，查询结果中却有&quot;abcd_&quot;、&quot;abcde&quot;、&quot;abcdf&quot;等等；用户要查询&quot;30%&quot;（注：百分之三十）时也会出现问题。</code></p><p>在PHP脚本中我们可以使用addcslashes()函数来处理以上情况，如下实例：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sub = addcslashes(mysqli_real_escape_string($conn, <span class="string">"%something_"</span>), <span class="string">"%_"</span>);</span><br><span class="line">// $sub == \%something\<span class="number">_</span></span><br><span class="line"> mysqli_query($conn, <span class="string">"SELECT * FROM messages WHERE subject LIKE '&#123;$sub&#125;%'"</span>);</span><br><span class="line">addcslashes() 函数在指定的字符前添加反斜杠。</span><br></pre></td></tr></table></figure></p><p>语法格式:</p><p><code>addcslashes(string,characters)</code></p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-9288c828836a0649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 增删改查 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>秒杀Dao层开发</title>
      <link href="/2018/01/01/%E7%A7%92%E6%9D%80Dao%E5%B1%82%E5%BC%80%E5%8F%91/"/>
      <url>/2018/01/01/%E7%A7%92%E6%9D%80Dao%E5%B1%82%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="数据库设计编码"><a href="#数据库设计编码" class="headerlink" title="数据库设计编码"></a>数据库设计编码</h2><p>数据库设计工作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.创建数据库seckill</span><br><span class="line">2.使用数据库seckill</span><br><span class="line"></span><br><span class="line">3.创建秒杀数据库存表:</span><br><span class="line">    3.1.存储引擎的选用.</span><br><span class="line">    3.2.具体字段的编辑.</span><br><span class="line">    3.3.索引的创建.</span><br><span class="line">4.初始化数据(插入几组数据)</span><br><span class="line"></span><br><span class="line">5.创建用户明细表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">秒杀成功明细表里面的主键不使用自增的主键,</span><br><span class="line"></span><br><span class="line">而是采用联合主键</span><br><span class="line"></span><br><span class="line">同一个用户只可能对同一个库存内的商品做秒杀,</span><br><span class="line">所以设计为</span><br><span class="line">PRIMARY_KEY(seckill_id,user_phone),</span><br></pre></td></tr></table></figure></p><p>详情如下:<br><strong>!!! 千万注意:表的字段,比如:<code>seckill_id</code>里面是tab上面的那个符号,不要弄错了.我使的是5.7版本,还有就是创建时间戳的时候,需要给它设置一个默认值</strong></p><h3 id="创建秒杀数据库"><a href="#创建秒杀数据库" class="headerlink" title="创建秒杀数据库"></a>创建秒杀数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE seckill(</span><br><span class="line">  `seckill_id` BIGINT NOT NULL AUTO_INCREMENT COMMENT &apos;商品库存id&apos;,</span><br><span class="line">  `name` VARCHAR(120) NOT NULL  COMMENT &apos;商品名称&apos;,</span><br><span class="line">  `number` int NOT NULL COMMENT &apos;库存数量&apos;,</span><br><span class="line">  `start_time` TIMESTAMP not null ON UPDATE CURRENT_TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &apos;秒杀开始时间&apos;,</span><br><span class="line">  `end_time` TIMESTAMP not null ON UPDATE CURRENT_TIMESTAMP  DEFAULT CURRENT_TIMESTAMP COMMENT &apos;秒杀结束时间&apos;,</span><br><span class="line">  `create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">  PRIMARY KEY (seckill_id),</span><br><span class="line">  key idx_start_time(start_time),</span><br><span class="line">  key idx_end_time(end_time),</span><br><span class="line">  key idx_create_time(create_time)</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=1000 DEFAULT CHARSET=utf8 COMMENT =&apos;秒杀库存表&apos;;</span><br></pre></td></tr></table></figure><p>查看表的详细计划:show create table seckill\G;</p><h3 id="插入几组数据"><a href="#插入几组数据" class="headerlink" title="插入几组数据"></a>插入几组数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO seckill(name,number,start_time,end_time)</span><br><span class="line">VALUES</span><br><span class="line">(&apos;1000元秒杀iPad6&apos;,100,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;),</span><br><span class="line">(&apos;500元秒杀iPad7&apos;,200,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;),</span><br><span class="line">(&apos;300元秒杀小米4&apos;,300,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;),</span><br><span class="line">(&apos;200元秒杀红米note&apos;,400,&apos;2018-1-31 16:31:00&apos;,&apos;2018-2-16 16:31:00&apos;);</span><br></pre></td></tr></table></figure><h3 id="创建用户明细表"><a href="#创建用户明细表" class="headerlink" title="创建用户明细表"></a>创建用户明细表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table success_killed(</span><br><span class="line">  `seckill_id` bigint NOT NULL COMMENT &apos;秒杀商品Id&apos;,</span><br><span class="line">  `user_phone` bigint NOT NULL COMMENT &apos;用户手机号&apos;,</span><br><span class="line">  `state` tinyint NOT NULL DEFAULT -1 COMMENT &apos;状态标识:-1:无效,0:成功,1:已付款,2:已发货&apos;,</span><br><span class="line">  `create_time` TIMESTAMP NOT NULL DEFAULT current_timestamp COMMENT &apos;创建时间&apos;,</span><br><span class="line">  PRIMARY KEY (seckill_id,user_phone),/*联合索引*/</span><br><span class="line">  key idx_create_time(create_time)</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT =&apos;秒杀成功明细表&apos;;</span><br></pre></td></tr></table></figure><p>现在发现IDEA里面用<code>show CREATE TABLE success_killed;</code>不用加上\G;</p><p>一般其他的控制台要加上\G;即:<code>show CREATE TABLE success_killed\G;</code></p><h2 id="DAO相关接口编码"><a href="#DAO相关接口编码" class="headerlink" title="DAO相关接口编码"></a>DAO相关接口编码</h2><h3 id="DAO层接口的设计"><a href="#DAO层接口的设计" class="headerlink" title="DAO层接口的设计"></a>DAO层接口的设计</h3><p>总的看来,我们的接口需要减少库存和增加明细的操作.</p><p>但是还要更加细致</p><p>其中,要注意的是,SuccessSeckilled是一个复合实体,里面有一个实体是Seckill,属于多对一的关系.</p><p>也就是同样的商品秒杀成功的话,可能有多个明细.</p><h3 id="SeckillDao接口的设计"><a href="#SeckillDao接口的设计" class="headerlink" title="SeckillDao接口的设计"></a>SeckillDao接口的设计</h3><ol><li><p>根据商品ID和秒杀时间减少库存</p></li><li><p>根据商品Id秒杀商品</p></li><li><p>根据偏移量查询秒杀商品列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface SeckillDao &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 减库存</span><br><span class="line">     * @param secKillId</span><br><span class="line">     * @param killTime</span><br><span class="line">     * @return 如果影响行数&gt;1,表示更新的记录行数(如果返回0,说明这条语句没有更新成功.)</span><br><span class="line">     */</span><br><span class="line">    int reduceNumber(long secKillId, Date killTime);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据Id秒杀商品</span><br><span class="line">     * @param seckillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Seckill queryById(long seckillId);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据偏移量查询秒杀商品列表</span><br><span class="line">     * @param limit 取多少条记录</span><br><span class="line">     * @param offet 偏移量</span><br><span class="line">     * @return 商品列表</span><br><span class="line">     * 会用到一个SQL的链接,因为是符合查询(查询秒杀明细(查询秒杀商品))</span><br><span class="line">     */</span><br><span class="line">    List&lt;Seckill&gt; queryAll(int offet,int limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="SuccessKilledDao接口的设计"><a href="#SuccessKilledDao接口的设计" class="headerlink" title="SuccessKilledDao接口的设计"></a>SuccessKilledDao接口的设计</h3><ol><li><p>插入用户秒杀明细</p></li><li><p>查询携带秒杀商品的明细</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1.插入用户购买明细,可过滤重复(之前设置的是联合主键,所以可以帮我们过滤重复)</span><br><span class="line"> * 2.根据id查询Successkilled并携带Seckill实体</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface SuccessKilledDao &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 插入用户购买明细</span><br><span class="line">     * @param secKillId</span><br><span class="line">     * @param userPhone</span><br><span class="line">     * @return  插入的行数,就是秒杀成功的记录</span><br><span class="line">     */</span><br><span class="line">    int insertSuccessKilled(long secKillId,long userPhone);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询Successkilled并携带Seckill实体</span><br><span class="line">     * @param secKillId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    SuccessKilled querySuccessKilledWithSeckill(long secKillId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="基于MyBatis实现DAO"><a href="#基于MyBatis实现DAO" class="headerlink" title="基于MyBatis实现DAO"></a>基于MyBatis实现DAO</h2><p>mybatis与hibernate其实都是针对对象关系的映射框架.</p><p>把数据库中的东西映射到对象</p><p>反过来就把对象中的东西映射到数据库当中</p><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-946d004c773772cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="mybatis的特点"><a href="#mybatis的特点" class="headerlink" title="mybatis的特点"></a>mybatis的特点</h2><p>参数+SQL=Entity/List</p><h3 id="SQL写在的位置"><a href="#SQL写在的位置" class="headerlink" title="SQL写在的位置"></a>SQL写在的位置</h3><ol><li>XML提供SQL(推荐)</li></ol><p>2, 注解提供SQL</p><h3 id="实现DAO接口"><a href="#实现DAO接口" class="headerlink" title="实现DAO接口:"></a>实现DAO接口:</h3><ol><li><p>Mapper自动实现DAO接口(推荐)<br> 我知道有一种是通过MyEclipse实现接口的方式,用起来挺爽的.但是不利于我们对设计接口的理解.</p><p> 关注点:SQL如何编写,如何去设计DAO接口.节省了很多需要维护的程序.所有的实现都是mybatis自动完成.</p></li><li>API编程的方式实现DAO接口<br> 你可能会遗漏一些东西…影响工作效率</li></ol><h2 id="mybatis实现DAO编程"><a href="#mybatis实现DAO编程" class="headerlink" title="mybatis实现DAO编程"></a>mybatis实现DAO编程</h2><h3 id="mybatis官方文档地址"><a href="#mybatis官方文档地址" class="headerlink" title="mybatis官方文档地址"></a>mybatis官方文档地址</h3><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方链接</a></p><p>驼峰命名转换:不用关心列名到属性名的转换了.</p><p>配置文件如下:</p><h4 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!--1.配置全局属性--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!--使用JDBC的getGenerateKeys 获取数据库自增主键值,默认是false--&gt;</span><br><span class="line">        &lt;setting name=&quot;useGeneratekeys&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;!--使用列别名替换别名,默认是true</span><br><span class="line">            select name as title from table</span><br><span class="line">            列名name取得的列别名是title,mybatis会自动识别</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;setting name=&quot;useColumnLable&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;!--开启驼峰命名转换:Table(create_time)转为 Entity(createtime)--&gt;</span><br><span class="line">        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="配置文件mapper-xml-的书写"><a href="#配置文件mapper-xml-的书写" class="headerlink" title="配置文件mapper.xml 的书写"></a>配置文件mapper.xml 的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.引入方法内部的参数</span><br><span class="line">就跟HQL里里面的? 有类似之处</span><br><span class="line">#&#123;xxx&#125;  xxx是方法里面的参数</span><br><span class="line"></span><br><span class="line">2.mybatis配置的xml文件内部不能识别的符号的改写方法</span><br><span class="line">&gt;=</span><br><span class="line">配置文件中不允许有&gt;=符号的出现,允许下面这种写法:</span><br><span class="line">&lt;![CDATA[ &lt;= ]]&gt;</span><br><span class="line">为了防止冲突,就是告诉 &lt;= 不是xml的语法</span><br><span class="line"></span><br><span class="line">3.resultType--实体类名 parameterType-参数类型</span><br><span class="line"></span><br><span class="line">多个参数并不用加上parameterType</span><br><span class="line"></span><br><span class="line">4.解决主键冲突的话,可能出现错误:</span><br><span class="line"></span><br><span class="line">需要在insert into 中间加上ignore,即:insert ignore into 这样重复插入的话,就会插入不成功.返回插入的数=0</span><br><span class="line"></span><br><span class="line">5.解决mybatis把结果映射到表中同时映射表内部的实体问题</span><br><span class="line"></span><br><span class="line">可以利用内连接(inner join)来解决这个问题.</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from s s1</span><br><span class="line">inner join e e1 on s1.id = e1.id</span><br><span class="line">where s1.id =#&#123;Id&#125;</span><br></pre></td></tr></table></figure><p><strong>Mapper下的两个映射文件:</strong></p><h4 id="SeckillDao-xml"><a href="#SeckillDao-xml" class="headerlink" title="SeckillDao.xml"></a>SeckillDao.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;org.seckill.dao.SecKillDao&quot;&gt;</span><br><span class="line">    &lt;!--目的:为DAO接口方法提供SQL语句配置--&gt;</span><br><span class="line">    &lt;!--id就是方法名,看你的方法要执行什么操作了--&gt;</span><br><span class="line">    &lt;update id=&quot;reduceNumber&quot;&gt;</span><br><span class="line">        &lt;!--具体的SQL--&gt;</span><br><span class="line">        UPDATE seckill</span><br><span class="line">        SET number = number-1</span><br><span class="line">        WHERE seckill_id=#&#123;seckillId&#125;</span><br><span class="line">        AND start_time &lt;![CDATA[ &lt;= ]]&gt; #&#123;killTime&#125;</span><br><span class="line">        AND end_time &gt;= #&#123;killTime&#125;</span><br><span class="line">        AND number &gt; 0;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;queryById&quot; resultType=&quot;Seckill&quot; parameterType=&quot;long&quot;&gt;</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM seckill</span><br><span class="line">        WHERE seckill_id=#&#123;seckillId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;queryAll&quot; resultType=&quot;Seckill&quot;&gt;</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM seckill</span><br><span class="line">        ORDER BY create_time DESC</span><br><span class="line">        limit #&#123;offset&#125;,#&#123;limit&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="SuccessKilledDao-xml"><a href="#SuccessKilledDao-xml" class="headerlink" title="SuccessKilledDao.xml"></a>SuccessKilledDao.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;org.seckill.dao.SuccessKilledDao&quot;&gt;</span><br><span class="line">    &lt;insert id=&quot;insertSuccessKilled&quot;&gt;</span><br><span class="line">        &lt;!--如果主键冲突,报错--&gt;</span><br><span class="line">        insert ignore into success_killed (seckill_id, user_phone,state)</span><br><span class="line">        values (#&#123;seckillId&#125;,#&#123;userPhone&#125;,0);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;select id=&quot;querySuccessKilledWithSeckill&quot; resultType=&quot;SuccessKilled&quot;&gt;</span><br><span class="line">        &lt;!--根据id查询Successkilled并携带Seckill实体--&gt;</span><br><span class="line">        &lt;!--如何告诉MyBatis把结果映射到SuccessKilled同时映射SecKill属性--&gt;</span><br><span class="line">        &lt;!--最重要的原因就是:可以自由的控制SQL--&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        sk.seckill_id,</span><br><span class="line">        sk.user_phone,</span><br><span class="line">        sk.create_time,</span><br><span class="line">        sk.state,</span><br><span class="line">        s.seckill_id &quot;seckill.seckill_id&quot;,</span><br><span class="line">        s.name &quot;seckill.name&quot;,</span><br><span class="line">        s.number &quot;seckill.number&quot;,</span><br><span class="line">        s.start_time &quot;seckill.start_time&quot;,</span><br><span class="line">        s.end_time &quot;seckill.end_time&quot;,</span><br><span class="line">        s.create_time &quot;seckill.create_time&quot;</span><br><span class="line">        FROM success_killed sk</span><br><span class="line">        INNER JOIN seckill s ON sk.seckill_id=s.seckill_id</span><br><span class="line">        WHERE sk.seckill_id=#&#123;seckillId&#125; and sk.user_phone=#&#123;userPhone&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="Mybatis整合Spring理论"><a href="#Mybatis整合Spring理论" class="headerlink" title="Mybatis整合Spring理论"></a>Mybatis整合Spring理论</h2><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.更少的编码</span><br><span class="line">    只写接口,不写实现类</span><br><span class="line">    接口本身就能说明很多事情</span><br><span class="line"></span><br><span class="line">    比如:Seckill queryById(long secKillID);</span><br><span class="line">        1.参数 --long</span><br><span class="line">        2.结果集 --SecKill</span><br><span class="line">        3.行为: query</span><br><span class="line">        根据上面的就可以写SQL,配置mapper.xml就可以了.</span><br><span class="line"></span><br><span class="line">2.更少的配置</span><br><span class="line">        1.别名</span><br><span class="line">               就比如:从resultType=&quot;Scekill&quot;来说吧,本来他应该写更长的名字才对,即resultType=&quot;org.seckill.dao.SecKillDao&quot;</span><br><span class="line">               但是可以简写的原因就是,mybatis帮我们实现了包扫描,即Package Scan</span><br><span class="line">        2.配置扫描</span><br><span class="line">              1.</span><br><span class="line">               &lt;mapper resource=&quot;mapper/SeckillDao.xml&quot;/&gt;</span><br><span class="line">               &lt;mapper resource=&quot;mapper/SuccessKilledDao.xml&quot;/&gt;</span><br><span class="line">                   ......</span><br><span class="line">                当有很多这样的配置文件的话,我们会很费劲的添加,但mybatis有一个自动扫描配置文件的功能.</span><br><span class="line">              2.dao实现</span><br><span class="line">              一般就是&lt;bean id = &quot;xxxDao&quot; class =&quot;xxx.xxx.dao&quot;/&gt;的形式配置交给Spring容器管理.</span><br><span class="line">              要是有很多这样的配置文件的时候,我们就需要些很多这样的配置.</span><br><span class="line"></span><br><span class="line">              mybatis可以自动实现DAO接口,统一叫Mapper,效率非常高,</span><br><span class="line"></span><br><span class="line">              但是不利于初学者的学习.我之前做的电商项目就是DAO用mybatis自动生成的文件.</span><br><span class="line">              因为出来一堆mapper,就是dao,和一堆映射文件xxxmapper.xml.</span><br><span class="line"></span><br><span class="line">              自动注入spring容器.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.足够的灵活性</span><br><span class="line">        1.自由定制SQL语句</span><br><span class="line">        2.自由传递传参</span><br><span class="line">        3.结果集自动赋值</span><br><span class="line"></span><br><span class="line">自由的传递参数,自由的返回实体的类型</span><br></pre></td></tr></table></figure><p><strong>XML提供SQL,DAO接口Mapper.</strong></p><p>这种方式很好</p><h2 id="mybatis整合spring编码"><a href="#mybatis整合spring编码" class="headerlink" title="mybatis整合spring编码"></a>mybatis整合spring编码</h2><h2 id="spring整合mybatis官方文档"><a href="#spring整合mybatis官方文档" class="headerlink" title="spring整合mybatis官方文档"></a>spring整合mybatis官方文档</h2><p><a href="https://docs.spring.io/spring/docs/4.1.7.RELEASE/spring-framework-reference/pdf/" target="_blank" rel="noopener">Spring4.1.7官方版本</a></p><p>取它的容器头部.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">    &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">    &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;!-- more bean definitions go here --&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>连接池的配置,</p><p>c3p0连接池的配置:comboolPoolDataSource<br>除了驱动类,URL,user,password之外.还有一些私有配置</p><p><code>maxPoolSize</code>,每一个数据库中池子的最大数:,默认是15.<br><code>minPoolSize</code>,默认是3.</p><p><code>autoCommitOnClose</code></p><p>连接池的Connection调用Close的时候,本质上是把连接对象放到池子当中,放到池子的过程当中,c3p0连接池要做一些清理工作.</p><p>当close连接的时候,不要commit</p><p><code>checkoutTimeOut</code><br>当maxPoolSize连接满的时候,等待连接的间隔时间,c3p0默认是0,无线等待.</p><p><code>acquireRetryAttempts</code><br>获取连接失败重试次数</p><p><code>&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</code><br>后边的那个value值就是sqlSessionFactory的名字.</p><p>当MapperScannerConfigure启动的时候,可能会出现jdbc.properties里面的东西还没有被加载,不能拿到SQLSessionFactory里面的参数.</p><p>当用到mybatis的时候,才会去找对应的SqlSessionFactory.</p><h4 id="spring-dao-xml配置"><a href="#spring-dao-xml配置" class="headerlink" title="spring-dao.xml配置"></a>spring-dao.xml配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--配置整合mybatis过程--&gt;</span><br><span class="line">    &lt;!--1:配置数据库相关参数</span><br><span class="line">        properties的属性: $&#123;url&#125;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;!--配置连接池属性--&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">        &lt;!--2:c3p0连接池的私有属性--&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;!--关闭连接后不自动commit--&gt;</span><br><span class="line">        &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;!--获取连接超时时间--&gt;</span><br><span class="line">        &lt;!--property name=&quot;checkoutTimeout&quot; value=&quot;8000&quot;/--&gt;</span><br><span class="line">        &lt;!--当获取连接失败重试次数--&gt;</span><br><span class="line">        &lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--3.配置SQLSessionFactory对象--&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--注入数据库连接池--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;!--配置mybatis全局配置文件:mybatis-config.xml--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">        &lt;!--扫描Entity包 使用别名 org.seckill.entity.Seckill同一的转换为Seckill使用</span><br><span class="line">            有多个包的时候,可以分开写:</span><br><span class="line">            value=&quot;org.seckill.entity;org.seckill.entity2&quot;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;org.seckill.entity&quot;/&gt;</span><br><span class="line">        &lt;!--扫描SQL配置文件:mapper需要的xml文件--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--4.配置扫描DAO接口包,动态实现Dao接口,并注入到Spring容器中.</span><br><span class="line">           可以看出这个类专门是扫描mapper的,而在mybatis中mapper就相当于dao</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;!--注入SQLSessionFactory--&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">        &lt;!--给出需要扫描Dao接口包--&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;org.seckill.dao&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="spring-与junit整合"><a href="#spring-与junit整合" class="headerlink" title="spring 与junit整合"></a>spring 与junit整合</h3><ol><li><p>ctrl+shift+t创建单元测试类</p></li><li><p>RunWith(SpringJunit4ClassRunner.class)//junit启动时加载springIOC容器.</p></li><li><p>@Resource不管用,改用@Autowired</p></li><li><p>QueryAll方法测试遇到下面的<strong>绑定参数</strong>异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Parameter &apos;offset&apos; not found. Available parameters are [0, 1, param1, param2]</span><br></pre></td></tr></table></figure></li></ol><p>需要加上@Param(“实际形参”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Seckill&gt; queryAll(@Param(&quot;offset&quot;) int offset, @Param(&quot;limit&quot;) int limit);</span><br></pre></td></tr></table></figure></p><h3 id="SeckillDaoTest测试"><a href="#SeckillDaoTest测试" class="headerlink" title="SeckillDaoTest测试:"></a>SeckillDaoTest测试:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 配置Spring和junit整合,junit启动时加载springIOC容器</span><br><span class="line"> * spring-test,junit</span><br><span class="line"> */</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">//告诉junitspring配置文件的位置</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span><br><span class="line">public class SecKillDaoTest &#123;</span><br><span class="line">    //注入Dao</span><br><span class="line">    @Autowired</span><br><span class="line">    private SecKillDao secKillDao;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  Preparing: SELECT seckill.seckill_id,seckill.name,seckill.number,seckill.start_time,seckill.end_time,seckill.create_time</span><br><span class="line">     *  FROM seckill</span><br><span class="line">     *  WHERE seckill.seckill_id = ?;</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void queryById() throws Exception &#123;</span><br><span class="line">        long id=1000L;</span><br><span class="line">        Seckill seckill = secKillDao.queryById(id);</span><br><span class="line">        System.out.println(seckill);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void reduceNumber() throws Exception &#123;</span><br><span class="line">        Date killTime=new Date();</span><br><span class="line">        int updateNumber= secKillDao.reduceNumber(1000L, killTime);</span><br><span class="line">        System.out.println(&quot;updateNumber=&quot;+updateNumber);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void queryAll() throws Exception &#123;</span><br><span class="line">        List&lt;Seckill&gt; seckills = secKillDao.queryAll(2, 100);</span><br><span class="line">        for (Seckill seckill : seckills) &#123;</span><br><span class="line">            System.out.println(seckill);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SuccessKilledTest测试"><a href="#SuccessKilledTest测试" class="headerlink" title="SuccessKilledTest测试:"></a>SuccessKilledTest测试:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)</span><br><span class="line">public class SuccessKilledDaoTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SuccessKilledDao successKilledDao;</span><br><span class="line">    @Test</span><br><span class="line">    public void insertSuccessKilled() throws Exception &#123;</span><br><span class="line">        long id=1000L;</span><br><span class="line">        long phone=13784832725L;</span><br><span class="line">        int updateSuccessedKilled = successKilledDao.insertSuccessKilled(id, phone);</span><br><span class="line">        System.out.println(updateSuccessedKilled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Preparing:</span><br><span class="line">     * SELECT sk.seckill_id, sk.create_time, sk.state, sk.user_phone, s.seckill_id &quot;seckill.seckill_id&quot;, s.name &quot;seckill_name&quot;, s.number &quot;seckill_number&quot;, s.start_time &quot;seckill_start_time&quot;, s.end_time &quot;seckill_end_time&quot;, s.create_time &quot;seckill_create_time&quot;</span><br><span class="line">     * FROM success_killed sk</span><br><span class="line">     * INNER JOIN seckill s ON sk.seckill_id = s.seckill_id</span><br><span class="line">     * WHERE sk.seckill_id = ? AND sk.user_phone = ?;</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void querySuccessKilledWithSeckill() throws Exception &#123;</span><br><span class="line">        long id=1001L;</span><br><span class="line">        long phone=15733207536L;</span><br><span class="line">        SuccessKilled successKilled = successKilledDao.querySuccessKilledWithSeckill(id,phone);</span><br><span class="line">        System.out.println(successKilled);</span><br><span class="line">        System.out.println(successKilled.getSeckill());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Seckill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springData-03</title>
      <link href="/2017/12/01/SpringData-03/"/>
      <url>/2017/12/01/SpringData-03/</url>
      <content type="html"><![CDATA[<h2 id="CrudRepository接口的使用"><a href="#CrudRepository接口的使用" class="headerlink" title="CrudRepository接口的使用"></a>CrudRepository接口的使用</h2><p>CrudRepository接口分为下面的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">save(entity)</span><br><span class="line">findOne(id)</span><br><span class="line">findAll()</span><br><span class="line">delete(entity)</span><br><span class="line">deleteAll()</span><br><span class="line">save (entites)</span><br><span class="line">exists(id)</span><br><span class="line">delete(id)</span><br><span class="line">delete(entities)</span><br></pre></td></tr></table></figure></p><p>save方法使用测试:</p><p>code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">自定义的接口</span><br><span class="line">public interface EmployeeCrudRepository extends CrudRepository&lt;Employee,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EmployeeCrudService类</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class EmployeeCrudService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EmployeeCrudRepository employeeCrudRepository;</span><br><span class="line"></span><br><span class="line">    @Transactional(rollbackOn = Exception.class)</span><br><span class="line">    public void save(List&lt;Employee&gt; employees)&#123;</span><br><span class="line">        employeeCrudRepository.save(employees);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TestCode </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void test2() &#123;</span><br><span class="line">       List&lt;Employee&gt; employees = new ArrayList&lt;&gt;();</span><br><span class="line">       Employee e = null;</span><br><span class="line">       for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">           e = new Employee();</span><br><span class="line">           e.setName(&quot;name&quot; + i);</span><br><span class="line">           e.setAge(100 - i);</span><br><span class="line">           employees.add(e);</span><br><span class="line">       &#125;</span><br><span class="line">       employee.save(employees);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="PagingAndSortingRepository接口使用"><a href="#PagingAndSortingRepository接口使用" class="headerlink" title="PagingAndSortingRepository接口使用"></a>PagingAndSortingRepository接口使用</h2><ol><li>该接口包含分页和排序的功能</li><li>带排序的查询:findAll(Sort sort)</li><li>带排序的分页查询:findAll(Pageable pageable)</li></ol><p>源码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@NoRepositoryBean</span><br><span class="line">public interface PagingAndSortingRepository&lt;T, ID extends Serializable&gt; extends CrudRepository&lt;T, ID&gt; &#123;</span><br><span class="line">Iterable&lt;T&gt; findAll(Sort sort);//返回所有的实体</span><br><span class="line">Page&lt;T&gt; findAll(Pageable pageable);//返回所有的page对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pageable这个接口的实现类有PageRequest,里面有设置页数以及每页显示多少条的方法.</span><br><span class="line">PageRequest(Integer page,Integer size);</span><br></pre></td></tr></table></figure><p>写一个接口</p><p>测试类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        //page:当前页数,它是按照索引(index=0.....)来算的  size:每页显示的条数</span><br><span class="line">        PageRequest pageable = new PageRequest(0,5);</span><br><span class="line">        Page&lt;Employee&gt; page = employeePagingAndSortingRepository.findAll(pageable);</span><br><span class="line">        System.out.println(page.getTotalPages());//一共有多少页</span><br><span class="line">        System.out.println(page.getTotalElements());//总记录数</span><br><span class="line">        System.out.println(page.getContent());//显示当前页的数据内容</span><br><span class="line">        System.out.println(page.getNumber()+1);//当前是第1页,不过它是从第0页算起的.</span><br><span class="line">        System.out.println(page.getSize());//每页的页数</span><br><span class="line">        System.out.println(page.getSort());</span><br><span class="line">        System.out.println(page.getNumberOfElements());</span><br><span class="line">        /**</span><br><span class="line">         * </span><br><span class="line">         20</span><br><span class="line">         100</span><br><span class="line">         [com.springdata.domain.Employee@5707f613, com.springdata.domain.Employee@68b11545, com.springdata.domain.Employee@7d0100ea, com.springdata.domain.Employee@357bc488, com.springdata.domain.Employee@4ea17147]</span><br><span class="line">         0</span><br><span class="line">         5</span><br><span class="line">         null</span><br><span class="line">         5</span><br><span class="line">         */</span><br><span class="line">         </span><br><span class="line">其中page.getContent()我们得到的是一组哈希码数组.所以需要我们生成实体类的ToString()方法</span><br><span class="line"></span><br><span class="line">得到的结果是:</span><br><span class="line"></span><br><span class="line">[Employee&#123;id=1, name=&apos;name0&apos;, age=100&#125;, Employee&#123;id=2, name=&apos;name1&apos;, age=99&#125;, Employee&#123;id=3, name=&apos;name2&apos;, age=98&#125;, Employee&#123;id=4, name=&apos;name3&apos;, age=97&#125;, Employee&#123;id=5, name=&apos;name4&apos;, age=96&#125;]</span><br></pre></td></tr></table></figure></p><p>下面进行排序的测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">每页显示5列数据,按照id降序排列</span><br><span class="line">@Test</span><br><span class="line">    public void testSort()&#123;</span><br><span class="line">        //按照id字段降序排列</span><br><span class="line">        Sort.Order order = new Sort.Order(Sort.Direction.DESC, &quot;id&quot;);</span><br><span class="line">        Sort sort = new Sort(order);</span><br><span class="line">        PageRequest pageRequest = new PageRequest(0,5,sort);</span><br><span class="line">        Page&lt;Employee&gt; page = employeePagingAndSortingRepository.findAll(pageRequest);</span><br><span class="line"></span><br><span class="line">        System.out.println(page.getContent());</span><br><span class="line">    //[Employee&#123;id=100, name=&apos;name99&apos;, age=1&#125;, Employee&#123;id=99, name=&apos;name98&apos;, age=2&#125;, Employee&#123;id=98, name=&apos;name97&apos;, age=3&#125;, Employee&#123;id=97, name=&apos;name96&apos;, age=4&#125;, Employee&#123;id=96, name=&apos;name95&apos;, age=5&#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="JpaRepository接口的使用"><a href="#JpaRepository接口的使用" class="headerlink" title="JpaRepository接口的使用"></a>JpaRepository接口的使用</h2><p>包括如下方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface JpaRepository&lt;T, ID extends Serializable&gt; extends PagingAndSortingRepository&lt;T, ID&gt; &#123;&#125;</span><br><span class="line">1.findAll查询所有实体</span><br><span class="line">2.save(entity)增加实体</span><br><span class="line">3.findAll(Sort sort)支持排序</span><br><span class="line">4.flush</span><br><span class="line">5.deleteInBatch(entities)删除实体</span><br></pre></td></tr></table></figure><p>自定义接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface EmployeeJpaRepository extends JpaRepository&lt;Employee,Integer&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void test()&#123;</span><br><span class="line">      //查询ID为99的Employee内容</span><br><span class="line">      Employee one = employeeJpaRepository.findOne(99);</span><br><span class="line">      System.out.println(one);</span><br><span class="line"></span><br><span class="line">      //检查id=?的内容是否存在</span><br><span class="line">      System.out.println(employeeJpaRepository.exists(2));</span><br><span class="line">      System.out.println(employeeJpaRepository.exists(122));</span><br><span class="line">      Sort.Order id = new Sort.Order(Sort.Direction.DESC, &quot;id&quot;);</span><br><span class="line">      Sort orders = new Sort(id);</span><br><span class="line">      List&lt;Employee&gt; list = employeeJpaRepository.findAll(orders);</span><br><span class="line">      for (Employee employee : list) &#123;</span><br><span class="line">          System.out.println(employee);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(employeeJpaRepository.count());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="JpaSpecificationExecutor接口"><a href="#JpaSpecificationExecutor接口" class="headerlink" title="JpaSpecificationExecutor接口"></a>JpaSpecificationExecutor接口</h2><p>Specification封装了JPA Criteria查询条件.</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-8ea911c6d485fac5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Specification接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Specification&lt;T&gt; &#123;</span><br><span class="line">Predicate toPredicate(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Specification的实现类</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-e9305558a4afc5fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>自定义接口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 继承多个接口,使其功能性更加强大</span><br><span class="line"> */</span><br><span class="line">public interface EmployeeJpaSpecificationExecutor extends JpaSpecificationExecutor&lt;Employee&gt;,JpaRepository&lt;Employee,Integer&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springdata </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springData-02</title>
      <link href="/2017/12/01/SpringData-02/"/>
      <url>/2017/12/01/SpringData-02/</url>
      <content type="html"><![CDATA[<h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--SpringData--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.8.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.3.6.Final&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="书写beans-xml"><a href="#书写beans-xml" class="headerlink" title="书写beans.xml"></a>书写beans.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;</span><br><span class="line">       xmlns:jpa=&quot;http://www.springframework.org/schema/data/jpa&quot;</span><br><span class="line"></span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">          http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span><br><span class="line">          http://www.springframework.org/schema/context</span><br><span class="line">          http://www.springframework.org/schema/context/spring-context-3.1.xsd</span><br><span class="line">          http://www.springframework.org/schema/aop</span><br><span class="line">          http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span><br><span class="line">          http://www.springframework.org/schema/tx</span><br><span class="line">          http://www.springframework.org/schema/tx/spring-tx-3.1.xsd</span><br><span class="line">          http://www.springframework.org/schema/cache</span><br><span class="line">          http://www.springframework.org/schema/cache/spring-cache-3.1.xsd</span><br><span class="line">          http://www.springframework.org/schema/data/jpa</span><br><span class="line">          http://www.springframework.org/schema/data/jpa/spring-jpa.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--1.配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://192.168.25.131:3306/spring_data&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--2.配置EntityManagerFactory--&gt;</span><br><span class="line">    &lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;jpaVendorAdapter&quot; value=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;/&gt;</span><br><span class="line">        &lt;!--配置扫描包--&gt;</span><br><span class="line">        &lt;property name=&quot;packagesToScan&quot;  value=&quot;com.springdata&quot;/&gt;</span><br><span class="line">        &lt;!--jpa的一些属性--&gt;</span><br><span class="line">        &lt;property name=&quot;jpaProperties&quot;&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;!--ejb语言的策略--&gt;</span><br><span class="line">                &lt;prop key=&quot;hibernate.ejb.naming_strategy&quot;&gt;org.hibernate.cfg.ImprovedNamingStrategy&lt;/prop&gt;</span><br><span class="line">                &lt;!--数据库的方言采用的是mysqlInnoDB存储引擎--&gt;</span><br><span class="line">                &lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/prop&gt;</span><br><span class="line">                &lt;!--执行显示SQL--&gt;</span><br><span class="line">                &lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</span><br><span class="line">                &lt;!--自动格式化SQL--&gt;</span><br><span class="line">                &lt;prop key=&quot;hibernate.format_sql&quot;&gt;true&lt;/prop&gt;</span><br><span class="line">                &lt;!--根据实体自动创建表--&gt;</span><br><span class="line">                &lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="书写实体类"><a href="#书写实体类" class="headerlink" title="书写实体类"></a>书写实体类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需要三个注解:</span><br><span class="line"></span><br><span class="line">1.在类上使用@Entity,声明这个类是实体类</span><br><span class="line">2.在get方法上用@ID标识该属性为主键</span><br><span class="line">              @GeneratedValue产生策略是自增</span><br></pre></td></tr></table></figure><p>实体类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Employee &#123;</span><br><span class="line"></span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    @GeneratedValue</span><br><span class="line">    @Id</span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    @Column(length = 20)</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动建表的实现"><a href="#自动建表的实现" class="headerlink" title="自动建表的实现"></a>自动建表的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改表中某一字段的长度</span><br><span class="line">drop table employee;</span><br><span class="line"></span><br><span class="line">在实体类上的那个修改的成员变量的get方法上加上@Column(length=20)就可以改变它的长度了.一般字符串类型的长度默认是255.</span><br></pre></td></tr></table></figure><p>测试类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Before</span><br><span class="line">   public void testBefore() &#123;</span><br><span class="line">       context = new ClassPathXmlApplicationContext(&quot;beans-new.xml&quot;);</span><br><span class="line">       System.out.println(&quot;先获得配置文件&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   @Test</span><br><span class="line">   public void testSpringDataJpa()&#123;</span><br><span class="line">       System.out.println(&quot;我要自动建表了-------------&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="beans-new-xml其他配置"><a href="#beans-new-xml其他配置" class="headerlink" title="beans-new.xml其他配置"></a>beans-new.xml其他配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--3.配置事务管理器--&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--4.配置支持注解的事务--&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--5.配置SpringData--&gt;</span><br><span class="line">    &lt;jpa:repositories base-package=&quot;com.springdata&quot; entity-manager-factory-ref=&quot;entityManagerFactory&quot;/&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.springdata&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="测试上面的那些配置"><a href="#测试上面的那些配置" class="headerlink" title="测试上面的那些配置"></a>测试上面的那些配置</h2><p>实现类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface EmployeeRepository extends Repository&lt;Employee, Integer&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Respository里面的那两个参数就是:1.实体类 2.主键的ID(类型)</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">     public Employee findByName(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class SpringDataTest &#123;</span><br><span class="line">    private ClassPathXmlApplicationContext context;</span><br><span class="line">    private EmployeeRepository employeeRepository;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">        先装载配置</span><br><span class="line">    */</span><br><span class="line">    @Before</span><br><span class="line">    public void Setup()&#123;</span><br><span class="line">        context = new ClassPathXmlApplicationContext(&quot;beans-new.xml&quot;);</span><br><span class="line">        employeeRepository = context.getBean(EmployeeRepository.class);</span><br><span class="line">        System.out.println(&quot;setup&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">     /**</span><br><span class="line">          执行测试</span><br><span class="line">      */</span><br><span class="line">    @Test</span><br><span class="line">    public void testFindbyName()&#123;</span><br><span class="line">        Employee employee = employeeRepository.findByName(&quot;xiaoming&quot;);</span><br><span class="line">        System.out.println(&quot;ID:&quot;+employee.getId()+&quot;姓名:&quot;+employee.getName()+&quot;年龄:&quot;+employee.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">        销毁</span><br><span class="line">     */</span><br><span class="line">    @After</span><br><span class="line">    public void tearDown()&#123;</span><br><span class="line">        context=null;</span><br><span class="line">        System.out.println(&quot;tearDown&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        employee0_.id as id1_0_,</span><br><span class="line">        employee0_.age as age2_0_,</span><br><span class="line">        employee0_.name as name3_0_ </span><br><span class="line">    from</span><br><span class="line">        employee employee0_ </span><br><span class="line">    where</span><br><span class="line">        employee0_.name=?</span><br><span class="line">        </span><br><span class="line">上面是测试执行产生的SQL语句</span><br><span class="line">可以看出它查询的时候,查询了3个字段,并且给employee起来个别名employee0_ </span><br><span class="line">并且是根据name字段来查询的.</span><br><span class="line"></span><br><span class="line">因为我们的配置设置了执行产生的SQL语句了.</span><br><span class="line">即:</span><br><span class="line"> &lt;!--执行显示SQL--&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</span><br><span class="line">&lt;!--自动格式化SQL--&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.format_sql&quot;&gt;true&lt;/prop&gt;</span><br></pre></td></tr></table></figure><p>但是值得注意的是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询的时候的方法的名字,不能随心所欲的起了.</span><br><span class="line">比如你要把findByName()方法改成test()方法,他就执行不成功了.</span><br><span class="line">所以,代码必须按照要按照一定的规则来设置.</span><br></pre></td></tr></table></figure><h2 id="关于Repository核心接口的认识"><a href="#关于Repository核心接口的认识" class="headerlink" title="关于Repository核心接口的认识"></a>关于Repository核心接口的认识</h2><p>CrudRepository:就是执行save/insert/delete操作.</p><p>PagingAndSortingRepository:分页和排序:每页的显示和按照关键字的排序</p><p>jpaRepository:jpa的一些东西</p><p>jpaSpecificationExecutor:一些其他的东西</p><p>Repository接口源码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package org.springframework.data.repository;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public interface Repository&lt;T, ID extends Serializable&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标记接口"><a href="#标记接口" class="headerlink" title="标记接口"></a>标记接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以看出里面就一个空接口,没提供任何方法.那Repository就是一个标记接口</span><br><span class="line">T就是你的目标实体类,</span><br><span class="line">ID就是那个实体类当中的ID(主键)的类型</span><br></pre></td></tr></table></figure><p>类似的,我们可以看一下Serializable接口的形式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">public interface Serializable &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">他没有任何方法,</span><br><span class="line">同样的Serializable也是一个标记接口.</span><br><span class="line">````   </span><br><span class="line">            </span><br><span class="line">#### 自定义接口使用的过程</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line"> 之前使用的那个接口.</span><br><span class="line"> public interface EmployeeRepository extends Repository&lt;Employee, Integer&gt;&#123;</span><br><span class="line">        employeeRepository.findByName(String name);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">他在测试类中的使用:</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line">context = new ClassPathXmlApplicationContext(&quot;beans-new.xml&quot;);</span><br><span class="line">EmployeeRepository employeeRepository = context.getBean(EmployeeRepository.class);</span><br><span class="line">Employee employee = employeeRepository.findByName(&quot;xiaoming&quot;);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">我们可以打印出来看一下这个employeeRepository</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line">org.springframework.data.jpa.repository.support.SimpleJpaRepository@2bfaba70</span><br><span class="line">显示这个就说明你定义的那个接口EmployeeRepository已经被Spring容器所管理,可以被使用了.</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">#### 如果自定义接口没有继承官方提供的Repository&lt;T,ID&gt;接口,会出现错误</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line">就是下面这个错误</span><br><span class="line">org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &apos;com.springdata.repository.EmployeeRepository&apos; available</span><br><span class="line"></span><br><span class="line">此类型的Bean无效,说明自定义的接口没有被Spring容器管理.</span><br><span class="line"></span><br><span class="line">此时我们可以使用@RepositoryDefinition(domainClass,idclass)</span><br><span class="line"></span><br><span class="line">注解的源码如下:</span><br><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Inherited</span><br><span class="line">public @interface RepositoryDefinition &#123;</span><br><span class="line">    Class&lt;?&gt; domainClass();</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Serializable&gt; idClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">所以我们可以下列的设置:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">@RepositoryDefinition(domainClass = Employee.class,idClass = Integer.class)</span><br><span class="line">public interface EmployeeRepository &#123;</span><br><span class="line">    /**</span><br><span class="line">     * extends Repository&lt;Employee, Integer&gt;</span><br><span class="line">     * Respository里面的那两个参数就是:1.实体类 2.主键的ID(类型)</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">     public Employee findByName(String name);</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">### Repository的子接口</span><br><span class="line"></span><br><span class="line">CrudRepository:继承Repository,实现了CRUD的相关方法</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/7505161-0b283ab8f5c168b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/7505161-c1f6c80553a1313c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">jpaRepository:继承了PagingAndsortingRepository,实现了JPA规范的相关方法.</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/7505161-87bdc782bde6550d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">PagingAndSortingRepository:继承CrudRepository,实现了分页排序的相关的方法.</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/7505161-820c87ab0c846938.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">分为两个方法:1.可以根据具体的字段来排序2.第二个是分页的类</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/7505161-1149625b935d0742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">### Repository中查询方法定义规则和使用</span><br><span class="line"></span><br><span class="line"> 1. 了解SpringData中查询方法名称的定义规则</span><br><span class="line"> </span><br><span class="line"> 2. 使用SpringData完成复杂查询方法的命名</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/7505161-12d94ed91d010f92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/7505161-87f22b1868632f24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">分析:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">关键字         具体方法        翻译成的SQL语句</span><br><span class="line">如果不按上弄规则来写,会出现异常.</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">下面插入数据,进行测试</span><br></pre></td></tr></table></figure><p>insert into employee(name,age) values(“test1”,20)<br>insert into employee(name,age) ]values(“test2”,21)<br>insert into employee(name,age) values(“test3”,22)<br>insert into employee(name,age) values(“test4”,23)<br>insert into employee(name,age) values(“test5”,20)<br>insert into employee(name,age) values(“test6”,21)<br>insert into employee(name,age) values(“test7”,22)<br>insert into employee(name,age) values(“test8”,23)<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**按照特定命名的方法规则来进行查询**</span><br><span class="line"></span><br><span class="line">EmployeeRepository接口</span><br><span class="line"></span><br><span class="line">````androiddatabinding</span><br><span class="line">@RepositoryDefinition(domainClass = Employee.<span class="built_in">class</span>,idClass = Integer.<span class="built_in">class</span>)</span><br><span class="line">public interface EmployeeRepository &#123;</span><br><span class="line">    /**</span><br><span class="line">     * extends Repository&lt;Employee, Integer&gt;</span><br><span class="line">     * Respository里面的那两个参数就是:<span class="number">1.</span>实体类 <span class="number">2.</span>主键的ID(类型)</span><br><span class="line">     * @param <span class="built_in">name</span></span><br><span class="line">     * @<span class="literal">return</span></span><br><span class="line">     */</span><br><span class="line">     public Employee findByName(String <span class="built_in">name</span>);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">where</span> <span class="built_in">name</span> like ?% <span class="keyword">and</span> age &lt;?</span><br><span class="line">     * <span class="built_in">name</span>以XXx开始 &amp;&amp; age&lt;xxx</span><br><span class="line">     * @param <span class="built_in">name</span></span><br><span class="line">     * @param age</span><br><span class="line">     * @<span class="literal">return</span> 符合条件的employee列表</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Employee&gt; findByNameStartingWithAndAgeLessThan(String <span class="built_in">name</span>, Integer age);</span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">where</span> <span class="built_in">name</span> like %? <span class="keyword">and</span> age &lt;?</span><br><span class="line">     * <span class="built_in">name</span>以XXX结束&amp;&amp; age&lt;xxx</span><br><span class="line">     * @param <span class="built_in">name</span></span><br><span class="line">     * @param age</span><br><span class="line">     * @<span class="literal">return</span></span><br><span class="line">     */</span><br><span class="line">    public List&lt;Employee&gt; findByNameEndingWithAndAgeLessThan(String <span class="built_in">name</span>, Integer age);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">where</span> <span class="built_in">name</span> <span class="keyword">in</span>(?,?......)<span class="keyword">or</span> age &lt; ?</span><br><span class="line">     * <span class="built_in">name</span>在某个集合范围之内,或者age&lt;xxx</span><br><span class="line">     * @param <span class="built_in">name</span></span><br><span class="line">     * @param age</span><br><span class="line">     * @<span class="literal">return</span></span><br><span class="line">     */</span><br><span class="line">    public List&lt;Employee&gt; findByNameInOrAgeLessThan(List&lt;String&gt; <span class="built_in">name</span>,Integer age);</span><br><span class="line">    /**</span><br><span class="line">     * <span class="keyword">where</span> <span class="built_in">name</span> <span class="keyword">in</span>(?,?......)<span class="keyword">and</span> age &lt; ?</span><br><span class="line">     * <span class="built_in">name</span>在某个集合范围之内,并且age&lt;xxx</span><br><span class="line">     * @param <span class="built_in">name</span></span><br><span class="line">     * @param age</span><br><span class="line">     * @<span class="literal">return</span></span><br><span class="line">     */</span><br><span class="line">    public List&lt;Employee&gt; findByNameInAndAgeLessThan(List&lt;String&gt; <span class="built_in">name</span>,Integer age);</span><br></pre></td></tr></table></figure></p><p>测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void test1()&#123;</span><br><span class="line">     /* System.out.println(employeeRepository);</span><br><span class="line">      employee = employeeRepository.findByName(&quot;xiaoming&quot;);*/</span><br><span class="line">      /*List&lt;Employee&gt; list = employeeRepository.findByNameEndingWithAndAgeLessThan(&quot;ong&quot;, 30);*/</span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">      list.add(&quot;test1&quot;);</span><br><span class="line">      list.add(&quot;test2&quot;);</span><br><span class="line">      list.add(&quot;test3&quot;);</span><br><span class="line">      list.add(&quot;test4&quot;);</span><br><span class="line">      List&lt;Employee&gt; employees = employeeRepository.findByNameInOrAgeLessThan(list, 22);</span><br><span class="line">      for (Employee employee : employees) &#123;</span><br><span class="line">          System.out.println(&quot;ID是&quot;+employee.getId()+&quot; 姓名是:&quot;+employee.getName()+&quot; 年龄是&quot;+employee.getAge());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @Test</span><br><span class="line">  public void test2()&#123;</span><br><span class="line">      List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">      list.add(&quot;test1&quot;);</span><br><span class="line">      list.add(&quot;test2&quot;);</span><br><span class="line">      list.add(&quot;test3&quot;);</span><br><span class="line">      list.add(&quot;test4&quot;);</span><br><span class="line">      List&lt;Employee&gt; employees = employeeRepository.findByNameInAndAgeLessThan(list, 22);</span><br><span class="line">      for (Employee employee : employees) &#123;</span><br><span class="line">          System.out.println(&quot;ID是&quot;+employee.getId()+&quot; 姓名是:&quot;+employee.getName()+&quot; 年龄是&quot;+employee.getAge());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Query注解的使用"><a href="#Query注解的使用" class="headerlink" title="Query注解的使用"></a>Query注解的使用</h3><p>1.在Repository方法中使用,不需要遵循查询方法命名规则.</p><ol><li><p>需要将@Query定义在Repository中的方法之上即可.</p></li><li><p>命名参数及索引参数的使用.</p></li><li><p>本地查询</p></li></ol><p>实现Code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * select t1 from Employee t1</span><br><span class="line">    * 里面的Employee是类名</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Query(&quot;select o from Employee o where id=(select max(id) from Employee t)&quot;)</span><br><span class="line">   public Employee getEmployeeByMaxId();</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * ?是占位符</span><br><span class="line">    * @param name</span><br><span class="line">    * @param age</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Query(&quot;select o from Employee o where o.name=?1 and o.age=?2&quot;)</span><br><span class="line">   public List&lt;Employee&gt; queryParams(String name,Integer age);</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    *  :name</span><br><span class="line">    *  与@Param(&quot;name&quot;)</span><br><span class="line">    *  :后面的内容要和@Param()里面的内容一致.</span><br><span class="line">    * @param name</span><br><span class="line">    * @param age</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Query(&quot;select o from Employee o where o.name=:name and o.age=:age&quot;)</span><br><span class="line">   public List&lt;Employee&gt; queryParams2(@Param(&quot;name&quot;) String name,@Param(&quot;age&quot;) Integer age);</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 模糊查询:除了关键字不一致,其他都一样</span><br><span class="line">    * @param name</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Query(&quot;select o from  Employee o where o.name like %?1%&quot;)</span><br><span class="line">   public List&lt;Employee&gt; queryByLike(String name);</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 用 :name 取代 ?1,但是需要在参数前面加上@Param(&quot;name&quot;)</span><br><span class="line">    * @param name</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Query(&quot;select o from Employee o where o.name like %:name%&quot;)</span><br><span class="line">   public List&lt;Employee&gt; queryByLike2(@Param(&quot;name&quot;) String name);</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 本地查询的实现</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Query(nativeQuery = false,value = &quot;select count(1) from Employee&quot;)</span><br><span class="line">   public Long getCount();</span><br></pre></td></tr></table></figure><p>测试Code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void test3()&#123;</span><br><span class="line">       Employee employee = employeeRepository.getEmployeeByMAxId();</span><br><span class="line">           System.out.println(&quot;ID是&quot;+employee.getId()+&quot; 姓名是:&quot;+employee.getName()+&quot; 年龄是&quot;+employee.getAge());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void test4()&#123;</span><br><span class="line">       List&lt;Employee&gt; list = employeeRepository.queryParams(&quot;xiaoming&quot;, 10);</span><br><span class="line">       for (Employee employee : list) &#123;</span><br><span class="line">           System.out.println(&quot;ID是&quot;+employee.getId()+&quot; 姓名是:&quot;+employee.getName()+&quot; 年龄是&quot;+employee.getAge());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   @Test</span><br><span class="line">   public void test5()&#123;</span><br><span class="line">       List&lt;Employee&gt; list = employeeRepository.queryParams2(&quot;xiaoming&quot;, 10);</span><br><span class="line">       for (Employee employee : list) &#123;</span><br><span class="line">           System.out.println(&quot;ID是&quot;+employee.getId()+&quot; 姓名是:&quot;+employee.getName()+&quot; 年龄是&quot;+employee.getAge());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   @Test</span><br><span class="line">   public void test6()&#123;</span><br><span class="line">       List&lt;Employee&gt; list = employeeRepository.queryByLike2(&quot;test&quot;);</span><br><span class="line">       for (Employee employee : list) &#123;</span><br><span class="line">           System.out.println(&quot;ID是&quot;+employee.getId()+&quot; 姓名是:&quot;+employee.getName()+&quot; 年龄是&quot;+employee.getAge());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 本地查询的测试</span><br><span class="line">    */</span><br><span class="line">   @Test </span><br><span class="line">   public void test7()&#123;</span><br><span class="line">       Long count = employeeRepository.getCount();</span><br><span class="line">       System.out.println(count);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="更新及删除操作整合事务的使用"><a href="#更新及删除操作整合事务的使用" class="headerlink" title="更新及删除操作整合事务的使用"></a>更新及删除操作整合事务的使用</h4><p>@Modifying注解使用:加上表示允许修改值<br>@Modifying结合@Query注解执行更新操作.<br>@Transaction在事务中的使用</p><p>但是事务一般是在Service层中发生的.一个Service里面可能有多个Dao的调用,必须保证多个dao在同一个事务里面,<br>比如说银行存钱,取钱的操作.事务一定要保证准确.</p><p>更新操作&amp;&amp;删除操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 再次注意Employee是类名,不是表名.</span><br><span class="line">    * @param name</span><br><span class="line">    * @param id</span><br><span class="line">    */</span><br><span class="line">   @Modifying</span><br><span class="line">   @Query(&quot;update Employee o set o.name = :name where o.id =:id&quot;)</span><br><span class="line">   public void updateNameById(@Param(&quot;name&quot;) String name,@Param(&quot;id&quot;) Integer id);</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 删除操作</span><br><span class="line">    * @param id</span><br><span class="line">    */</span><br><span class="line">   @Modifying</span><br><span class="line">   @Query(&quot;delete from Employee o where id = :id&quot;)</span><br><span class="line">   public void deleteById(@Param(&quot;id&quot;)Integer id);</span><br></pre></td></tr></table></figure></p><p>由于事务(@Transactional)是在Service层完成的,所以我们需要书写一个EmployeeService类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class EmployeeService &#123;</span><br><span class="line"> @Autowired</span><br><span class="line"> private EmployeeRepository employeeRepository;</span><br><span class="line"></span><br><span class="line"> @Transactional(rollbackOn = Exception.class)</span><br><span class="line"> public void update(String name,Integer id)&#123;</span><br><span class="line">     employeeRepository.updateNameById(name,id);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @Transactional(rollbackOn = Exception.class)</span><br><span class="line"> public void delete(Integer id)&#123;</span><br><span class="line">  employeeRepository.deleteById(id);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void test() &#123;</span><br><span class="line">       employeeService.update(&quot;wangxiaoer&quot;, 1);</span><br><span class="line">   &#125;</span><br><span class="line">   @Test</span><br><span class="line">   public void test2() &#123;</span><br><span class="line">       employeeService.delete(6);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springdata </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springData-01</title>
      <link href="/2017/12/01/apringData-01/"/>
      <url>/2017/12/01/apringData-01/</url>
      <content type="html"><![CDATA[<h2 id="传统方式访问数据库"><a href="#传统方式访问数据库" class="headerlink" title="传统方式访问数据库"></a>传统方式访问数据库</h2><pre><code>JDBC    1. Connection    2. ResultSet    3. Statement    4. TestCaseSpringJDBCTemplate弊端分析</code></pre><h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><p>1.导入依赖-pom.xml</p><p>   junit&amp;&amp;mysqlDriver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.38&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="数据表的准备"><a href="#数据表的准备" class="headerlink" title="数据表的准备"></a>数据表的准备</h2><p>关系型的数据库mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 创建一个数据库</span><br><span class="line">ceate database spring_data;</span><br><span class="line"></span><br><span class="line">2.切换到当前使用的数据库</span><br><span class="line">use spring_data </span><br><span class="line"></span><br><span class="line">3.创建一张表</span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line">    id int not null auto_increment,</span><br><span class="line">    name varchar(20) not null,</span><br><span class="line">    age int not null,</span><br><span class="line">    primary key(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">4.查看表的结构</span><br><span class="line">  </span><br><span class="line">  desc student;</span><br><span class="line"></span><br><span class="line">5.往表中插入数据</span><br><span class="line"></span><br><span class="line">insert into student(id,name,age) values(null,&quot;xiaoming&quot;,10);</span><br><span class="line">insert into student(id,name,age) values(null,&quot;xiaohong&quot;,12);</span><br><span class="line">insert into student(id,name,age) values(null,&quot;xiaodong&quot;,18);</span><br><span class="line">insert into student(id,name,age) values(null,&quot;xiaolong&quot;,20);</span><br></pre></td></tr></table></figure><h3 id="开发JDBCUtil工具类"><a href="#开发JDBCUtil工具类" class="headerlink" title="开发JDBCUtil工具类"></a>开发JDBCUtil工具类</h3><ol><li>获取Connection,关闭Connection,Statement,ResultSet.</li><li>配置的属性放在配置文件里面,然后通过Properties.load(inputStream);就可以调用了.</li><li>释放Connect,ResultSet,Statement资源.</li></ol><p>具体实现</p><ol><li>配置文件db.properties</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql://192.168.25.131:3306/spring_data</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=root</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>2.实现类JdbcUtils<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1.获取Connection</span><br><span class="line"> * 2.释放资源</span><br><span class="line"> */</span><br><span class="line">public class JdbcUtil &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 获取Connection</span><br><span class="line">     * @return 所获得的JDBC的Connection</span><br><span class="line">     */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //采用Properties载入输入流</span><br><span class="line">        InputStream is = JdbcUtil.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.load(is);</span><br><span class="line"></span><br><span class="line">        String url = properties.getProperty(&quot;jdbc.url&quot;);</span><br><span class="line">        String user = properties.getProperty(&quot;jdbc.user&quot;);</span><br><span class="line">        String password = properties.getProperty(&quot;jdbc.password&quot;);</span><br><span class="line">        String driverClass = properties.getProperty(&quot;jdbc.driverClass&quot;);</span><br><span class="line"></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        return connection;</span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line">    /**</span><br><span class="line">         * 释放DB相关资源</span><br><span class="line">         * @param resultSet</span><br><span class="line">         * @param statement</span><br><span class="line">         * @param connection</span><br><span class="line">         */</span><br><span class="line">        public static void release(ResultSet resultSet, Statement statement,Connection connection)&#123;</span><br><span class="line">            if (resultSet !=null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (statement !=null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (connection !=null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class JdbcTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testGetconnection() throws Exception &#123;</span><br><span class="line">        Connection connection = JdbcUtil.getConnection();</span><br><span class="line">        Assert.assertNotNull(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dao层开发"><a href="#Dao层开发" class="headerlink" title="Dao层开发"></a>Dao层开发</h2><p>1.创建一个接口类JDBCDAO,只提供一个查询方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> List&lt;Student&gt; query();</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">2.写出它的实现类JDBCDAOImpl</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line"></span><br><span class="line">  1.获取数据库的连接</span><br><span class="line">  2.由数据库的连接获得一个PreparedStatement对象</span><br><span class="line">  3.PreparedStatement执行SQL语句,返回结果集ResultSet</span><br><span class="line">  4.判断结果集ResultSet是否有下一个节点</span><br><span class="line">  5.生成一个Student对象把所查询到的结果.添到Student对象里面去</span><br><span class="line">  6.返回对象集合.list.add(student)</span><br></pre></td></tr></table></figure><p>Code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class StudentDAOImpl implements StudentDAO &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Student&gt; query() throws SQLException &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Connection connection = null;</span><br><span class="line">        PreparedStatement preparedStatement=null;</span><br><span class="line">        ResultSet resultSet=null;</span><br><span class="line">        String sql = &quot;select id,name,age from student&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">             connection = JdbcUtil.getConnection();</span><br><span class="line">             preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">             resultSet = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            Student student = null;</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                int id = resultSet.getInt(&quot;id&quot;);</span><br><span class="line">                int age = resultSet.getInt(&quot;age&quot;);</span><br><span class="line">                String name = resultSet.getString(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">                student = new Student();</span><br><span class="line">                student.setId(id);</span><br><span class="line">                student.setAge(age);</span><br><span class="line">                student.setName(name);</span><br><span class="line">                list.add(student);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JdbcUtil.release(resultSet,preparedStatement,connection);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Code Test </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void testStudentQuery() throws SQLException &#123;</span><br><span class="line">      StudentDAOImpl studentDAO = new StudentDAOImpl();</span><br><span class="line">      List&lt;Student&gt; query = studentDAO.query();</span><br><span class="line">      for (Student student : query) &#123;</span><br><span class="line">          System.out.println(&quot;ID:&quot;+student.getId()+&quot; &quot;+&quot;AGE:&quot;+student.getAge()+&quot; &quot;+&quot;NAME:&quot;+student.getName());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-提供的JdbcTemplate"><a href="#Spring-提供的JdbcTemplate" class="headerlink" title="Spring 提供的JdbcTemplate"></a>Spring 提供的JdbcTemplate</h2><ol><li><p>导入Spring JDBC的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.13.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><ol><li>导入bean的xml配置的表头</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>3.xml的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">解释:</span><br><span class="line">DriverManagerDataSource 继承自AbstractDataSource</span><br><span class="line"></span><br><span class="line">AbstractDataSource内置了下面这些成员变量</span><br><span class="line">    1. private String url;</span><br><span class="line">    </span><br><span class="line">    2. private String username;</span><br><span class="line">    </span><br><span class="line">    3. private String password;</span><br><span class="line">    </span><br><span class="line">    4. private String catalog;</span><br><span class="line">    </span><br><span class="line">    5. private String schema;</span><br><span class="line">    </span><br><span class="line">    6. private Properties connectionProperties;</span><br><span class="line">所以我们需要配置与其相关的东西</span><br></pre></td></tr></table></figure><p>下面是详细配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://192.168.25.131:3306/spring_data&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--Spring JDBC Template信息--&gt;</span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">     &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">#### 关于xml配置的单元测试模板</span><br><span class="line"></span><br><span class="line">```androiddatabinding</span><br><span class="line"></span><br><span class="line">@Before</span><br><span class="line">创建方法</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">测试方法</span><br><span class="line"></span><br><span class="line">@After</span><br><span class="line">销毁方法</span><br><span class="line"></span><br><span class="line">三者的执行顺序是从前往后的.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springdata </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring事务</title>
      <link href="/2017/11/09/Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>/2017/11/09/Spring%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h2><p>事务值得是逻辑上的一组操作,这组操作要么全部成功,要么全部失败.</p><h2 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h2><h3 id="场景-银行转账"><a href="#场景-银行转账" class="headerlink" title="场景-银行转账"></a>场景-银行转账</h3><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0dc3565c76c30cb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一个转账过程"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果<span class="keyword">A</span>给B转账期间,银行系统发生故障,就要保证<span class="keyword">A</span>,B两者的财产不能出现任何损失.</span><br><span class="line">所以转账的操作就要添加到事务中进行,必须一起成功,或者一起失败.</span><br><span class="line"></span><br><span class="line">具体点就是,要么<span class="keyword">A</span>给B成功转账,<span class="keyword">A</span>少了<span class="number">3000</span>元,B多了<span class="number">3000</span>元,要么<span class="keyword">A</span>没有给B转账成功,<span class="keyword">A</span>没少一分钱,B没多一分钱.</span><br></pre></td></tr></table></figure><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p>总的来讲分为4类特性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原子性</span><br><span class="line">一致性</span><br><span class="line">隔离性</span><br><span class="line">持久性</span><br></pre></td></tr></table></figure></p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>原子性是指事务是一个不可分割的工作单位,事务中的操作要么都发生,要么都不发生.</p><p>具体就是上面的例子.</p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>一致性指事务前后数据的完整性必须保持一致.</p><p>实例:就是说A和B转账操作完成之前和之后,A,B两者的存款之和,没有任何变化.</p><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><p>隔离性指的是指多个用户并发访问数据库时,一个用户的事务不能被其他用户的事务所干扰.<code>多个并发的事务之间的数据要相互隔离.</code></p><p>实例:<br><img src="http://upload-images.jianshu.io/upload_images/7505161-66134e7397a1ea60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><code>A正在被一个事务进行更新操作,另外一个事务也进行对A对象的更新操作,这样就导致第一个事务对A的修改,被第二个事务对A的修改给覆盖,修改记录被覆盖掉了,为了避免这种情况,所以事务执行期间,必须要有隔离性.</code></p><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><p>持久性是指一个事务一旦被提交,他对数据库中的修改就是<code>永久性的</code>,即使数据库发生故障也不对其出现任何影响.</p><h2 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h2><p>Spring事务管理主要有三个接口<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>platfromTransactionManager</span><br><span class="line"><span class="bullet">2. </span>TransactionDefinition</span><br><span class="line"><span class="bullet">3. </span>TransactionStatus</span><br></pre></td></tr></table></figure></p><h3 id="platfromTransactionManager"><a href="#platfromTransactionManager" class="headerlink" title="platfromTransactionManager"></a>platfromTransactionManager</h3><p>Spring为不同的持久化框架提供了不同的PlatfromTransactionManager接口实现<br><img src="http://upload-images.jianshu.io/upload_images/7505161-0011dd275ec262f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><p>事务定义信息(隔离级别,传播,超时,只读)</p><p>可预见的安全性问题包括:脏读,幻读,不可重复读</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.脏读</span><br><span class="line">一个事务读取了另外一个事务改写但没有提交的数据,如果这些数据被回滚,则读到的数据是无效的.</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.不可重复读</span><br><span class="line">在同一事务中,多次读取同一数据返回的结果有所不同.</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.幻读</span><br><span class="line">一个事物读取了几行记录之后,另一个事务插入一些记录,幻读就会产生.</span><br><span class="line"></span><br><span class="line">再后来的查询中,第一个事务就会发现有些原来没有的记录,</span><br></pre></td></tr></table></figure><p><strong>隔离级别:读未提交,读已提交,可重复读,可串行化.</strong></p><h4 id="隔离级别的划分-安全等级升序"><a href="#隔离级别的划分-安全等级升序" class="headerlink" title="隔离级别的划分(安全等级升序)"></a>隔离级别的划分(安全等级升序)</h4><p><img src="http://upload-images.jianshu.io/upload_images/7505161-40afe9f726ad87d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4><p>主要用来解决服务器端的SERVICE&amp;&amp;DAO的一些问题.</p><p>图示:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-0e4009825675a9a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Transaction </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot初识</title>
      <link href="/2017/11/09/springboot/"/>
      <url>/2017/11/09/springboot/</url>
      <content type="html"><![CDATA[<h2 id="1-springboot的简述"><a href="#1-springboot的简述" class="headerlink" title="1.springboot的简述"></a>1.springboot的简述</h2><p>java开发很笨重,配置繁杂.低下的开发效率,复杂的部署流程,第三方技术集成难度大.</p><p>SpringBoot :习惯优于配置.无需手动进行配置.</p><p>使用SpringBoot很容易创建一个独立运行的jar,内嵌Servlet容器(就是里面内嵌了一个tomcat),准生产级别的基于Spring框架的项目,使用SpringBoot仅仅需要很少的Spring配置.</p><h2 id="2-SpringBoot的优缺点"><a href="#2-SpringBoot的优缺点" class="headerlink" title="2.SpringBoot的优缺点"></a>2.SpringBoot的优缺点</h2><p>优点<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>快速构建项目</span><br><span class="line"><span class="bullet">2. </span>对主流开发框架的<span class="strong">**无配置集成**</span></span><br><span class="line"><span class="bullet">3. </span>项目可独立运行,无需外部的依赖Servlet容器</span><br><span class="line"><span class="bullet">4. </span>提供运行时的应用监控.</span><br><span class="line"><span class="bullet">5. </span>极大地提高了开发,部署效率.</span><br><span class="line"><span class="bullet">6. </span>与云计算的天然集成.</span><br><span class="line"><span class="bullet">7. </span>微服务,把子系统,全部拆成一个一个的jar,去运行.</span><br></pre></td></tr></table></figure></p><p>缺点<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>书籍很少</span><br><span class="line"><span class="number">2.</span>不熟悉Spring java注解配置的经验.会吃力的.</span><br></pre></td></tr></table></figure></p><h2 id="3-springboot的配置"><a href="#3-springboot的配置" class="headerlink" title="3.springboot的配置"></a>3.springboot的配置</h2><p>pom.xml中需要引入的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--设置springboot的parent--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.2.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;!--SpringBoot中的项目必须将parent设置为SpringBoot的Parent,该parent包含了大量默认的配置,大大简化了我们的开发--&gt;</span><br><span class="line">    &lt;groupId&gt;com.luoyupiaoshang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springbootTest&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;springbootTest Maven Webapp&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 连接池 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.jolbox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;bonecp-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.8.0.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--引入springboot的web支持--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;springbootTest&lt;/finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- 资源文件拷贝插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;!-- java编译插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;showWarnings&gt;true&lt;/showWarnings&gt;</span><br><span class="line">                    &lt;showDeprecation&gt;true&lt;/showDeprecation&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;!--springboot的插件--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- 配置Tomcat插件 --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.3-SNAPSHOT&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="4-第一个springboot项目"><a href="#4-第一个springboot项目" class="headerlink" title="4.第一个springboot项目"></a>4.第一个springboot项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@Configuration</span><br><span class="line">public class HelloApplication &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/hello&quot;)</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;hello world!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //访问 http://localhost:8080/hello就能看到结果了</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面对上面注解进行说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RestController =@Controller + @RequestBody</span><br><span class="line"></span><br><span class="line">@SpringBootApplication SpringBoot的核心注解,主要目的是开启自动配置.</span><br><span class="line">@Configuration声明这是一个Spring的配置类</span><br><span class="line">@Controller 表明这是SpringMVC的一个Controller控制器</span><br><span class="line">@RequestBody 把相应的数据绑定到要返回的对象上</span><br></pre></td></tr></table></figure><p>我们启动可以看到信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018-01-18 21:46:13.142  INFO 7120 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2018-01-18 21:46:13.258  INFO 7120 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat</span><br><span class="line">2018-01-18 21:46:13.266  INFO 7120 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.11</span><br><span class="line">2018-01-18 21:46:13.829  INFO 7120 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2018-01-18 21:46:13.830  INFO 7120 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 10376 ms</span><br><span class="line"></span><br><span class="line">它内置的就是tomcat,以及访问端口</span><br></pre></td></tr></table></figure><h2 id="5-SpringBoot的核心"><a href="#5-SpringBoot的核心" class="headerlink" title="5.SpringBoot的核心"></a>5.SpringBoot的核心</h2><h3 id="1-入口类和SpringBootApplication"><a href="#1-入口类和SpringBootApplication" class="headerlink" title="1.入口类和SpringBootApplication"></a>1.入口类和SpringBootApplication</h3><p>SpringBoot的项目一般会有*Application的入口类,</p><p>入口类中会有main方法,这是一个标准的java应用程序的入口方法.</p><h4 id="SpringBootApplication注解是SpringBoot的核心注解-它其实是一个组合注解"><a href="#SpringBootApplication注解是SpringBoot的核心注解-它其实是一个组合注解" class="headerlink" title="@SpringBootApplication注解是SpringBoot的核心注解,它其实是一个组合注解."></a>@SpringBootApplication注解是SpringBoot的核心注解,它其实是一个组合注解.</h4><p><img src="http://upload-images.jianshu.io/upload_images/7505161-7bb387271de3cbb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这个注解主要包含了一下注解:</p><p> ####1.@SpringBootConfiguration:这是SpringBoot项目的配置注解,同时它是一个组合注解.</p><p> <img src="http://upload-images.jianshu.io/upload_images/7505161-429b641075b8a7ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在SpringBoot项目中推荐使用@SpringBootConfiguration替代@Configuration</p><p>####2.@EnableAutoConfiguration:启动自动配置,该注解是用SpringBoot根据项目中依赖的jar包自动配置项目的项目项.</p><pre><code>1. 我们添加了Spring-boot-starter-web的依赖,项目中也就会引入SpringMVC的依赖,SpringBoot就会自动配置tomcat和SpringMVC    我们可以看一下依赖关系:</code></pre><p> <img src="http://upload-images.jianshu.io/upload_images/7505161-84d9dfa6a1cc4098.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="4-ComponentScan"><a href="#4-ComponentScan" class="headerlink" title="4.@ComponentScan"></a>4.@ComponentScan</h4><p>   这个注解就是默认扫描@SpringBootApplication所在类的同级目录下以及它的子目录.</p><h3 id="2-关闭自动配置"><a href="#2-关闭自动配置" class="headerlink" title="2.关闭自动配置"></a>2.关闭自动配置</h3><p>通过上述,我们可以得知,SpringBoot会根据项目中的jar包依赖,自动做出配置,SpringBoot支持的自动配置如下:</p><p><img src="http://upload-images.jianshu.io/upload_images/7505161-1f355586e6652c1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>   可以看到非常之多,我们不需要SpringBoot的某一项配置,需要进行下列操作.</p><p>   <img src="http://upload-images.jianshu.io/upload_images/7505161-98e490316047b62b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="3-自定义Banner"><a href="#3-自定义Banner" class="headerlink" title="3.自定义Banner"></a>3.自定义Banner</h3><p>就是修改一下SpringBoot启动时的图案.</p><p><a href="http://patorjk.com/software/taag/#p=display&amp;h=3&amp;v=3&amp;f=4Max&amp;t=itcast%20Spring%20Boot" target="_blank" rel="noopener">网站链接</a></p><p>在Resource下建立一个baner.txt,将你生成那些字符图案,搞到里面去,重新运行,就可以了.</p><p>如果想屏蔽Banner效果.如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">      //SpringApplication.run(HelloApplication.class,args);</span><br><span class="line"></span><br><span class="line">      SpringApplication application = new SpringApplication(HelloApplication.class);</span><br><span class="line">      application.setBannerMode(Banner.Mode.OFF);//这样就关闭了Banner效果</span><br><span class="line">      application.run(args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-全局配置文件"><a href="#4-全局配置文件" class="headerlink" title="4.全局配置文件"></a>4.全局配置文件</h3><pre><code>可以写成application.properties或者application.yml我喜欢用用yml格式的,所以我们用application.yml演示:但是很不幸:出现了一个bug</code></pre><p>对比一下吧:<br>application.properties</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="attribute">port</span>=8088</span><br><span class="line">server.<span class="attribute">servlet-path</span>=*.html</span><br></pre></td></tr></table></figure><p>与<br>application.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server </span><br><span class="line">    port:8088</span><br><span class="line">    servlet-path: *.html</span><br></pre></td></tr></table></figure></p><p>中的写法</p><p>你会发现</p><p>application.properties可以顺利运行,但是application.yml不会顺利运行.</p><p>使用application.yml运行会出现无法启动tomcat的错误,我使用了@EnableAutoConfiguration(就是忽视SpringBoot的自动配置)这个注解也不能解决.</p><p>所以我灰溜溜的跑回了application.properties的队列.</p><p><strong> 下面是其他的配置,供参考使用</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br></pre></td><td class="code"><pre><span class="line">*# ===================================================================*</span><br><span class="line"></span><br><span class="line">*# COMMON SPRING BOOT PROPERTIES*</span><br><span class="line"></span><br><span class="line">*#*</span><br><span class="line"></span><br><span class="line">*# This sample file is provided as a guideline. Do NOT copy it in its*</span><br><span class="line"></span><br><span class="line">*# entirety to your own application.               ^^^*</span><br><span class="line"></span><br><span class="line">*# ===================================================================*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# CORE PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# BANNER*</span><br><span class="line"></span><br><span class="line">banner.charset=UTF-8 *# Banner file encoding.*</span><br><span class="line"></span><br><span class="line">banner.location=classpath:banner.txt *# Banner file location.*</span><br><span class="line"></span><br><span class="line">banner.image.location=classpath:banner.gif *# Banner image file location (jpg/png can also be used).*</span><br><span class="line"></span><br><span class="line">banner.image.width= *# Width of the banner image in chars (default 76)*</span><br><span class="line"></span><br><span class="line">banner.image.height= *# Height of the banner image in chars (default based on image height)*</span><br><span class="line"></span><br><span class="line">banner.image.margin= *# Left hand image margin in chars (default 2)*</span><br><span class="line"></span><br><span class="line">banner.image.invert= *# If images should be inverted for dark terminal themes (default false)*</span><br><span class="line"></span><br><span class="line">*# LOGGING*</span><br><span class="line"></span><br><span class="line">logging.config= *# Location of the logging configuration file. For instance `classpath:logback.xml` for Logback*</span><br><span class="line"></span><br><span class="line">logging.exception-conversion-word=%wEx *# Conversion word used when logging exceptions.*</span><br><span class="line"></span><br><span class="line">logging.file= *# Log file name. For instance `myapp.log`*</span><br><span class="line"></span><br><span class="line">logging.level.*= *# Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`*</span><br><span class="line"></span><br><span class="line">logging.path= *# Location of the log file. For instance `/var/log`*</span><br><span class="line"></span><br><span class="line">logging.pattern.console= *# Appender pattern for output to the console. Only supported with the default logback setup.*</span><br><span class="line"></span><br><span class="line">logging.pattern.file= *# Appender pattern for output to the file. Only supported with the default logback setup.*</span><br><span class="line"></span><br><span class="line">logging.pattern.level= *# Appender pattern for log level (default %5p). Only supported with the default logback setup.*</span><br><span class="line"></span><br><span class="line">logging.register-shutdown-hook=false *# Register a shutdown hook for the logging system when it is initialized.*</span><br><span class="line"></span><br><span class="line">*# AOP*</span><br><span class="line"></span><br><span class="line">spring.aop.auto=true *# Add @EnableAspectJAutoProxy.*</span><br><span class="line"></span><br><span class="line">spring.aop.proxy-target-class=false *# Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).*</span><br><span class="line"></span><br><span class="line">*# IDENTITY (*[&lt;u&gt;ContextIdApplicationContextInitializer&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/context/ContextIdApplicationContextInitializer.java))</span><br><span class="line"></span><br><span class="line">spring.application.index= *# Application index.*</span><br><span class="line"></span><br><span class="line">spring.application.name= *# Application name.*</span><br><span class="line"></span><br><span class="line">*# ADMIN (*[&lt;u&gt;SpringApplicationAdminJmxAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.application.admin.enabled=false *# Enable admin features for the application.*</span><br><span class="line"></span><br><span class="line">spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication *# JMX name of the application admin MBean.*</span><br><span class="line"></span><br><span class="line">*# AUTO-CONFIGURATION*</span><br><span class="line"></span><br><span class="line">spring.autoconfigure.exclude= *# Auto-configuration classes to exclude.*</span><br><span class="line"></span><br><span class="line">*# SPRING CORE*</span><br><span class="line"></span><br><span class="line">spring.beaninfo.ignore=true *# Skip search of BeanInfo classes.*</span><br><span class="line"></span><br><span class="line">*# SPRING CACHE (*[&lt;u&gt;CacheProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java))</span><br><span class="line"></span><br><span class="line">spring.cache.cache-names= *# Comma-separated list of cache names to create if supported by the underlying cache manager.*</span><br><span class="line"></span><br><span class="line">spring.cache.caffeine.spec= *# The spec to use to create caches. Check CaffeineSpec for more details on the spec format.*</span><br><span class="line"></span><br><span class="line">spring.cache.couchbase.expiration=0 *# Entry expiration in milliseconds. By default the entries never expire.*</span><br><span class="line"></span><br><span class="line">spring.cache.ehcache.config= *# The location of the configuration file to use to initialize EhCache.*</span><br><span class="line"></span><br><span class="line">spring.cache.guava.spec= *# The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.*</span><br><span class="line"></span><br><span class="line">spring.cache.infinispan.config= *# The location of the configuration file to use to initialize Infinispan.*</span><br><span class="line"></span><br><span class="line">spring.cache.jcache.config= *# The location of the configuration file to use to initialize the cache manager.*</span><br><span class="line"></span><br><span class="line">spring.cache.jcache.provider= *# Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.*</span><br><span class="line"></span><br><span class="line">spring.cache.type= *# Cache type, auto-detected according to the environment by default.*</span><br><span class="line"></span><br><span class="line">*# SPRING CONFIG - using environment property only (*[&lt;u&gt;ConfigFileApplicationListener&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java))</span><br><span class="line"></span><br><span class="line">spring.config.location= *# Config file locations.*</span><br><span class="line"></span><br><span class="line">spring.config.name=application *# Config file name.*</span><br><span class="line"></span><br><span class="line">*# HAZELCAST (*[&lt;u&gt;HazelcastProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastProperties.java))</span><br><span class="line"></span><br><span class="line">spring.hazelcast.config= *# The location of the configuration file to use to initialize Hazelcast.*</span><br><span class="line"></span><br><span class="line">*# PROJECT INFORMATION (*[&lt;u&gt;ProjectInfoProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoProperties.java))</span><br><span class="line"></span><br><span class="line">spring.info.build.location=classpath:META-INF/build-info.properties *# Location of the generated build-info.properties file.*</span><br><span class="line"></span><br><span class="line">spring.info.git.location=classpath:git.properties *# Location of the generated git.properties file.*</span><br><span class="line"></span><br><span class="line">*# JMX*</span><br><span class="line"></span><br><span class="line">spring.jmx.default-domain= *# JMX domain name.*</span><br><span class="line"></span><br><span class="line">spring.jmx.enabled=true *# Expose management beans to the JMX domain.*</span><br><span class="line"></span><br><span class="line">spring.jmx.server=mbeanServer *# MBeanServer bean name.*</span><br><span class="line"></span><br><span class="line">*# Email (*[&lt;u&gt;MailProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java))</span><br><span class="line"></span><br><span class="line">spring.mail.default-encoding=UTF-8 *# Default MimeMessage encoding.*</span><br><span class="line"></span><br><span class="line">spring.mail.host= *# SMTP server host. For instance `smtp.example.com`*</span><br><span class="line"></span><br><span class="line">spring.mail.jndi-name= *# Session JNDI name. When set, takes precedence to others mail settings.*</span><br><span class="line"></span><br><span class="line">spring.mail.password= *# Login password of the SMTP server.*</span><br><span class="line"></span><br><span class="line">spring.mail.port= *# SMTP server port.*</span><br><span class="line"></span><br><span class="line">spring.mail.properties.*= *# Additional JavaMail session properties.*</span><br><span class="line"></span><br><span class="line">spring.mail.protocol=smtp *# Protocol used by the SMTP server.*</span><br><span class="line"></span><br><span class="line">spring.mail.test-connection=false *# Test that the mail server is available on startup.*</span><br><span class="line"></span><br><span class="line">spring.mail.username= *# Login user of the SMTP server.*</span><br><span class="line"></span><br><span class="line">*# APPLICATION SETTINGS (*[&lt;u&gt;SpringApplication&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java))</span><br><span class="line"></span><br><span class="line">spring.main.banner-mode=console *# Mode used to display the banner when the application runs.*</span><br><span class="line"></span><br><span class="line">spring.main.sources= *# Sources (class name, package name or XML resource location) to include in the ApplicationContext.*</span><br><span class="line"></span><br><span class="line">spring.main.web-environment= *# Run the application in a web environment (auto-detected by default).*</span><br><span class="line"></span><br><span class="line">*# FILE ENCODING (*[&lt;u&gt;FileEncodingApplicationListener&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/context/FileEncodingApplicationListener.java))</span><br><span class="line"></span><br><span class="line">spring.mandatory-file-encoding= *# Expected character encoding the application must use.*</span><br><span class="line"></span><br><span class="line">*# INTERNATIONALIZATION (*[&lt;u&gt;MessageSourceAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.messages.always-use-message-format=false *# Set whether to always apply the MessageFormat rules, parsing even messages without arguments.*</span><br><span class="line"></span><br><span class="line">spring.messages.basename=messages *# Comma-separated list of basenames, each following the ResourceBundle convention.*</span><br><span class="line"></span><br><span class="line">spring.messages.cache-seconds=-1 *# Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.*</span><br><span class="line"></span><br><span class="line">spring.messages.encoding=UTF-8 *# Message bundles encoding.*</span><br><span class="line"></span><br><span class="line">spring.messages.fallback-to-system-locale=true *# Set whether to fall back to the system Locale if no files for a specific Locale have been found.*</span><br><span class="line"></span><br><span class="line">*# OUTPUT*</span><br><span class="line"></span><br><span class="line">spring.output.ansi.enabled=detect *# Configure the ANSI output.*</span><br><span class="line"></span><br><span class="line">*# PID FILE (*[&lt;u&gt;ApplicationPidFileWriter&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/system/ApplicationPidFileWriter.java))</span><br><span class="line"></span><br><span class="line">spring.pid.fail-on-write-error= *# Fail if ApplicationPidFileWriter is used but it cannot write the PID file.*</span><br><span class="line"></span><br><span class="line">spring.pid.file= *# Location of the PID file to write (if ApplicationPidFileWriter is used).*</span><br><span class="line"></span><br><span class="line">*# PROFILES*</span><br><span class="line"></span><br><span class="line">spring.profiles.active= *# Comma-separated list (or list if using YAML) of* [&lt;u&gt;active profiles&lt;/u&gt;](#howto-set-active-spring-profiles &quot;72.6 Set the active Spring profiles&quot;).</span><br><span class="line"></span><br><span class="line">spring.profiles.include= *# Unconditionally activate the specified comma separated profiles (or list of profiles if using YAML).*</span><br><span class="line"></span><br><span class="line">*# SENDGRID (*[&lt;u&gt;SendGridAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.sendgrid.api-key= *# SendGrid api key (alternative to username/password)*</span><br><span class="line"></span><br><span class="line">spring.sendgrid.username= *# SendGrid account username*</span><br><span class="line"></span><br><span class="line">spring.sendgrid.password= *# SendGrid account password*</span><br><span class="line"></span><br><span class="line">spring.sendgrid.proxy.host= *# SendGrid proxy host*</span><br><span class="line"></span><br><span class="line">spring.sendgrid.proxy.port= *# SendGrid proxy port*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# WEB PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# EMBEDDED SERVER CONFIGURATION (*[&lt;u&gt;ServerProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java))</span><br><span class="line"></span><br><span class="line">server.address= *# Network address to which the server should bind to.*</span><br><span class="line"></span><br><span class="line">server.compression.enabled=false *# If response compression is enabled.*</span><br><span class="line"></span><br><span class="line">server.compression.excluded-user-agents= *# List of user-agents to exclude from compression.*</span><br><span class="line"></span><br><span class="line">server.compression.mime-types= *# Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`*</span><br><span class="line"></span><br><span class="line">server.compression.min-response-size= *# Minimum response size that is required for compression to be performed. For instance 2048*</span><br><span class="line"></span><br><span class="line">server.connection-timeout= *# Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector&apos;s container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.*</span><br><span class="line"></span><br><span class="line">server.context-parameters.*= *# Servlet context init parameters. For instance `server.context-parameters.a=alpha`*</span><br><span class="line"></span><br><span class="line">server.context-path= *# Context path of the application.*</span><br><span class="line"></span><br><span class="line">server.display-name=application *# Display name of the application.*</span><br><span class="line"></span><br><span class="line">server.max-http-header-size=0 *# Maximum size in bytes of the HTTP message header.*</span><br><span class="line"></span><br><span class="line">server.error.include-stacktrace=never *# When to include a &quot;stacktrace&quot; attribute.*</span><br><span class="line"></span><br><span class="line">server.error.path=/error *# Path of the error controller.*</span><br><span class="line"></span><br><span class="line">server.error.whitelabel.enabled=true *# Enable the default error page displayed in browsers in case of a server error.*</span><br><span class="line"></span><br><span class="line">server.jetty.acceptors= *# Number of acceptor threads to use.*</span><br><span class="line"></span><br><span class="line">server.jetty.max-http-post-size=0 *# Maximum size in bytes of the HTTP post or put content.*</span><br><span class="line"></span><br><span class="line">server.jetty.selectors= *# Number of selector threads to use.*</span><br><span class="line"></span><br><span class="line">server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet *# The class name of the JSP servlet.*</span><br><span class="line"></span><br><span class="line">server.jsp-servlet.init-parameters.*= *# Init parameters used to configure the JSP servlet*</span><br><span class="line"></span><br><span class="line">server.jsp-servlet.registered=true *# Whether or not the JSP servlet is registered*</span><br><span class="line"></span><br><span class="line">server.port=8080 *# Server HTTP port.*</span><br><span class="line"></span><br><span class="line">server.server-header= *# Value to use for the Server response header (no header is sent if empty)*</span><br><span class="line"></span><br><span class="line">server.servlet-path=/ *# Path of the main dispatcher servlet.*</span><br><span class="line"></span><br><span class="line">server.use-forward-headers= *# If X-Forwarded-* headers should be applied to the HttpRequest.*</span><br><span class="line"></span><br><span class="line">server.session.cookie.comment= *# Comment for the session cookie.*</span><br><span class="line"></span><br><span class="line">server.session.cookie.domain= *# Domain for the session cookie.*</span><br><span class="line"></span><br><span class="line">server.session.cookie.http-only= *# &quot;HttpOnly&quot; flag for the session cookie.*</span><br><span class="line"></span><br><span class="line">server.session.cookie.max-age= *# Maximum age of the session cookie in seconds.*</span><br><span class="line"></span><br><span class="line">server.session.cookie.name= *# Session cookie name.*</span><br><span class="line"></span><br><span class="line">server.session.cookie.path= *# Path of the session cookie.*</span><br><span class="line"></span><br><span class="line">server.session.cookie.secure= *# &quot;Secure&quot; flag for the session cookie.*</span><br><span class="line"></span><br><span class="line">server.session.persistent=false *# Persist session data between restarts.*</span><br><span class="line"></span><br><span class="line">server.session.store-dir= *# Directory used to store session data.*</span><br><span class="line"></span><br><span class="line">server.session.timeout= *# Session timeout in seconds.*</span><br><span class="line"></span><br><span class="line">server.session.tracking-modes= *# Session tracking modes (one or more of the following: &quot;cookie&quot;, &quot;url&quot;, &quot;ssl&quot;).*</span><br><span class="line"></span><br><span class="line">server.ssl.ciphers= *# Supported SSL ciphers.*</span><br><span class="line"></span><br><span class="line">server.ssl.client-auth= *# Whether client authentication is wanted (&quot;want&quot;) or needed (&quot;need&quot;). Requires a trust store.*</span><br><span class="line"></span><br><span class="line">server.ssl.enabled= *# Enable SSL support.*</span><br><span class="line"></span><br><span class="line">server.ssl.enabled-protocols= *# Enabled SSL protocols.*</span><br><span class="line"></span><br><span class="line">server.ssl.key-alias= *# Alias that identifies the key in the key store.*</span><br><span class="line"></span><br><span class="line">server.ssl.key-password= *# Password used to access the key in the key store.*</span><br><span class="line"></span><br><span class="line">server.ssl.key-store= *# Path to the key store that holds the SSL certificate (typically a jks file).*</span><br><span class="line"></span><br><span class="line">server.ssl.key-store-password= *# Password used to access the key store.*</span><br><span class="line"></span><br><span class="line">server.ssl.key-store-provider= *# Provider for the key store.*</span><br><span class="line"></span><br><span class="line">server.ssl.key-store-type= *# Type of the key store.*</span><br><span class="line"></span><br><span class="line">server.ssl.protocol=TLS *# SSL protocol to use.*</span><br><span class="line"></span><br><span class="line">server.ssl.trust-store= *# Trust store that holds SSL certificates.*</span><br><span class="line"></span><br><span class="line">server.ssl.trust-store-password= *# Password used to access the trust store.*</span><br><span class="line"></span><br><span class="line">server.ssl.trust-store-provider= *# Provider for the trust store.*</span><br><span class="line"></span><br><span class="line">server.ssl.trust-store-type= *# Type of the trust store.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accept-count= *# Maximum queue length for incoming connection requests when all possible request processing threads are in use.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.buffered=true *# Buffer output such that it is only flushed periodically.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.directory=logs *# Directory in which log files are created. Can be relative to the tomcat base dir or absolute.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.enabled=false *# Enable access log.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.pattern=common *# Format pattern for access logs.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.prefix=access_log *# Log file name prefix.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.rename-on-rotate=false *# Defer inclusion of the date stamp in the file name until rotate time.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.request-attributes-enabled=false *# Set request attributes for IP address, Hostname, protocol and port used for the request.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.rotate=true *# Enable access log rotation.*</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.suffix=.log *# Log file name suffix.*</span><br><span class="line"></span><br><span class="line">server.tomcat.additional-tld-skip-patterns= *# Comma-separated list of additional patterns that match jars to ignore for TLD scanning.*</span><br><span class="line"></span><br><span class="line">server.tomcat.background-processor-delay=30 *# Delay in seconds between the invocation of backgroundProcess methods.*</span><br><span class="line"></span><br><span class="line">server.tomcat.basedir= *# Tomcat base directory. If not specified a temporary directory will be used.*</span><br><span class="line"></span><br><span class="line">server.tomcat.internal-proxies=10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line"></span><br><span class="line">        192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line"></span><br><span class="line">        169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line"></span><br><span class="line">        127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line"></span><br><span class="line">        172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line"></span><br><span class="line">        172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line"></span><br><span class="line">172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125; *# regular expression matching trusted IP addresses.*</span><br><span class="line"></span><br><span class="line">server.tomcat.max-connections= *# Maximum number of connections that the server will accept and process at any given time.*</span><br><span class="line"></span><br><span class="line">server.tomcat.max-http-post-size=0 *# Maximum size in bytes of the HTTP post content.*</span><br><span class="line"></span><br><span class="line">server.tomcat.max-threads=0 *# Maximum amount of worker threads.*</span><br><span class="line"></span><br><span class="line">server.tomcat.min-spare-threads=0 *# Minimum amount of worker threads.*</span><br><span class="line"></span><br><span class="line">server.tomcat.port-header=X-Forwarded-Port *# Name of the HTTP header used to override the original port value.*</span><br><span class="line"></span><br><span class="line">server.tomcat.protocol-header= *# Header that holds the incoming protocol, usually named &quot;X-Forwarded-Proto&quot;.*</span><br><span class="line"></span><br><span class="line">server.tomcat.protocol-header-https-value=https *# Value of the protocol header that indicates that the incoming request uses SSL.*</span><br><span class="line"></span><br><span class="line">server.tomcat.redirect-context-root= *# Whether requests to the context root should be redirected by appending a / to the path.*</span><br><span class="line"></span><br><span class="line">server.tomcat.remote-ip-header= *# Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`*</span><br><span class="line"></span><br><span class="line">server.tomcat.uri-encoding=UTF-8 *# Character encoding to use to decode the URI.*</span><br><span class="line"></span><br><span class="line">server.undertow.accesslog.dir= *# Undertow access log directory.*</span><br><span class="line"></span><br><span class="line">server.undertow.accesslog.enabled=false *# Enable access log.*</span><br><span class="line"></span><br><span class="line">server.undertow.accesslog.pattern=common *# Format pattern for access logs.*</span><br><span class="line"></span><br><span class="line">server.undertow.accesslog.prefix=access_log. *# Log file name prefix.*</span><br><span class="line"></span><br><span class="line">server.undertow.accesslog.rotate=true *# Enable access log rotation.*</span><br><span class="line"></span><br><span class="line">server.undertow.accesslog.suffix=log *# Log file name suffix.*</span><br><span class="line"></span><br><span class="line">server.undertow.buffer-size= *# Size of each buffer in bytes.*</span><br><span class="line"></span><br><span class="line">server.undertow.buffers-per-region= *# Number of buffer per region.*</span><br><span class="line"></span><br><span class="line">server.undertow.direct-buffers= *# Allocate buffers outside the Java heap.*</span><br><span class="line"></span><br><span class="line">server.undertow.io-threads= *# Number of I/O threads to create for the worker.*</span><br><span class="line"></span><br><span class="line">server.undertow.max-http-post-size=0 *# Maximum size in bytes of the HTTP post content.*</span><br><span class="line"></span><br><span class="line">server.undertow.worker-threads= *# Number of worker threads.*</span><br><span class="line"></span><br><span class="line">*# FREEMARKER (*[&lt;u&gt;FreeMarkerAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.freemarker.allow-request-override=false *# Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.allow-session-override=false *# Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.cache=false *# Enable template caching.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.charset=UTF-8 *# Template encoding.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.check-template-location=true *# Check that the templates location exists.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.content-type=text/html *# Content-Type value.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.enabled=true *# Enable MVC view resolution for this technology.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.expose-request-attributes=false *# Set whether all request attributes should be added to the model prior to merging with the template.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.expose-session-attributes=false *# Set whether all HttpSession attributes should be added to the model prior to merging with the template.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.expose-spring-macro-helpers=true *# Set whether to expose a RequestContext for use by Spring&apos;s macro library, under the name &quot;springMacroRequestContext&quot;.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.prefer-file-system-access=true *# Prefer file system access for template loading. File system access enables hot detection of template changes.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.prefix= *# Prefix that gets prepended to view names when building a URL.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.request-context-attribute= *# Name of the RequestContext attribute for all views.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.settings.*= *# Well-known FreeMarker keys which will be passed to FreeMarker&apos;s Configuration.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.suffix= *# Suffix that gets appended to view names when building a URL.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.template-loader-path=classpath:/templates/ *# Comma-separated list of template paths.*</span><br><span class="line"></span><br><span class="line">spring.freemarker.view-names= *# White list of view names that can be resolved.*</span><br><span class="line"></span><br><span class="line">*# GROOVY TEMPLATES (*[&lt;u&gt;GroovyTemplateAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.groovy.template.allow-request-override=false *# Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.allow-session-override=false *# Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.cache= *# Enable template caching.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.charset=UTF-8 *# Template encoding.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.check-template-location=true *# Check that the templates location exists.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.configuration.*= *# See GroovyMarkupConfigurer*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.content-type=test/html *# Content-Type value.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.enabled=true *# Enable MVC view resolution for this technology.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.expose-request-attributes=false *# Set whether all request attributes should be added to the model prior to merging with the template.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.expose-session-attributes=false *# Set whether all HttpSession attributes should be added to the model prior to merging with the template.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.expose-spring-macro-helpers=true *# Set whether to expose a RequestContext for use by Spring&apos;s macro library, under the name &quot;springMacroRequestContext&quot;.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.prefix= *# Prefix that gets prepended to view names when building a URL.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.request-context-attribute= *# Name of the RequestContext attribute for all views.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.resource-loader-path=classpath:/templates/ *# Template path.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.suffix=.tpl *# Suffix that gets appended to view names when building a URL.*</span><br><span class="line"></span><br><span class="line">spring.groovy.template.view-names= *# White list of view names that can be resolved.*</span><br><span class="line"></span><br><span class="line">*# SPRING HATEOAS (*[&lt;u&gt;HateoasProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HateoasProperties.java))</span><br><span class="line"></span><br><span class="line">spring.hateoas.use-hal-as-default-json-media-type=true *# Specify if application/hal+json responses should be sent to requests that accept application/json.*</span><br><span class="line"></span><br><span class="line">*# HTTP message conversion*</span><br><span class="line"></span><br><span class="line">spring.http.converters.preferred-json-mapper=jackson *# Preferred JSON mapper to use for HTTP message conversion. Set to &quot;gson&quot; to force the use of Gson when both it and Jackson are on the classpath.*</span><br><span class="line"></span><br><span class="line">*# HTTP encoding (*[&lt;u&gt;HttpEncodingProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpEncodingProperties.java))</span><br><span class="line"></span><br><span class="line">spring.http.encoding.charset=UTF-8 *# Charset of HTTP requests and responses. Added to the &quot;Content-Type&quot; header if not set explicitly.*</span><br><span class="line"></span><br><span class="line">spring.http.encoding.enabled=true *# Enable http encoding support.*</span><br><span class="line"></span><br><span class="line">spring.http.encoding.force= *# Force the encoding to the configured charset on HTTP requests and responses.*</span><br><span class="line"></span><br><span class="line">spring.http.encoding.force-request= *# Force the encoding to the configured charset on HTTP requests. Defaults to true when &quot;force&quot; has not been specified.*</span><br><span class="line"></span><br><span class="line">spring.http.encoding.force-response= *# Force the encoding to the configured charset on HTTP responses.*</span><br><span class="line"></span><br><span class="line">spring.http.encoding.mapping= *# Locale to Encoding mapping.*</span><br><span class="line"></span><br><span class="line">*# MULTIPART (*[&lt;u&gt;MultipartProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java))</span><br><span class="line"></span><br><span class="line">spring.http.multipart.enabled=true *# Enable support of multi-part uploads.*</span><br><span class="line"></span><br><span class="line">spring.http.multipart.file-size-threshold=0 *# Threshold after which files will be written to disk. Values can use the suffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size.*</span><br><span class="line"></span><br><span class="line">spring.http.multipart.location= *# Intermediate location of uploaded files.*</span><br><span class="line"></span><br><span class="line">spring.http.multipart.max-file-size=1MB *# Max file size. Values can use the suffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size.*</span><br><span class="line"></span><br><span class="line">spring.http.multipart.max-request-size=10MB *# Max request size. Values can use the suffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size.*</span><br><span class="line"></span><br><span class="line">spring.http.multipart.resolve-lazily=false *# Whether to resolve the multipart request lazily at the time of file or parameter access.*</span><br><span class="line"></span><br><span class="line">*# JACKSON (*[&lt;u&gt;JacksonProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonProperties.java))</span><br><span class="line"></span><br><span class="line">spring.jackson.date-format= *# Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.*</span><br><span class="line"></span><br><span class="line">spring.jackson.default-property-inclusion= *# Controls the inclusion of properties during serialization.*</span><br><span class="line"></span><br><span class="line">spring.jackson.deserialization.*= *# Jackson on/off features that affect the way Java objects are deserialized.*</span><br><span class="line"></span><br><span class="line">spring.jackson.generator.*= *# Jackson on/off features for generators.*</span><br><span class="line"></span><br><span class="line">spring.jackson.joda-date-time-format= *# Joda date time format string. If not configured, &quot;date-format&quot; will be used as a fallback if it is configured with a format string.*</span><br><span class="line"></span><br><span class="line">spring.jackson.locale= *# Locale used for formatting.*</span><br><span class="line"></span><br><span class="line">spring.jackson.mapper.*= *# Jackson general purpose on/off features.*</span><br><span class="line"></span><br><span class="line">spring.jackson.parser.*= *# Jackson on/off features for parsers.*</span><br><span class="line"></span><br><span class="line">spring.jackson.property-naming-strategy= *# One of the constants on Jackson&apos;s PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.*</span><br><span class="line"></span><br><span class="line">spring.jackson.serialization.*= *# Jackson on/off features that affect the way Java objects are serialized.*</span><br><span class="line"></span><br><span class="line">spring.jackson.time-zone= *# Time zone used when formatting dates. For instance `America/Los_Angeles`*</span><br><span class="line"></span><br><span class="line">*# JERSEY (*[&lt;u&gt;JerseyProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProperties.java))</span><br><span class="line"></span><br><span class="line">spring.jersey.application-path= *# Path that serves as the base URI for the application. Overrides the value of &quot;@ApplicationPath&quot; if specified.*</span><br><span class="line"></span><br><span class="line">spring.jersey.filter.order=0 *# Jersey filter chain order.*</span><br><span class="line"></span><br><span class="line">spring.jersey.init.*= *# Init parameters to pass to Jersey via the servlet or filter.*</span><br><span class="line"></span><br><span class="line">spring.jersey.servlet.load-on-startup=-1 *# Load on startup priority of the Jersey servlet.*</span><br><span class="line"></span><br><span class="line">spring.jersey.type=servlet *# Jersey integration type.*</span><br><span class="line"></span><br><span class="line">*# SPRING LDAP (*[&lt;u&gt;LdapProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java))</span><br><span class="line"></span><br><span class="line">spring.ldap.urls= *# LDAP URLs of the server.*</span><br><span class="line"></span><br><span class="line">spring.ldap.base= *# Base suffix from which all operations should originate.*</span><br><span class="line"></span><br><span class="line">spring.ldap.username= *# Login user of the server.*</span><br><span class="line"></span><br><span class="line">spring.ldap.password= *# Login password of the server.*</span><br><span class="line"></span><br><span class="line">spring.ldap.base-environment.*= *# LDAP specification settings.*</span><br><span class="line"></span><br><span class="line">*# EMBEDDED LDAP (*[&lt;u&gt;EmbeddedLdapProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java))</span><br><span class="line"></span><br><span class="line">spring.ldap.embedded.base-dn= *# The base DN*</span><br><span class="line"></span><br><span class="line">spring.ldap.embedded.credential.username= *# Embedded LDAP username.*</span><br><span class="line"></span><br><span class="line">spring.ldap.embedded.credential.password= *# Embedded LDAP password.*</span><br><span class="line"></span><br><span class="line">spring.ldap.embedded.ldif=classpath:schema.ldif *# Schema (LDIF) script resource reference.*</span><br><span class="line"></span><br><span class="line">spring.ldap.embedded.port= *# Embedded LDAP port.*</span><br><span class="line"></span><br><span class="line">spring.ldap.embedded.validation.enabled=true *# Enable LDAP schema validation.*</span><br><span class="line"></span><br><span class="line">spring.ldap.embedded.validation.schema= *# Path to the custom schema.*</span><br><span class="line"></span><br><span class="line">*# SPRING MOBILE DEVICE VIEWS (*[&lt;u&gt;DeviceDelegatingViewResolverAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enable-fallback=false *# Enable support for fallback resolution.*</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enabled=false *# Enable device view resolver.*</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ *# Prefix that gets prepended to view names for mobile devices.*</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-suffix= *# Suffix that gets appended to view names for mobile devices.*</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix= *# Prefix that gets prepended to view names for normal devices.*</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-suffix= *# Suffix that gets appended to view names for normal devices.*</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ *# Prefix that gets prepended to view names for tablet devices.*</span><br><span class="line"></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-suffix= *# Suffix that gets appended to view names for tablet devices.*</span><br><span class="line"></span><br><span class="line">*# SPRING MOBILE SITE PREFERENCE (*[&lt;u&gt;SitePreferenceAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.mobile.sitepreference.enabled=true *# Enable SitePreferenceHandler.*</span><br><span class="line"></span><br><span class="line">*# MUSTACHE TEMPLATES (*[&lt;u&gt;MustacheAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.mustache.allow-request-override= *# Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.*</span><br><span class="line"></span><br><span class="line">spring.mustache.allow-session-override= *# Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.*</span><br><span class="line"></span><br><span class="line">spring.mustache.cache= *# Enable template caching.*</span><br><span class="line"></span><br><span class="line">spring.mustache.charset= *# Template encoding.*</span><br><span class="line"></span><br><span class="line">spring.mustache.check-template-location= *# Check that the templates location exists.*</span><br><span class="line"></span><br><span class="line">spring.mustache.content-type= *# Content-Type value.*</span><br><span class="line"></span><br><span class="line">spring.mustache.enabled= *# Enable MVC view resolution for this technology.*</span><br><span class="line"></span><br><span class="line">spring.mustache.expose-request-attributes= *# Set whether all request attributes should be added to the model prior to merging with the template.*</span><br><span class="line"></span><br><span class="line">spring.mustache.expose-session-attributes= *# Set whether all HttpSession attributes should be added to the model prior to merging with the template.*</span><br><span class="line"></span><br><span class="line">spring.mustache.expose-spring-macro-helpers= *# Set whether to expose a RequestContext for use by Spring&apos;s macro library, under the name &quot;springMacroRequestContext&quot;.*</span><br><span class="line"></span><br><span class="line">spring.mustache.prefix=classpath:/templates/ *# Prefix to apply to template names.*</span><br><span class="line"></span><br><span class="line">spring.mustache.request-context-attribute= *# Name of the RequestContext attribute for all views.*</span><br><span class="line"></span><br><span class="line">spring.mustache.suffix=.html *# Suffix to apply to template names.*</span><br><span class="line"></span><br><span class="line">spring.mustache.view-names= *# White list of view names that can be resolved.*</span><br><span class="line"></span><br><span class="line">*# SPRING MVC (*[&lt;u&gt;WebMvcProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java))</span><br><span class="line"></span><br><span class="line">spring.mvc.async.request-timeout= *# Amount of time (in milliseconds) before asynchronous request handling times out.*</span><br><span class="line"></span><br><span class="line">spring.mvc.date-format= *# Date format to use. For instance `dd/MM/yyyy`.*</span><br><span class="line"></span><br><span class="line">spring.mvc.dispatch-trace-request=false *# Dispatch TRACE requests to the FrameworkServlet doService method.*</span><br><span class="line"></span><br><span class="line">spring.mvc.dispatch-options-request=true *# Dispatch OPTIONS requests to the FrameworkServlet doService method.*</span><br><span class="line"></span><br><span class="line">spring.mvc.favicon.enabled=true *# Enable resolution of favicon.ico.*</span><br><span class="line"></span><br><span class="line">spring.mvc.formcontent.putfilter.enabled=true *# Enable Spring&apos;s HttpPutFormContentFilter.*</span><br><span class="line"></span><br><span class="line">spring.mvc.ignore-default-model-on-redirect=true *# If the content of the &quot;default&quot; model should be ignored during redirect scenarios.*</span><br><span class="line"></span><br><span class="line">spring.mvc.locale= *# Locale to use. By default, this locale is overridden by the &quot;Accept-Language&quot; header.*</span><br><span class="line"></span><br><span class="line">spring.mvc.locale-resolver=accept-header *# Define how the locale should be resolved.*</span><br><span class="line"></span><br><span class="line">spring.mvc.log-resolved-exception=false *# Enable warn logging of exceptions resolved by a &quot;HandlerExceptionResolver&quot;.*</span><br><span class="line"></span><br><span class="line">spring.mvc.media-types.*= *# Maps file extensions to media types for content negotiation.*</span><br><span class="line"></span><br><span class="line">spring.mvc.message-codes-resolver-format= *# Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.*</span><br><span class="line"></span><br><span class="line">spring.mvc.servlet.load-on-startup=-1 *# Load on startup priority of the Spring Web Services servlet.*</span><br><span class="line"></span><br><span class="line">spring.mvc.static-path-pattern=/** *# Path pattern used for static resources.*</span><br><span class="line"></span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found=false *# If a &quot;NoHandlerFoundException&quot; should be thrown if no Handler was found to process a request.*</span><br><span class="line"></span><br><span class="line">spring.mvc.view.prefix= *# Spring MVC view prefix.*</span><br><span class="line"></span><br><span class="line">spring.mvc.view.suffix= *# Spring MVC view suffix.*</span><br><span class="line"></span><br><span class="line">*# SPRING RESOURCES HANDLING (*[&lt;u&gt;ResourceProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java))</span><br><span class="line"></span><br><span class="line">spring.resources.add-mappings=true *# Enable default resource handling.*</span><br><span class="line"></span><br><span class="line">spring.resources.cache-period= *# Cache period for the resources served by the resource handler, in seconds.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.cache=true *# Enable caching in the Resource chain.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.enabled= *# Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.gzipped=false *# Enable resolution of already gzipped resources.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.html-application-cache=false *# Enable HTML5 application cache manifest rewriting.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.strategy.content.enabled=false *# Enable the content Version Strategy.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.strategy.content.paths=/** *# Comma-separated list of patterns to apply to the Version Strategy.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.strategy.fixed.enabled=false *# Enable the fixed Version Strategy.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.strategy.fixed.paths=/** *# Comma-separated list of patterns to apply to the Version Strategy.*</span><br><span class="line"></span><br><span class="line">spring.resources.chain.strategy.fixed.version= *# Version string to use for the Version Strategy.*</span><br><span class="line"></span><br><span class="line">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ *# Locations of static resources.*</span><br><span class="line"></span><br><span class="line">*# SPRING SESSION (*[&lt;u&gt;SessionProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java))</span><br><span class="line"></span><br><span class="line">spring.session.hazelcast.flush-mode=on-save *# Sessions flush mode.*</span><br><span class="line"></span><br><span class="line">spring.session.hazelcast.map-name=spring:session:sessions *# Name of the map used to store sessions.*</span><br><span class="line"></span><br><span class="line">spring.session.jdbc.initializer.enabled= *# Create the required session tables on startup if necessary. Enabled automatically if the default table name is set or a custom schema is configured.*</span><br><span class="line"></span><br><span class="line">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql *# Path to the SQL file to use to initialize the database schema.*</span><br><span class="line"></span><br><span class="line">spring.session.jdbc.table-name=SPRING_SESSION *# Name of database table used to store sessions.*</span><br><span class="line"></span><br><span class="line">spring.session.mongo.collection-name=sessions *# Collection name used to store sessions.*</span><br><span class="line"></span><br><span class="line">spring.session.redis.flush-mode=on-save *# Sessions flush mode.*</span><br><span class="line"></span><br><span class="line">spring.session.redis.namespace= *# Namespace for keys used to store sessions.*</span><br><span class="line"></span><br><span class="line">spring.session.store-type= *# Session store type.*</span><br><span class="line"></span><br><span class="line">*# SPRING SOCIAL (*[&lt;u&gt;SocialWebAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.social.auto-connection-views=false *# Enable the connection status view for supported providers.*</span><br><span class="line"></span><br><span class="line">*# SPRING SOCIAL FACEBOOK (*[&lt;u&gt;FacebookAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.social.facebook.app-id= *# your application&apos;s Facebook App ID*</span><br><span class="line"></span><br><span class="line">spring.social.facebook.app-secret= *# your application&apos;s Facebook App Secret*</span><br><span class="line"></span><br><span class="line">*# SPRING SOCIAL LINKEDIN (*[&lt;u&gt;LinkedInAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/LinkedInAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.social.linkedin.app-id= *# your application&apos;s LinkedIn App ID*</span><br><span class="line"></span><br><span class="line">spring.social.linkedin.app-secret= *# your application&apos;s LinkedIn App Secret*</span><br><span class="line"></span><br><span class="line">*# SPRING SOCIAL TWITTER (*[&lt;u&gt;TwitterAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.social.twitter.app-id= *# your application&apos;s Twitter App ID*</span><br><span class="line"></span><br><span class="line">spring.social.twitter.app-secret= *# your application&apos;s Twitter App Secret*</span><br><span class="line"></span><br><span class="line">*# THYMELEAF (*[&lt;u&gt;ThymeleafAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.cache=true *# Enable template caching.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.check-template=true *# Check that the template exists before rendering it.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.check-template-location=true *# Check that the templates location exists.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.content-type=text/html *# Content-Type value.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.enabled=true *# Enable MVC Thymeleaf view resolution.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.encoding=UTF-8 *# Template encoding.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.excluded-view-names= *# Comma-separated list of view names that should be excluded from resolution.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.mode=HTML5 *# Template mode to be applied to templates. See also StandardTemplateModeHandlers.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/ *# Prefix that gets prepended to view names when building a URL.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.suffix=.html *# Suffix that gets appended to view names when building a URL.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.template-resolver-order= *# Order of the template resolver in the chain.*</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.view-names= *# Comma-separated list of view names that can be resolved.*</span><br><span class="line"></span><br><span class="line">*# SPRING WEB SERVICES (*[&lt;u&gt;WebServicesProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServicesProperties.java))</span><br><span class="line"></span><br><span class="line">spring.webservices.path=/services *# Path that serves as the base URI for the services.*</span><br><span class="line"></span><br><span class="line">spring.webservices.servlet.init= *# Servlet init parameters to pass to Spring Web Services.*</span><br><span class="line"></span><br><span class="line">spring.webservices.servlet.load-on-startup=-1 *# Load on startup priority of the Spring Web Services servlet.*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# SECURITY PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# SECURITY (*[&lt;u&gt;SecurityProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java))</span><br><span class="line"></span><br><span class="line">security.basic.authorize-mode=role *# Security authorize mode to apply.*</span><br><span class="line"></span><br><span class="line">security.basic.enabled=true *# Enable basic authentication.*</span><br><span class="line"></span><br><span class="line">security.basic.path=/** *# Comma-separated list of paths to secure.*</span><br><span class="line"></span><br><span class="line">security.basic.realm=Spring *# HTTP basic realm name.*</span><br><span class="line"></span><br><span class="line">security.enable-csrf=false *# Enable Cross Site Request Forgery support.*</span><br><span class="line"></span><br><span class="line">security.filter-order=0 *# Security filter chain order.*</span><br><span class="line"></span><br><span class="line">security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST *# Security filter chain dispatcher types.*</span><br><span class="line"></span><br><span class="line">security.headers.cache=true *# Enable cache control HTTP headers.*</span><br><span class="line"></span><br><span class="line">security.headers.content-security-policy= *# Value for content security policy header.*</span><br><span class="line"></span><br><span class="line">security.headers.content-security-policy-mode=default *# Content security policy mode.*</span><br><span class="line"></span><br><span class="line">security.headers.content-type=true *# Enable &quot;X-Content-Type-Options&quot; header.*</span><br><span class="line"></span><br><span class="line">security.headers.frame=true *# Enable &quot;X-Frame-Options&quot; header.*</span><br><span class="line"></span><br><span class="line">security.headers.hsts=all *# HTTP Strict Transport Security (HSTS) mode (none, domain, all).*</span><br><span class="line"></span><br><span class="line">security.headers.xss=true *# Enable cross site scripting (XSS) protection.*</span><br><span class="line"></span><br><span class="line">security.ignored= *# Comma-separated list of paths to exclude from the default secured paths.*</span><br><span class="line"></span><br><span class="line">security.require-ssl=false *# Enable secure channel for all requests.*</span><br><span class="line"></span><br><span class="line">security.sessions=stateless *# Session creation policy (always, never, if_required, stateless).*</span><br><span class="line"></span><br><span class="line">security.user.name=user *# Default user name.*</span><br><span class="line"></span><br><span class="line">security.user.password= *# Password for the default user name. A random password is logged on startup by default.*</span><br><span class="line"></span><br><span class="line">security.user.role=USER *# Granted roles for the default user name.*</span><br><span class="line"></span><br><span class="line">*# SECURITY OAUTH2 CLIENT (*[&lt;u&gt;OAuth2ClientProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2ClientProperties.java))</span><br><span class="line"></span><br><span class="line">security.oauth2.client.client-id= *# OAuth2 client id.*</span><br><span class="line"></span><br><span class="line">security.oauth2.client.client-secret= *# OAuth2 client secret. A random secret is generated by default*</span><br><span class="line"></span><br><span class="line">*# SECURITY OAUTH2 RESOURCES (*[&lt;u&gt;ResourceServerProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerProperties.java))</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.filter-order= *# The order of the filter chain used to authenticate tokens.*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.id= *# Identifier of the resource.*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.jwt.key-uri= *# The URI of the JWT token. Can be set if the value is not available and the key is public.*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.jwt.key-value= *# The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.prefer-token-info=true *# Use the token info, can be set to false to use the user info.*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.service-id=resource *#*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.token-info-uri= *# URI of the token decoding endpoint.*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.token-type= *# The token type to send when using the userInfoUri.*</span><br><span class="line"></span><br><span class="line">security.oauth2.resource.user-info-uri= *# URI of the user endpoint.*</span><br><span class="line"></span><br><span class="line">*# SECURITY OAUTH2 SSO (*[&lt;u&gt;OAuth2SsoProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2SsoProperties.java))</span><br><span class="line"></span><br><span class="line">security.oauth2.sso.filter-order= *# Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter*</span><br><span class="line"></span><br><span class="line">security.oauth2.sso.login-path=/login *# Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# DATA PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# FLYWAY (*[&lt;u&gt;FlywayProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java))</span><br><span class="line"></span><br><span class="line">flyway.baseline-description= *#*</span><br><span class="line"></span><br><span class="line">flyway.baseline-version=1 *# version to start migration*</span><br><span class="line"></span><br><span class="line">flyway.baseline-on-migrate= *#*</span><br><span class="line"></span><br><span class="line">flyway.check-location=false *# Check that migration scripts location exists.*</span><br><span class="line"></span><br><span class="line">flyway.clean-on-validation-error= *#*</span><br><span class="line"></span><br><span class="line">flyway.enabled=true *# Enable flyway.*</span><br><span class="line"></span><br><span class="line">flyway.encoding= *#*</span><br><span class="line"></span><br><span class="line">flyway.ignore-failed-future-migration= *#*</span><br><span class="line"></span><br><span class="line">flyway.init-sqls= *# SQL statements to execute to initialize a connection immediately after obtaining it.*</span><br><span class="line"></span><br><span class="line">flyway.locations=classpath:db/migration *# locations of migrations scripts*</span><br><span class="line"></span><br><span class="line">flyway.out-of-order= *#*</span><br><span class="line"></span><br><span class="line">flyway.password= *# JDBC password if you want Flyway to create its own DataSource*</span><br><span class="line"></span><br><span class="line">flyway.placeholder-prefix= *#*</span><br><span class="line"></span><br><span class="line">flyway.placeholder-replacement= *#*</span><br><span class="line"></span><br><span class="line">flyway.placeholder-suffix= *#*</span><br><span class="line"></span><br><span class="line">flyway.placeholders.*= *#*</span><br><span class="line"></span><br><span class="line">flyway.schemas= *# schemas to update*</span><br><span class="line"></span><br><span class="line">flyway.sql-migration-prefix=V *#*</span><br><span class="line"></span><br><span class="line">flyway.sql-migration-separator= *#*</span><br><span class="line"></span><br><span class="line">flyway.sql-migration-suffix=.sql *#*</span><br><span class="line"></span><br><span class="line">flyway.table= *#*</span><br><span class="line"></span><br><span class="line">flyway.url= *# JDBC url of the database to migrate. If not set, the primary configured data source is used.*</span><br><span class="line"></span><br><span class="line">flyway.user= *# Login user of the database to migrate.*</span><br><span class="line"></span><br><span class="line">flyway.validate-on-migrate= *#*</span><br><span class="line"></span><br><span class="line">*# LIQUIBASE (*[&lt;u&gt;LiquibaseProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java))</span><br><span class="line"></span><br><span class="line">liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml *# Change log configuration path.*</span><br><span class="line"></span><br><span class="line">liquibase.check-change-log-location=true *# Check the change log location exists.*</span><br><span class="line"></span><br><span class="line">liquibase.contexts= *# Comma-separated list of runtime contexts to use.*</span><br><span class="line"></span><br><span class="line">liquibase.default-schema= *# Default database schema.*</span><br><span class="line"></span><br><span class="line">liquibase.drop-first=false *# Drop the database schema first.*</span><br><span class="line"></span><br><span class="line">liquibase.enabled=true *# Enable liquibase support.*</span><br><span class="line"></span><br><span class="line">liquibase.labels= *# Comma-separated list of runtime labels to use.*</span><br><span class="line"></span><br><span class="line">liquibase.parameters.*= *# Change log parameters.*</span><br><span class="line"></span><br><span class="line">liquibase.password= *# Login password of the database to migrate.*</span><br><span class="line"></span><br><span class="line">liquibase.rollback-file= *# File to which rollback SQL will be written when an update is performed.*</span><br><span class="line"></span><br><span class="line">liquibase.url= *# JDBC url of the database to migrate. If not set, the primary configured data source is used.*</span><br><span class="line"></span><br><span class="line">liquibase.user= *# Login user of the database to migrate.*</span><br><span class="line"></span><br><span class="line">*# COUCHBASE (*[&lt;u&gt;CouchbaseProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java))</span><br><span class="line"></span><br><span class="line">spring.couchbase.bootstrap-hosts= *# Couchbase nodes (host or IP address) to bootstrap from.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.bucket.name=default *# Name of the bucket to connect to.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.bucket.password=  *# Password of the bucket.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.endpoints.key-value=1 *# Number of sockets per node against the Key/value service.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.endpoints.query=1 *# Number of sockets per node against the Query (N1QL) service.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.endpoints.view=1 *# Number of sockets per node against the view service.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.ssl.enabled= *# Enable SSL support. Enabled automatically if a &quot;keyStore&quot; is provided unless specified otherwise.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.ssl.key-store= *# Path to the JVM key store that holds the certificates.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.ssl.key-store-password= *# Password used to access the key store.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.timeouts.connect=5000 *# Bucket connections timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.timeouts.key-value=2500 *# Blocking operations performed on a specific key timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.timeouts.query=7500 *# N1QL query operations timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.timeouts.socket-connect=1000 *# Socket connect connections timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.couchbase.env.timeouts.view=7500 *# Regular and geospatial view operations timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">*# DAO (*[&lt;u&gt;PersistenceExceptionTranslationAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.dao.exceptiontranslation.enabled=true *# Enable the PersistenceExceptionTranslationPostProcessor.*</span><br><span class="line"></span><br><span class="line">*# CASSANDRA (*[&lt;u&gt;CassandraProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java))</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.cluster-name= *# Name of the Cassandra cluster.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.compression=none *# Compression supported by the Cassandra binary protocol.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.connect-timeout-millis= *# Socket option: connection time out.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.consistency-level= *# Queries consistency level.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.contact-points=localhost *# Comma-separated list of cluster node addresses.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.fetch-size= *# Queries default fetch size.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.keyspace-name= *# Keyspace name to use.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.load-balancing-policy= *# Class name of the load balancing policy.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.port= *# Port of the Cassandra server.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.password= *# Login password of the server.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.read-timeout-millis= *# Socket option: read time out.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.reconnection-policy= *# Reconnection policy class.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.retry-policy= *# Class name of the retry policy.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.serial-consistency-level= *# Queries serial consistency level.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.schema-action=none *# Schema action to take at startup.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.ssl=false *# Enable SSL support.*</span><br><span class="line"></span><br><span class="line">spring.data.cassandra.username= *# Login user of the server.*</span><br><span class="line"></span><br><span class="line">*# DATA COUCHBASE (*[&lt;u&gt;CouchbaseDataProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseDataProperties.java))</span><br><span class="line"></span><br><span class="line">spring.data.couchbase.auto-index=false *# Automatically create views and indexes.*</span><br><span class="line"></span><br><span class="line">spring.data.couchbase.consistency=read-your-own-writes *# Consistency to apply by default on generated queries.*</span><br><span class="line"></span><br><span class="line">spring.data.couchbase.repositories.enabled=true *# Enable Couchbase repositories.*</span><br><span class="line"></span><br><span class="line">*# ELASTICSEARCH (*[&lt;u&gt;ElasticsearchProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java))</span><br><span class="line"></span><br><span class="line">spring.data.elasticsearch.cluster-name=elasticsearch *# Elasticsearch cluster name.*</span><br><span class="line"></span><br><span class="line">spring.data.elasticsearch.cluster-nodes= *# Comma-separated list of cluster node addresses. If not specified, starts a client node.*</span><br><span class="line"></span><br><span class="line">spring.data.elasticsearch.properties.*= *# Additional properties used to configure the client.*</span><br><span class="line"></span><br><span class="line">spring.data.elasticsearch.repositories.enabled=true *# Enable Elasticsearch repositories.*</span><br><span class="line"></span><br><span class="line">*# DATA LDAP*</span><br><span class="line"></span><br><span class="line">spring.data.ldap.repositories.enabled=true *# Enable LDAP repositories.*</span><br><span class="line"></span><br><span class="line">*# MONGODB (*[&lt;u&gt;MongoProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java))</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.authentication-database= *# Authentication database name.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.database=test *# Database name.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.field-naming-strategy= *# Fully qualified name of the FieldNamingStrategy to use.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.grid-fs-database= *# GridFS database name.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.host=localhost *# Mongo server host. Cannot be set with uri.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.password= *# Login password of the mongo server. Cannot be set with uri.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.port=27017 *# Mongo server port. Cannot be set with uri.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.repositories.enabled=true *# Enable Mongo repositories.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.uri=mongodb://localhost/test *# Mongo database URI. Cannot be set with host, port and credentials.*</span><br><span class="line"></span><br><span class="line">spring.data.mongodb.username= *# Login user of the mongo server. Cannot be set with uri.*</span><br><span class="line"></span><br><span class="line">*# DATA REDIS*</span><br><span class="line"></span><br><span class="line">spring.data.redis.repositories.enabled=true *# Enable Redis repositories.*</span><br><span class="line"></span><br><span class="line">*# NEO4J (*[&lt;u&gt;Neo4jProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jProperties.java))</span><br><span class="line"></span><br><span class="line">spring.data.neo4j.compiler= *# Compiler to use.*</span><br><span class="line"></span><br><span class="line">spring.data.neo4j.embedded.enabled=true *# Enable embedded mode if the embedded driver is available.*</span><br><span class="line"></span><br><span class="line">spring.data.neo4j.open-in-view=false *# Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.*</span><br><span class="line"></span><br><span class="line">spring.data.neo4j.password= *# Login password of the server.*</span><br><span class="line"></span><br><span class="line">spring.data.neo4j.repositories.enabled=true *# Enable Neo4j repositories.*</span><br><span class="line"></span><br><span class="line">spring.data.neo4j.uri= *# URI used by the driver. Auto-detected by default.*</span><br><span class="line"></span><br><span class="line">spring.data.neo4j.username= *# Login user of the server.*</span><br><span class="line"></span><br><span class="line">*# DATA REST (*[&lt;u&gt;RepositoryRestProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/rest/RepositoryRestProperties.java))</span><br><span class="line"></span><br><span class="line">spring.data.rest.base-path= *# Base path to be used by Spring Data REST to expose repository resources.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.default-page-size= *# Default size of pages.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.detection-strategy=default *# Strategy to use to determine which repositories get exposed.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.enable-enum-translation= *# Enable enum value translation via the Spring Data REST default resource bundle.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.limit-param-name= *# Name of the URL query string parameter that indicates how many results to return at once.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.max-page-size= *# Maximum size of pages.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.page-param-name= *# Name of the URL query string parameter that indicates what page to return.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.return-body-on-create= *# Return a response body after creating an entity.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.return-body-on-update= *# Return a response body after updating an entity.*</span><br><span class="line"></span><br><span class="line">spring.data.rest.sort-param-name= *# Name of the URL query string parameter that indicates what direction to sort results.*</span><br><span class="line"></span><br><span class="line">*# SOLR (*[&lt;u&gt;SolrProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrProperties.java))</span><br><span class="line"></span><br><span class="line">spring.data.solr.host=http://127.0.0.1:8983/solr *# Solr host. Ignored if &quot;zk-host&quot; is set.*</span><br><span class="line"></span><br><span class="line">spring.data.solr.repositories.enabled=true *# Enable Solr repositories.*</span><br><span class="line"></span><br><span class="line">spring.data.solr.zk-host= *# ZooKeeper host address in the form HOST:PORT.*</span><br><span class="line"></span><br><span class="line">*# DATASOURCE (*[&lt;u&gt;DataSourceAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java)&amp; [&lt;u&gt;DataSourceProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java))</span><br><span class="line"></span><br><span class="line">spring.datasource.continue-on-error=false *# Do not stop if an error occurs while initializing the database.*</span><br><span class="line"></span><br><span class="line">spring.datasource.data= *# Data (DML) script resource references.*</span><br><span class="line"></span><br><span class="line">spring.datasource.data-username= *# User of the database to execute DML scripts (if different).*</span><br><span class="line"></span><br><span class="line">spring.datasource.data-password= *# Password of the database to execute DML scripts (if different).*</span><br><span class="line"></span><br><span class="line">spring.datasource.dbcp2.*= *# Commons DBCP2 specific settings*</span><br><span class="line"></span><br><span class="line">spring.datasource.driver-class-name= *# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.*</span><br><span class="line"></span><br><span class="line">spring.datasource.generate-unique-name=false *# Generate a random datasource name.*</span><br><span class="line"></span><br><span class="line">spring.datasource.hikari.*= *# Hikari specific settings*</span><br><span class="line"></span><br><span class="line">spring.datasource.initialize=true *# Populate the database using &apos;data.sql&apos;.*</span><br><span class="line"></span><br><span class="line">spring.datasource.jmx-enabled=false *# Enable JMX support (if provided by the underlying pool).*</span><br><span class="line"></span><br><span class="line">spring.datasource.jndi-name= *# JNDI location of the datasource. Class, url, username &amp; password are ignored when set.*</span><br><span class="line"></span><br><span class="line">spring.datasource.name=testdb *# Name of the datasource.*</span><br><span class="line"></span><br><span class="line">spring.datasource.password= *# Login password of the database.*</span><br><span class="line"></span><br><span class="line">spring.datasource.platform=all *# Platform to use in the schema resource (schema-$&#123;platform&#125;.sql).*</span><br><span class="line"></span><br><span class="line">spring.datasource.schema= *# Schema (DDL) script resource references.*</span><br><span class="line"></span><br><span class="line">spring.datasource.schema-username= *# User of the database to execute DDL scripts (if different).*</span><br><span class="line"></span><br><span class="line">spring.datasource.schema-password= *# Password of the database to execute DDL scripts (if different).*</span><br><span class="line"></span><br><span class="line">spring.datasource.separator=; *# Statement separator in SQL initialization scripts.*</span><br><span class="line"></span><br><span class="line">spring.datasource.sql-script-encoding= *# SQL scripts encoding.*</span><br><span class="line"></span><br><span class="line">spring.datasource.tomcat.*= *# Tomcat datasource specific settings*</span><br><span class="line"></span><br><span class="line">spring.datasource.type= *# Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.*</span><br><span class="line"></span><br><span class="line">spring.datasource.url= *# JDBC url of the database.*</span><br><span class="line"></span><br><span class="line">spring.datasource.username=</span><br><span class="line"></span><br><span class="line">*# JEST (Elasticsearch HTTP client) (*[&lt;u&gt;JestProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jest/JestProperties.java))</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.connection-timeout=3000 *# Connection timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.multi-threaded=true *# Enable connection requests from multiple execution threads.*</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.password= *# Login password.*</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.proxy.host= *# Proxy host the HTTP client should use.*</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.proxy.port= *# Proxy port the HTTP client should use.*</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.read-timeout=3000 *# Read timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.uris=http://localhost:9200 *# Comma-separated list of the Elasticsearch instances to use.*</span><br><span class="line"></span><br><span class="line">spring.elasticsearch.jest.username= *# Login user.*</span><br><span class="line"></span><br><span class="line">*# H2 Web Console (*[&lt;u&gt;H2ConsoleProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleProperties.java))</span><br><span class="line"></span><br><span class="line">spring.h2.console.enabled=false *# Enable the console.*</span><br><span class="line"></span><br><span class="line">spring.h2.console.path=/h2-console *# Path at which the console will be available.*</span><br><span class="line"></span><br><span class="line">spring.h2.console.settings.trace=false *# Enable trace output.*</span><br><span class="line"></span><br><span class="line">spring.h2.console.settings.web-allow-others=false *# Enable remote access.*</span><br><span class="line"></span><br><span class="line">*# JOOQ (*[&lt;u&gt;JooqAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.jooq.sql-dialect= *# SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`*</span><br><span class="line"></span><br><span class="line">*# JPA (*[&lt;u&gt;JpaBaseConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java), [&lt;u&gt;HibernateJpaAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.data.jpa.repositories.enabled=true *# Enable JPA repositories.*</span><br><span class="line"></span><br><span class="line">spring.jpa.database= *# Target database to operate on, auto-detected by default. Can be alternatively set using the &quot;databasePlatform&quot; property.*</span><br><span class="line"></span><br><span class="line">spring.jpa.database-platform= *# Name of the target database to operate on, auto-detected by default. Can be alternatively set using the &quot;Database&quot; enum.*</span><br><span class="line"></span><br><span class="line">spring.jpa.generate-ddl=false *# Initialize the schema on startup.*</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.ddl-auto= *# DDL mode. This is actually a shortcut for the &quot;hibernate.hbm2ddl.auto&quot; property. Default to &quot;create-drop&quot; when using an embedded database, &quot;none&quot; otherwise.*</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.naming.implicit-strategy= *# Hibernate 5 implicit naming strategy fully qualified name.*</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.naming.physical-strategy= *# Hibernate 5 physical naming strategy fully qualified name.*</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.naming.strategy= *# Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.*</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.use-new-id-generator-mappings= *# Use Hibernate&apos;s newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.*</span><br><span class="line"></span><br><span class="line">spring.jpa.open-in-view=true *# Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.*</span><br><span class="line"></span><br><span class="line">spring.jpa.properties.*= *# Additional native properties to set on the JPA provider.*</span><br><span class="line"></span><br><span class="line">spring.jpa.show-sql=false *# Enable logging of SQL statements.*</span><br><span class="line"></span><br><span class="line">*# JTA (*[&lt;u&gt;JtaAutoConfiguration&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration.java))</span><br><span class="line"></span><br><span class="line">spring.jta.enabled=true *# Enable JTA support.*</span><br><span class="line"></span><br><span class="line">spring.jta.log-dir= *# Transaction logs directory.*</span><br><span class="line"></span><br><span class="line">spring.jta.transaction-manager-id= *# Transaction manager unique identifier.*</span><br><span class="line"></span><br><span class="line">*# ATOMIKOS (*[&lt;u&gt;AtomikosProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java))</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 *# Timeout, in seconds, for borrowing connections from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true *# Whether or not to ignore the transacted flag when creating session.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode=false *# Whether or not local transactions are desired.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.maintenance-interval=60 *# The time, in seconds, between runs of the pool&apos;s maintenance thread.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.max-idle-time=60 *# The time, in seconds, after which connections are cleaned up from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.max-lifetime=0 *# The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.max-pool-size=1 *# The maximum size of the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.min-pool-size=1 *# The minimum size of the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.reap-timeout=0 *# The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory *# The unique name used to identify the resource during recovery.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.borrow-connection-timeout=30 *# Timeout, in seconds, for borrowing connections from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.default-isolation-level= *# Default isolation level of connections provided by the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.login-timeout= *# Timeout, in seconds, for establishing a database connection.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.maintenance-interval=60 *# The time, in seconds, between runs of the pool&apos;s maintenance thread.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.max-idle-time=60 *# The time, in seconds, after which connections are cleaned up from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.max-lifetime=0 *# The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.max-pool-size=1 *# The maximum size of the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.min-pool-size=1 *# The minimum size of the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.reap-timeout=0 *# The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.test-query= *# SQL query or statement used to validate a connection before returning it.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.datasource.unique-resource-name=dataSource *# The unique name used to identify the resource during recovery.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.checkpoint-interval=500 *# Interval between checkpoints.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.console-file-count=1 *# Number of debug logs files that can be created.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.console-file-limit=-1 *# How many bytes can be stored at most in debug logs files.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.console-file-name=tm.out *# Debug logs file name.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.console-log-level=warn *# Console log level.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.default-jta-timeout=10000 *# Default timeout for JTA transactions.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.enable-logging=true *# Enable disk logging.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false *# Specify if a VM shutdown should trigger forced shutdown of the transaction core.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.log-base-dir= *# Directory in which the log files should be stored.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.log-base-name=tmlog *# Transactions log file base name.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.max-actives=50 *# Maximum number of active transactions.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.max-timeout=300000 *# Maximum timeout (in milliseconds) that can be allowed for transactions.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.output-dir= *# Directory in which to store the debug log files.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.serial-jta-transactions=true *# Specify if sub-transactions should be joined when possible.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.service= *# Transaction manager implementation that should be started.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.threaded-two-phase-commit=true *# Use different (and concurrent) threads for two-phase commit on the participating resources.*</span><br><span class="line"></span><br><span class="line">spring.jta.atomikos.properties.transaction-manager-unique-name= *# Transaction manager&apos;s unique name.*</span><br><span class="line"></span><br><span class="line">*# BITRONIX*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.acquire-increment=1 *# Number of connections to create when growing the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-interval=1 *# Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout=30 *# Timeout, in seconds, for acquiring connections from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions=true *# Whether or not the transaction manager should allow mixing XA and non-XA transactions.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false *# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true *# Whether or not resources should be enlisted and delisted automatically.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.cache-producers-consumers=true *# Whether or not produces and consumers should be cached.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.defer-connection-release=true *# Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false *# Whether or not recovery failures should be ignored.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.max-idle-time=60 *# The time, in seconds, after which connections are cleaned up from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.max-pool-size=10 *# The maximum size of the pool. 0 denotes no limit.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.min-pool-size=0 *# The minimum size of the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.password= *# The password to use to connect to the JMS provider.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections=false *#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.test-connections=true *# Whether or not connections should be tested when acquired from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 *# The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory *# The unique name used to identify the resource during recovery.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.connectionfactory.user= *# The user to use to connect to the JMS provider.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.acquire-increment=1 *# Number of connections to create when growing the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.acquisition-interval=1 *# Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.acquisition-timeout=30 *# Timeout, in seconds, for acquiring connections from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.allow-local-transactions=true *# Whether or not the transaction manager should allow mixing XA and non-XA transactions.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.apply-transaction-timeout=false *# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled=true *# Whether or not resources should be enlisted and delisted automatically.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.cursor-holdability= *# The default cursor holdability for connections.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.defer-connection-release=true *# Whether or not the database can run many transactions on the same connection and supports transaction interleaving.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test= *# Whether or not Connection.isValid() is called when acquiring a connection from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.ignore-recovery-failures=false *# Whether or not recovery failures should be ignored.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.isolation-level= *# The default isolation level for connections.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.local-auto-commit= *# The default auto-commit mode for local transactions.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.login-timeout= *# Timeout, in seconds, for establishing a database connection.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.max-idle-time=60 *# The time, in seconds, after which connections are cleaned up from the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.max-pool-size=10 *# The maximum size of the pool. 0 denotes no limit.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.min-pool-size=0 *# The minimum size of the pool.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size=0 *# The target size of the prepared statement cache. 0 disables the cache.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.share-transaction-connections=false *#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.test-query= *# SQL query or statement used to validate a connection before returning it.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.two-pc-ordering-position=1 *# The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.unique-name=dataSource *# The unique name used to identify the resource during recovery.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.allow-multiple-lrc=false *# Allow multiple LRC resources to be enlisted into the same transaction.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.asynchronous2-pc=false *# Enable asynchronously execution of two phase commit.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.background-recovery-interval-seconds=60 *# Interval in seconds at which to run the recovery process in the background.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.current-node-only-recovery=true *# Recover only the current node.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.debug-zero-resource-transaction=false *# Log the creation and commit call stacks of transactions executed without a single enlisted resource.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.default-transaction-timeout=60 *# Default transaction timeout in seconds.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.disable-jmx=false *# Enable JMX support.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.exception-analyzer= *# Set the fully qualified name of the exception analyzer implementation to use.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.filter-log-status=false *# Enable filtering of logs so that only mandatory logs are written.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.force-batching-enabled=true *#  Set if disk forces are batched.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.forced-write-enabled=true *# Set if logs are forced to disk.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.graceful-shutdown-interval=60 *# Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= *# JNDI name of the TransactionSynchronizationRegistry.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.jndi-user-transaction-name= *# JNDI name of the UserTransaction.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.journal=disk *# Name of the journal. Can be &apos;disk&apos;, &apos;null&apos; or a class name.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.log-part1-filename=btm1.tlog *# Name of the first fragment of the journal.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.log-part2-filename=btm2.tlog *# Name of the second fragment of the journal.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.max-log-size-in-mb=2 *# Maximum size in megabytes of the journal fragments.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.resource-configuration-filename= *# ResourceLoader configuration file name.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.server-id= *# ASCII ID that must uniquely identify this TM instance. Default to the machine&apos;s IP address.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.skip-corrupted-logs=false *# Skip corrupted transactions log entries.*</span><br><span class="line"></span><br><span class="line">spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true *# Log a warning for transactions executed without a single enlisted resource.*</span><br><span class="line"></span><br><span class="line">*# NARAYANA (*[&lt;u&gt;NarayanaProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot/src/main/java/org/springframework/boot/jta/narayana/NarayanaProperties.java))</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.default-timeout=60 *# Transaction timeout in seconds.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner *# Comma-separated list of expiry scanners.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.log-dir= *# Transaction object store directory.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.one-phase-commit=true *# Enable one phase commit optimisation.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.periodic-recovery-period=120 *# Interval in which periodic recovery scans are performed in seconds.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.recovery-backoff-period=10 *# Back off period between first and second phases of the recovery scan in seconds.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.recovery-db-pass= *# Database password to be used by recovery manager.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.recovery-db-user= *# Database username to be used by recovery manager.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.recovery-jms-pass= *# JMS password to be used by recovery manager.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.recovery-jms-user= *# JMS username to be used by recovery manager.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.recovery-modules= *# Comma-separated list of recovery modules.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.transaction-manager-id=1 *# Unique transaction manager id.*</span><br><span class="line"></span><br><span class="line">spring.jta.narayana.xa-resource-orphan-filters= *# Comma-separated list of orphan filters.*</span><br><span class="line"></span><br><span class="line">*# EMBEDDED MONGODB (*[&lt;u&gt;EmbeddedMongoProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoProperties.java))</span><br><span class="line"></span><br><span class="line">spring.mongodb.embedded.features=SYNC_DELAY *# Comma-separated list of features to enable.*</span><br><span class="line"></span><br><span class="line">spring.mongodb.embedded.storage.database-dir= *# Directory used for data storage.*</span><br><span class="line"></span><br><span class="line">spring.mongodb.embedded.storage.oplog-size= *# Maximum size of the oplog in megabytes.*</span><br><span class="line"></span><br><span class="line">spring.mongodb.embedded.storage.repl-set-name= *# Name of the replica set.*</span><br><span class="line"></span><br><span class="line">spring.mongodb.embedded.version=2.6.10 *# Version of Mongo to use.*</span><br><span class="line"></span><br><span class="line">*# REDIS (*[&lt;u&gt;RedisProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java))</span><br><span class="line"></span><br><span class="line">spring.redis.cluster.max-redirects= *# Maximum number of redirects to follow when executing commands across the cluster.*</span><br><span class="line"></span><br><span class="line">spring.redis.cluster.nodes= *# Comma-separated list of &quot;host:port&quot; pairs to bootstrap from.*</span><br><span class="line"></span><br><span class="line">spring.redis.database=0 *# Database index used by the connection factory.*</span><br><span class="line"></span><br><span class="line">spring.redis.url= *# Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379*</span><br><span class="line"></span><br><span class="line">spring.redis.host=localhost *# Redis server host.*</span><br><span class="line"></span><br><span class="line">spring.redis.password= *# Login password of the redis server.*</span><br><span class="line"></span><br><span class="line">spring.redis.ssl=false *# Enable SSL support.*</span><br><span class="line"></span><br><span class="line">spring.redis.pool.max-active=8 *# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.*</span><br><span class="line"></span><br><span class="line">spring.redis.pool.max-idle=8 *# Max number of &quot;idle&quot; connections in the pool. Use a negative value to indicate an unlimited number of idle connections.*</span><br><span class="line"></span><br><span class="line">spring.redis.pool.max-wait=-1 *# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.*</span><br><span class="line"></span><br><span class="line">spring.redis.pool.min-idle=0 *# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.*</span><br><span class="line"></span><br><span class="line">spring.redis.port=6379 *# Redis server port.*</span><br><span class="line"></span><br><span class="line">spring.redis.sentinel.master= *# Name of Redis server.*</span><br><span class="line"></span><br><span class="line">spring.redis.sentinel.nodes= *# Comma-separated list of host:port pairs.*</span><br><span class="line"></span><br><span class="line">spring.redis.timeout=0 *# Connection timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">*# TRANSACTION (*[&lt;u&gt;TransactionProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionProperties.java))</span><br><span class="line"></span><br><span class="line">spring.transaction.default-timeout= *# Default transaction timeout in seconds.*</span><br><span class="line"></span><br><span class="line">spring.transaction.rollback-on-commit-failure= *# Perform the rollback on commit failures.*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# INTEGRATION PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# ACTIVEMQ (*[&lt;u&gt;ActiveMQProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java))</span><br><span class="line"></span><br><span class="line">spring.activemq.broker-url= *# URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`*</span><br><span class="line"></span><br><span class="line">spring.activemq.in-memory=true *# Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.*</span><br><span class="line"></span><br><span class="line">spring.activemq.password= *# Login password of the broker.*</span><br><span class="line"></span><br><span class="line">spring.activemq.user= *# Login user of the broker.*</span><br><span class="line"></span><br><span class="line">spring.activemq.packages.trust-all=false *# Trust all packages.*</span><br><span class="line"></span><br><span class="line">spring.activemq.packages.trusted= *# Comma-separated list of specific packages to trust (when not trusting all packages).*</span><br><span class="line"></span><br><span class="line">spring.activemq.pool.configuration.*= *# See PooledConnectionFactory.*</span><br><span class="line"></span><br><span class="line">spring.activemq.pool.enabled=false *# Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.*</span><br><span class="line"></span><br><span class="line">spring.activemq.pool.expiry-timeout=0 *# Connection expiration timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.activemq.pool.idle-timeout=30000 *# Connection idle timeout in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.activemq.pool.max-connections=1 *# Maximum number of pooled connections.*</span><br><span class="line"></span><br><span class="line">*# ARTEMIS (*[&lt;u&gt;ArtemisProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java))</span><br><span class="line"></span><br><span class="line">spring.artemis.embedded.cluster-password= *# Cluster password. Randomly generated on startup by default.*</span><br><span class="line"></span><br><span class="line">spring.artemis.embedded.data-directory= *# Journal file directory. Not necessary if persistence is turned off.*</span><br><span class="line"></span><br><span class="line">spring.artemis.embedded.enabled=true *# Enable embedded mode if the Artemis server APIs are available.*</span><br><span class="line"></span><br><span class="line">spring.artemis.embedded.persistent=false *# Enable persistent store.*</span><br><span class="line"></span><br><span class="line">spring.artemis.embedded.queues= *# Comma-separated list of queues to create on startup.*</span><br><span class="line"></span><br><span class="line">spring.artemis.embedded.server-id= *# Server id. By default, an auto-incremented counter is used.*</span><br><span class="line"></span><br><span class="line">spring.artemis.embedded.topics= *# Comma-separated list of topics to create on startup.*</span><br><span class="line"></span><br><span class="line">spring.artemis.host=localhost *# Artemis broker host.*</span><br><span class="line"></span><br><span class="line">spring.artemis.mode= *# Artemis deployment mode, auto-detected by default.*</span><br><span class="line"></span><br><span class="line">spring.artemis.password= *# Login password of the broker.*</span><br><span class="line"></span><br><span class="line">spring.artemis.port=61616 *# Artemis broker port.*</span><br><span class="line"></span><br><span class="line">spring.artemis.user= *# Login user of the broker.*</span><br><span class="line"></span><br><span class="line">*# SPRING BATCH (*[&lt;u&gt;BatchProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java))</span><br><span class="line"></span><br><span class="line">spring.batch.initializer.enabled= *# Create the required batch tables on startup if necessary. Enabled automatically if no custom table prefix is set or if a custom schema is configured.*</span><br><span class="line"></span><br><span class="line">spring.batch.job.enabled=true *# Execute all Spring Batch jobs in the context on startup.*</span><br><span class="line"></span><br><span class="line">spring.batch.job.names= *# Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.*</span><br><span class="line"></span><br><span class="line">spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql *# Path to the SQL file to use to initialize the database schema.*</span><br><span class="line"></span><br><span class="line">spring.batch.table-prefix= *# Table prefix for all the batch meta-data tables.*</span><br><span class="line"></span><br><span class="line">*# JMS (*[&lt;u&gt;JmsProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsProperties.java))</span><br><span class="line"></span><br><span class="line">spring.jms.jndi-name= *# Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.*</span><br><span class="line"></span><br><span class="line">spring.jms.listener.acknowledge-mode= *# Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.*</span><br><span class="line"></span><br><span class="line">spring.jms.listener.auto-startup=true *# Start the container automatically on startup.*</span><br><span class="line"></span><br><span class="line">spring.jms.listener.concurrency= *# Minimum number of concurrent consumers.*</span><br><span class="line"></span><br><span class="line">spring.jms.listener.max-concurrency= *# Maximum number of concurrent consumers.*</span><br><span class="line"></span><br><span class="line">spring.jms.pub-sub-domain=false *# Specify if the default destination type is topic.*</span><br><span class="line"></span><br><span class="line">spring.jms.template.default-destination= *# Default destination to use on send/receive operations that do not have a destination parameter.*</span><br><span class="line"></span><br><span class="line">spring.jms.template.delivery-delay= *# Delivery delay to use for send calls in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.jms.template.delivery-mode= *# Delivery mode. Enable QoS when set.*</span><br><span class="line"></span><br><span class="line">spring.jms.template.priority= *# Priority of a message when sending. Enable QoS when set.*</span><br><span class="line"></span><br><span class="line">spring.jms.template.qos-enabled= *# Enable explicit QoS when sending a message.*</span><br><span class="line"></span><br><span class="line">spring.jms.template.receive-timeout= *# Timeout to use for receive calls in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.jms.template.time-to-live= *# Time-to-live of a message when sending in milliseconds. Enable QoS when set.*</span><br><span class="line"></span><br><span class="line">*# APACHE KAFKA (*[&lt;u&gt;KafkaProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java))</span><br><span class="line"></span><br><span class="line">spring.kafka.bootstrap-servers= *# Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.*</span><br><span class="line"></span><br><span class="line">spring.kafka.client-id= *# Id to pass to the server when making requests; used for server-side logging.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.auto-commit-interval= *# Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if &apos;enable.auto.commit&apos; true.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.auto-offset-reset= *# What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.bootstrap-servers= *# Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.client-id= *# Id to pass to the server when making requests; used for server-side logging.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.enable-auto-commit= *# If true the consumer&apos;s offset will be periodically committed in the background.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.fetch-max-wait= *# Maximum amount of time in milliseconds the server will block before answering the fetch request if there isn&apos;t sufficient data to immediately satisfy the requirement given by &quot;fetch.min.bytes&quot;.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.fetch-min-size= *# Minimum amount of data the server should return for a fetch request in bytes.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.group-id= *# Unique string that identifies the consumer group this consumer belongs to.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.heartbeat-interval= *# Expected time in milliseconds between heartbeats to the consumer coordinator.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.key-deserializer= *# Deserializer class for keys.*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.max-poll-records= *# Maximum number of records returned in a single call to poll().*</span><br><span class="line"></span><br><span class="line">spring.kafka.consumer.value-deserializer= *# Deserializer class for values.*</span><br><span class="line"></span><br><span class="line">spring.kafka.listener.ack-count= *# Number of records between offset commits when ackMode is &quot;COUNT&quot; or &quot;COUNT_TIME&quot;.*</span><br><span class="line"></span><br><span class="line">spring.kafka.listener.ack-mode= *# Listener AckMode; see the spring-kafka documentation.*</span><br><span class="line"></span><br><span class="line">spring.kafka.listener.ack-time= *# Time in milliseconds between offset commits when ackMode is &quot;TIME&quot; or &quot;COUNT_TIME&quot;.*</span><br><span class="line"></span><br><span class="line">spring.kafka.listener.concurrency= *# Number of threads to run in the listener containers.*</span><br><span class="line"></span><br><span class="line">spring.kafka.listener.poll-timeout= *# Timeout in milliseconds to use when polling the consumer.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.acks= *# Number of acknowledgments the producer requires the leader to have received before considering a request complete.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.batch-size= *# Number of records to batch before sending.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.bootstrap-servers= *# Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.buffer-memory= *# Total bytes of memory the producer can use to buffer records waiting to be sent to the server.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.client-id= *# Id to pass to the server when making requests; used for server-side logging.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.compression-type= *# Compression type for all data generated by the producer.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.key-serializer= *# Serializer class for keys.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.retries= *# When greater than zero, enables retrying of failed sends.*</span><br><span class="line"></span><br><span class="line">spring.kafka.producer.value-serializer= *# Serializer class for values.*</span><br><span class="line"></span><br><span class="line">spring.kafka.properties.*= *# Additional properties used to configure the client.*</span><br><span class="line"></span><br><span class="line">spring.kafka.ssl.key-password= *# Password of the private key in the key store file.*</span><br><span class="line"></span><br><span class="line">spring.kafka.ssl.keystore-location= *# Location of the key store file.*</span><br><span class="line"></span><br><span class="line">spring.kafka.ssl.keystore-password= *# Store password for the key store file.*</span><br><span class="line"></span><br><span class="line">spring.kafka.ssl.truststore-location= *# Location of the trust store file.*</span><br><span class="line"></span><br><span class="line">spring.kafka.ssl.truststore-password= *# Store password for the trust store file.*</span><br><span class="line"></span><br><span class="line">spring.kafka.template.default-topic= *# Default topic to which messages will be sent.*</span><br><span class="line"></span><br><span class="line">*# RABBIT (*[&lt;u&gt;RabbitProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java))</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.addresses= *# Comma-separated list of addresses to which the client should connect.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.cache.channel.checkout-timeout= *# Number of milliseconds to wait to obtain a channel if the cache size has been reached.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.cache.channel.size= *# Number of channels to retain in the cache.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.cache.connection.mode=channel *# Connection factory cache mode.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.cache.connection.size= *# Number of connections to cache.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.connection-timeout= *# Connection timeout, in milliseconds; zero for infinite.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.dynamic=true *# Create an AmqpAdmin bean.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.host=localhost *# RabbitMQ host.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.acknowledge-mode= *# Acknowledge mode of container.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.auto-startup=true *# Start the container automatically on startup.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.concurrency= *# Minimum number of consumers.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.default-requeue-rejected= *# Whether or not to requeue delivery failures; default `true`.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.idle-event-interval= *# How often idle container events should be published in milliseconds.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.max-concurrency= *# Maximum number of consumers.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.prefetch= *# Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.retry.enabled=false *# Whether or not publishing retries are enabled.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.retry.initial-interval=1000 *# Interval between the first and second attempt to deliver a message.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.retry.max-attempts=3 *# Maximum number of attempts to deliver a message.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.retry.max-interval=10000 *# Maximum interval between attempts.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.retry.multiplier=1.0 *# A multiplier to apply to the previous delivery retry interval.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.retry.stateless=true *# Whether or not retry is stateless or stateful.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.listener.transaction-size= *# Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.password= *# Login to authenticate against the broker.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.port=5672 *# RabbitMQ port.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.publisher-confirms=false *# Enable publisher confirms.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.publisher-returns=false *# Enable publisher returns.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.requested-heartbeat= *# Requested heartbeat timeout, in seconds; zero for none.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.ssl.enabled=false *# Enable SSL support.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.ssl.key-store= *# Path to the key store that holds the SSL certificate.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.ssl.key-store-password= *# Password used to access the key store.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.ssl.trust-store= *# Trust store that holds SSL certificates.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.ssl.trust-store-password= *# Password used to access the trust store.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.ssl.algorithm= *# SSL algorithm to use. By default configure by the rabbit client library.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.mandatory=false *# Enable mandatory messages.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.receive-timeout=0 *# Timeout for `receive()` methods.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.reply-timeout=5000 *# Timeout for `sendAndReceive()` methods.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.retry.enabled=false *# Set to true to enable retries in the `RabbitTemplate`.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.retry.initial-interval=1000 *# Interval between the first and second attempt to publish a message.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.retry.max-attempts=3 *# Maximum number of attempts to publish a message.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.retry.max-interval=10000 *# Maximum number of attempts to publish a message.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.template.retry.multiplier=1.0 *# A multiplier to apply to the previous publishing retry interval.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.username= *# Login user to authenticate to the broker.*</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.virtual-host= *# Virtual host to use when connecting to the broker.*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# ACTUATOR PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# ENDPOINTS (*[&lt;u&gt;AbstractEndpoint&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java) subclasses)</span><br><span class="line"></span><br><span class="line">endpoints.enabled=true *# Enable endpoints.*</span><br><span class="line"></span><br><span class="line">endpoints.sensitive= *# Default endpoint sensitive setting.*</span><br><span class="line"></span><br><span class="line">endpoints.actuator.enabled=true *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.actuator.path= *# Endpoint URL path.*</span><br><span class="line"></span><br><span class="line">endpoints.actuator.sensitive=false *# Enable security on the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.auditevents.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.auditevents.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.auditevents.sensitive=false *# Enable security on the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.autoconfig.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.autoconfig.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.autoconfig.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.autoconfig.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.beans.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.beans.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.beans.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.beans.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.configprops.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.configprops.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services *# Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.*</span><br><span class="line"></span><br><span class="line">endpoints.configprops.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.configprops.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.docs.curies.enabled=false *# Enable the curie generation.*</span><br><span class="line"></span><br><span class="line">endpoints.docs.enabled=true *# Enable actuator docs endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.docs.path=/docs *#*</span><br><span class="line"></span><br><span class="line">endpoints.docs.sensitive=false *#*</span><br><span class="line"></span><br><span class="line">endpoints.dump.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.dump.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.dump.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.dump.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.env.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.env.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services *# Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.*</span><br><span class="line"></span><br><span class="line">endpoints.env.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.env.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.flyway.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.flyway.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.flyway.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.health.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.health.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.health.mapping.*= *# Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).*</span><br><span class="line"></span><br><span class="line">endpoints.health.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.health.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.health.time-to-live=1000 *# Time to live for cached result, in milliseconds.*</span><br><span class="line"></span><br><span class="line">endpoints.heapdump.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.heapdump.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.heapdump.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.hypermedia.enabled=false *# Enable hypermedia support for endpoints.*</span><br><span class="line"></span><br><span class="line">endpoints.info.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.info.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.info.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.info.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.jolokia.enabled=true *# Enable Jolokia endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.jolokia.path=/jolokia *# Endpoint URL path.*</span><br><span class="line"></span><br><span class="line">endpoints.jolokia.sensitive=true *# Enable security on the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.liquibase.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.liquibase.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.liquibase.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.logfile.enabled=true *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.logfile.external-file= *# External Logfile to be accessed.*</span><br><span class="line"></span><br><span class="line">endpoints.logfile.path=/logfile *# Endpoint URL path.*</span><br><span class="line"></span><br><span class="line">endpoints.logfile.sensitive=true *# Enable security on the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.loggers.enabled=true *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.loggers.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.loggers.path=/logfile *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.loggers.sensitive=true *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.mappings.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.mappings.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.mappings.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.mappings.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.metrics.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.metrics.filter.enabled=true *# Enable the metrics servlet filter.*</span><br><span class="line"></span><br><span class="line">endpoints.metrics.filter.gauge-submissions=merged *# Http filter gauge submissions (merged, per-http-method)*</span><br><span class="line"></span><br><span class="line">endpoints.metrics.filter.counter-submissions=merged *# Http filter counter submissions (merged, per-http-method)*</span><br><span class="line"></span><br><span class="line">endpoints.metrics.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.metrics.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.metrics.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.shutdown.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.shutdown.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.shutdown.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.shutdown.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">endpoints.trace.enabled= *# Enable the endpoint.*</span><br><span class="line"></span><br><span class="line">endpoints.trace.id= *# Endpoint identifier.*</span><br><span class="line"></span><br><span class="line">endpoints.trace.path= *# Endpoint path.*</span><br><span class="line"></span><br><span class="line">endpoints.trace.sensitive= *# Mark if the endpoint exposes sensitive information.*</span><br><span class="line"></span><br><span class="line">*# ENDPOINTS CORS CONFIGURATION (*[&lt;u&gt;EndpointCorsProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointCorsProperties.java))</span><br><span class="line"></span><br><span class="line">endpoints.cors.allow-credentials= *# Set whether credentials are supported. When not set, credentials are not supported.*</span><br><span class="line"></span><br><span class="line">endpoints.cors.allowed-headers= *# Comma-separated list of headers to allow in a request. &apos;*&apos; allows all headers.*</span><br><span class="line"></span><br><span class="line">endpoints.cors.allowed-methods=GET *# Comma-separated list of methods to allow. &apos;*&apos; allows all methods.*</span><br><span class="line"></span><br><span class="line">endpoints.cors.allowed-origins= *# Comma-separated list of origins to allow. &apos;*&apos; allows all origins. When not set, CORS support is disabled.*</span><br><span class="line"></span><br><span class="line">endpoints.cors.exposed-headers= *# Comma-separated list of headers to include in a response.*</span><br><span class="line"></span><br><span class="line">endpoints.cors.max-age=1800 *# How long, in seconds, the response from a pre-flight request can be cached by clients.*</span><br><span class="line"></span><br><span class="line">*# JMX ENDPOINT (*[&lt;u&gt;EndpointMBeanExportProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportProperties.java))</span><br><span class="line"></span><br><span class="line">endpoints.jmx.domain= *# JMX domain name. Initialized with the value of &apos;spring.jmx.default-domain&apos; if set.*</span><br><span class="line"></span><br><span class="line">endpoints.jmx.enabled=true *# Enable JMX export of all endpoints.*</span><br><span class="line"></span><br><span class="line">endpoints.jmx.static-names= *# Additional static properties to append to all ObjectNames of MBeans representing Endpoints.*</span><br><span class="line"></span><br><span class="line">endpoints.jmx.unique-names=false *# Ensure that ObjectNames are modified in case of conflict.*</span><br><span class="line"></span><br><span class="line">*# JOLOKIA (*[&lt;u&gt;JolokiaProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaProperties.java))</span><br><span class="line"></span><br><span class="line">jolokia.config.*= *# See Jolokia manual*</span><br><span class="line"></span><br><span class="line">*# MANAGEMENT HTTP SERVER (*[&lt;u&gt;ManagementServerProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java))</span><br><span class="line"></span><br><span class="line">management.add-application-context-header=true *# Add the &quot;X-Application-Context&quot; HTTP header in each response.*</span><br><span class="line"></span><br><span class="line">management.address= *# Network address that the management endpoints should bind to.*</span><br><span class="line"></span><br><span class="line">management.context-path= *# Management endpoint context-path. For instance `/actuator`*</span><br><span class="line"></span><br><span class="line">management.cloudfoundry.enabled= *# Enable extended Cloud Foundry actuator endpoints*</span><br><span class="line"></span><br><span class="line">management.cloudfoundry.skip-ssl-validation= *# Skip SSL verification for Cloud Foundry actuator endpoint security calls*</span><br><span class="line"></span><br><span class="line">management.port= *# Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.*</span><br><span class="line"></span><br><span class="line">management.security.enabled=true *# Enable security.*</span><br><span class="line"></span><br><span class="line">management.security.roles=ACTUATOR *# Comma-separated list of roles that can access the management endpoint.*</span><br><span class="line"></span><br><span class="line">management.security.sessions=stateless *# Session creating policy to use (always, never, if_required, stateless).*</span><br><span class="line"></span><br><span class="line">management.ssl.ciphers= *# Supported SSL ciphers. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.client-auth= *# Whether client authentication is wanted (&quot;want&quot;) or needed (&quot;need&quot;). Requires a trust store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.enabled= *# Enable SSL support. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.enabled-protocols= *# Enabled SSL protocols. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.key-alias= *# Alias that identifies the key in the key store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.key-password= *# Password used to access the key in the key store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.key-store= *# Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.key-store-password= *# Password used to access the key store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.key-store-provider= *# Provider for the key store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.key-store-type= *# Type of the key store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.protocol=TLS *# SSL protocol to use. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.trust-store= *# Trust store that holds SSL certificates. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.trust-store-password= *# Password used to access the trust store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.trust-store-provider= *# Provider for the trust store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">management.ssl.trust-store-type= *# Type of the trust store. Requires a custom management.port.*</span><br><span class="line"></span><br><span class="line">*# HEALTH INDICATORS*</span><br><span class="line"></span><br><span class="line">management.health.db.enabled=true *# Enable database health check.*</span><br><span class="line"></span><br><span class="line">management.health.cassandra.enabled=true *# Enable cassandra health check.*</span><br><span class="line"></span><br><span class="line">management.health.couchbase.enabled=true *# Enable couchbase health check.*</span><br><span class="line"></span><br><span class="line">management.health.defaults.enabled=true *# Enable default health indicators.*</span><br><span class="line"></span><br><span class="line">management.health.diskspace.enabled=true *# Enable disk space health check.*</span><br><span class="line"></span><br><span class="line">management.health.diskspace.path= *# Path used to compute the available disk space.*</span><br><span class="line"></span><br><span class="line">management.health.diskspace.threshold=0 *# Minimum disk space that should be available, in bytes.*</span><br><span class="line"></span><br><span class="line">management.health.elasticsearch.enabled=true *# Enable elasticsearch health check.*</span><br><span class="line"></span><br><span class="line">management.health.elasticsearch.indices= *# Comma-separated index names.*</span><br><span class="line"></span><br><span class="line">management.health.elasticsearch.response-timeout=100 *# The time, in milliseconds, to wait for a response from the cluster.*</span><br><span class="line"></span><br><span class="line">management.health.jms.enabled=true *# Enable JMS health check.*</span><br><span class="line"></span><br><span class="line">management.health.ldap.enabled=true *# Enable LDAP health check.*</span><br><span class="line"></span><br><span class="line">management.health.mail.enabled=true *# Enable Mail health check.*</span><br><span class="line"></span><br><span class="line">management.health.mongo.enabled=true *# Enable MongoDB health check.*</span><br><span class="line"></span><br><span class="line">management.health.rabbit.enabled=true *# Enable RabbitMQ health check.*</span><br><span class="line"></span><br><span class="line">management.health.redis.enabled=true *# Enable Redis health check.*</span><br><span class="line"></span><br><span class="line">management.health.solr.enabled=true *# Enable Solr health check.*</span><br><span class="line"></span><br><span class="line">management.health.status.order=DOWN, OUT_OF_SERVICE, UP, UNKNOWN *# Comma-separated list of health statuses in order of severity.*</span><br><span class="line"></span><br><span class="line">*# INFO CONTRIBUTORS (*[&lt;u&gt;InfoContributorProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorProperties.java))</span><br><span class="line"></span><br><span class="line">management.info.build.enabled=true *# Enable build info.*</span><br><span class="line"></span><br><span class="line">management.info.defaults.enabled=true *# Enable default info contributors.*</span><br><span class="line"></span><br><span class="line">management.info.env.enabled=true *# Enable environment info.*</span><br><span class="line"></span><br><span class="line">management.info.git.enabled=true *# Enable git info.*</span><br><span class="line"></span><br><span class="line">management.info.git.mode=simple *# Mode to use to expose git information.*</span><br><span class="line"></span><br><span class="line">*# REMOTE SHELL (*[&lt;u&gt;ShellProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java))</span><br><span class="line"></span><br><span class="line">management.shell.auth.type=simple *# Authentication type. Auto-detected according to the environment.*</span><br><span class="line"></span><br><span class="line">management.shell.auth.jaas.domain=my-domain *# JAAS domain.*</span><br><span class="line"></span><br><span class="line">management.shell.auth.key.path= *# Path to the authentication key. This should point to a valid &quot;.pem&quot; file.*</span><br><span class="line"></span><br><span class="line">management.shell.auth.simple.user.name=user *# Login user.*</span><br><span class="line"></span><br><span class="line">management.shell.auth.simple.user.password= *# Login password.*</span><br><span class="line"></span><br><span class="line">management.shell.auth.spring.roles=ACTUATOR *# Comma-separated list of required roles to login to the CRaSH console.*</span><br><span class="line"></span><br><span class="line">management.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** *# Patterns to use to look for commands.*</span><br><span class="line"></span><br><span class="line">management.shell.command-refresh-interval=-1 *# Scan for changes and update the command if necessary (in seconds).*</span><br><span class="line"></span><br><span class="line">management.shell.config-path-patterns=classpath*:/crash/* *# Patterns to use to look for configurations.*</span><br><span class="line"></span><br><span class="line">management.shell.disabled-commands=jpa*,jdbc*,jndi* *# Comma-separated list of commands to disable.*</span><br><span class="line"></span><br><span class="line">management.shell.disabled-plugins= *# Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.*</span><br><span class="line"></span><br><span class="line">management.shell.ssh.auth-timeout = *# Number of milliseconds after user will be prompted to login again.*</span><br><span class="line"></span><br><span class="line">management.shell.ssh.enabled=true *# Enable CRaSH SSH support.*</span><br><span class="line"></span><br><span class="line">management.shell.ssh.idle-timeout = *# Number of milliseconds after which unused connections are closed.*</span><br><span class="line"></span><br><span class="line">management.shell.ssh.key-path= *# Path to the SSH server key.*</span><br><span class="line"></span><br><span class="line">management.shell.ssh.port=2000 *# SSH port.*</span><br><span class="line"></span><br><span class="line">management.shell.telnet.enabled=false *# Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.*</span><br><span class="line"></span><br><span class="line">management.shell.telnet.port=5000 *# Telnet port.*</span><br><span class="line"></span><br><span class="line">*# TRACING (*[&lt;u&gt;TraceProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java))</span><br><span class="line"></span><br><span class="line">management.trace.include=request-headers,response-headers,cookies,errors *# Items to be included in the trace.*</span><br><span class="line"></span><br><span class="line">*# METRICS EXPORT (*[&lt;u&gt;MetricExportProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java))</span><br><span class="line"></span><br><span class="line">spring.metrics.export.aggregate.key-pattern= *# Pattern that tells the aggregator what to do with the keys from the source repository.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.aggregate.prefix= *# Prefix for global repository if active.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.delay-millis=5000 *# Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.enabled=true *# Flag to enable metric export (assuming a MetricWriter is available).*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.excludes= *# List of patterns for metric names to exclude. Applied after the includes.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.includes= *# List of patterns for metric names to include.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.redis.key=keys.spring.metrics *# Key for redis repository export (if active).*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.redis.prefix=spring.metrics *# Prefix for redis repository if active.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.send-latest= *# Flag to switch off any available optimizations based on not exporting unchanged metric values.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.statsd.host= *# Host of a statsd server to receive exported metrics.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.statsd.port=8125 *# Port of a statsd server to receive exported metrics.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.statsd.prefix= *# Prefix for statsd exported metrics.*</span><br><span class="line"></span><br><span class="line">spring.metrics.export.triggers.*= *# Specific trigger properties per MetricWriter bean name.*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# DEVTOOLS PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# DEVTOOLS (*[&lt;u&gt;DevToolsProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java))</span><br><span class="line"></span><br><span class="line">spring.devtools.livereload.enabled=true *# Enable a livereload.com compatible server.*</span><br><span class="line"></span><br><span class="line">spring.devtools.livereload.port=35729 *# Server port.*</span><br><span class="line"></span><br><span class="line">spring.devtools.restart.additional-exclude= *# Additional patterns that should be excluded from triggering a full restart.*</span><br><span class="line"></span><br><span class="line">spring.devtools.restart.additional-paths= *# Additional paths to watch for changes.*</span><br><span class="line"></span><br><span class="line">spring.devtools.restart.enabled=true *# Enable automatic restart.*</span><br><span class="line"></span><br><span class="line">spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties *# Patterns that should be excluded from triggering a full restart.*</span><br><span class="line"></span><br><span class="line">spring.devtools.restart.poll-interval=1000 *# Amount of time (in milliseconds) to wait between polling for classpath changes.*</span><br><span class="line"></span><br><span class="line">spring.devtools.restart.quiet-period=400 *# Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.*</span><br><span class="line"></span><br><span class="line">spring.devtools.restart.trigger-file= *# Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.*</span><br><span class="line"></span><br><span class="line">*# REMOTE DEVTOOLS (*[&lt;u&gt;RemoteDevToolsProperties&lt;/u&gt;](https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsProperties.java))</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.context-path=/.~~spring-boot!~ *# Context path used to handle the remote connection.*</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.debug.enabled=true *# Enable remote debug support.*</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.debug.local-port=8000 *# Local remote debug server port.*</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.proxy.host= *# The host of the proxy to use to connect to the remote application.*</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.proxy.port= *# The port of the proxy to use to connect to the remote application.*</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.restart.enabled=true *# Enable remote restart.*</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.secret= *# A shared secret required to establish a connection (required to enable remote support).*</span><br><span class="line"></span><br><span class="line">spring.devtools.remote.secret-header-name=X-AUTH-TOKEN *# HTTP header used to transfer the shared secret.*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">*# TESTING PROPERTIES*</span><br><span class="line"></span><br><span class="line">*# ----------------------------------------*</span><br><span class="line"></span><br><span class="line">spring.test.database.replace=any *# Type of existing DataSource to replace.*</span><br><span class="line"></span><br><span class="line">spring.test.mockmvc.print=default *# MVC Print option.*</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
